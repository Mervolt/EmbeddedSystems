ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_SDMMC1_SD_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-sp-d16
  24              	MX_SDMMC1_SD_Init:
  25              	.LFB174:
  26              		.file 1 "main.c"
   1:main.c        **** 
   2:main.c        **** /**
   3:main.c        ****   ******************************************************************************
   4:main.c        ****   * @file           : main.c
   5:main.c        ****   * @brief          : Main program body
   6:main.c        ****   ******************************************************************************
   7:main.c        ****   * This notice applies to any and all portions of this file
   8:main.c        ****   * that are not between comment pairs USER CODE BEGIN and
   9:main.c        ****   * USER CODE END. Other portions of this file, whether 
  10:main.c        ****   * inserted by the user or by software development tools
  11:main.c        ****   * are owned by their respective copyright owners.
  12:main.c        ****   *
  13:main.c        ****   * Copyright (c) 2018 STMicroelectronics International N.V. 
  14:main.c        ****   * All rights reserved.
  15:main.c        ****   *
  16:main.c        ****   * Redistribution and use in source and binary forms, with or without 
  17:main.c        ****   * modification, are permitted, provided that the following conditions are met:
  18:main.c        ****   *
  19:main.c        ****   * 1. Redistribution of source code must retain the above copyright notice, 
  20:main.c        ****   *    this list of conditions and the following disclaimer.
  21:main.c        ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:main.c        ****   *    this list of conditions and the following disclaimer in the documentation
  23:main.c        ****   *    and/or other materials provided with the distribution.
  24:main.c        ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  25:main.c        ****   *    contributors to this software may be used to endorse or promote products 
  26:main.c        ****   *    derived from this software without specific written permission.
  27:main.c        ****   * 4. This software, including modifications and/or derivative works of this 
  28:main.c        ****   *    software, must execute solely and exclusively on microcontroller or
  29:main.c        ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:main.c        ****   * 5. Redistribution and use of this software other than as permitted under 
  31:main.c        ****   *    this license is void and will automatically terminate your rights under 
  32:main.c        ****   *    this license. 
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 2


  33:main.c        ****   *
  34:main.c        ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  35:main.c        ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  36:main.c        ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  37:main.c        ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:main.c        ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  39:main.c        ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:main.c        ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:main.c        ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  42:main.c        ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  43:main.c        ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  44:main.c        ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:main.c        ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:main.c        ****   *
  47:main.c        ****   ******************************************************************************
  48:main.c        ****   */
  49:main.c        **** /* Includes ------------------------------------------------------------------*/
  50:main.c        **** #include "main.h"
  51:main.c        **** #include "stm32f7xx_hal.h"
  52:main.c        **** #include "cmsis_os.h"
  53:main.c        **** #include "fatfs.h"
  54:main.c        **** #include "lwip.h"
  55:main.c        **** #include "usb_host.h"
  56:main.c        **** 
  57:main.c        **** /* USER CODE BEGIN Includes */
  58:main.c        **** #include  <errno.h>
  59:main.c        **** //#include  <sys/unistd.h>
  60:main.c        **** 
  61:main.c        **** #include "stm32746g_discovery_lcd.h"
  62:main.c        **** #include "Utilities/Fonts/fonts.h"
  63:main.c        **** #include "stm32746g_discovery_ts.h"
  64:main.c        **** #include "stm32746g_discovery_audio.h"
  65:main.c        **** #include "term_io.h"
  66:main.c        **** #include "dbgu.h"
  67:main.c        **** #include "ansi.h"
  68:main.c        **** 
  69:main.c        **** //#include "FreeRTOS.h"
  70:main.c        **** #include "task.h"
  71:main.c        **** #include "queue.h"
  72:main.c        **** 
  73:main.c        **** #include "lwip/opt.h"
  74:main.c        **** #include "lwip/api.h"
  75:main.c        **** #include "lwip/apps/fs.h"
  76:main.c        **** #include "lwip/dhcp.h"
  77:main.c        **** #include "lwip/tcpip.h"
  78:main.c        **** #include "lwip/netdb.h"
  79:main.c        **** #include "lwip/sockets.h"
  80:main.c        **** 
  81:main.c        **** #include "lwip.h"
  82:main.c        **** 
  83:main.c        **** #include "wm8994/wm8994.h"
  84:main.c        **** 
  85:main.c        **** 
  86:main.c        **** 
  87:main.c        **** 
  88:main.c        **** /* USER CODE END Includes */
  89:main.c        **** 
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 3


  90:main.c        **** /* Private variables ---------------------------------------------------------*/
  91:main.c        **** ADC_HandleTypeDef hadc3;
  92:main.c        **** 
  93:main.c        **** CRC_HandleTypeDef hcrc;
  94:main.c        **** 
  95:main.c        **** DCMI_HandleTypeDef hdcmi;
  96:main.c        **** 
  97:main.c        **** DMA2D_HandleTypeDef hdma2d;
  98:main.c        **** 
  99:main.c        **** I2C_HandleTypeDef hi2c1;
 100:main.c        **** I2C_HandleTypeDef hi2c3;
 101:main.c        **** 
 102:main.c        **** LTDC_HandleTypeDef hltdc;
 103:main.c        **** 
 104:main.c        **** QSPI_HandleTypeDef hqspi;
 105:main.c        **** 
 106:main.c        **** RTC_HandleTypeDef hrtc;
 107:main.c        **** 
 108:main.c        **** SAI_HandleTypeDef hsai_BlockA2;
 109:main.c        **** SAI_HandleTypeDef hsai_BlockB2;
 110:main.c        **** 
 111:main.c        **** SD_HandleTypeDef hsd1;
 112:main.c        **** 
 113:main.c        **** SPDIFRX_HandleTypeDef hspdif;
 114:main.c        **** 
 115:main.c        **** SPI_HandleTypeDef hspi2;
 116:main.c        **** 
 117:main.c        **** TIM_HandleTypeDef htim1;
 118:main.c        **** TIM_HandleTypeDef htim2;
 119:main.c        **** TIM_HandleTypeDef htim3;
 120:main.c        **** TIM_HandleTypeDef htim5;
 121:main.c        **** TIM_HandleTypeDef htim7;
 122:main.c        **** TIM_HandleTypeDef htim8;
 123:main.c        **** TIM_HandleTypeDef htim12;
 124:main.c        **** 
 125:main.c        **** UART_HandleTypeDef huart1;
 126:main.c        **** UART_HandleTypeDef huart6;
 127:main.c        **** 
 128:main.c        **** SDRAM_HandleTypeDef hsdram1;
 129:main.c        **** 
 130:main.c        **** osThreadId defaultTaskHandle;
 131:main.c        **** 
 132:main.c        **** /* USER CODE BEGIN PV */
 133:main.c        **** /* Private variables ---------------------------------------------------------*/
 134:main.c        **** 
 135:main.c        **** /* USER CODE END PV */
 136:main.c        **** 
 137:main.c        **** /* Private function prototypes -----------------------------------------------*/
 138:main.c        **** void SystemClock_Config(void);
 139:main.c        **** static void MX_GPIO_Init(void);
 140:main.c        **** static void MX_ADC3_Init(void);
 141:main.c        **** static void MX_CRC_Init(void);
 142:main.c        **** static void MX_DCMI_Init(void);
 143:main.c        **** static void MX_DMA2D_Init(void);
 144:main.c        **** static void MX_FMC_Init(void);
 145:main.c        **** static void MX_I2C1_Init(void);
 146:main.c        **** static void MX_I2C3_Init(void);
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 4


 147:main.c        **** static void MX_LTDC_Init(void);
 148:main.c        **** static void MX_QUADSPI_Init(void);
 149:main.c        **** static void MX_RTC_Init(void);
 150:main.c        **** static void MX_SAI2_Init(void);
 151:main.c        **** static void MX_SDMMC1_SD_Init(void);
 152:main.c        **** static void MX_SPDIFRX_Init(void);
 153:main.c        **** static void MX_SPI2_Init(void);
 154:main.c        **** static void MX_TIM1_Init(void);
 155:main.c        **** static void MX_TIM2_Init(void);
 156:main.c        **** static void MX_TIM3_Init(void);
 157:main.c        **** static void MX_TIM5_Init(void);
 158:main.c        **** static void MX_TIM8_Init(void);
 159:main.c        **** static void MX_TIM12_Init(void);
 160:main.c        **** static void MX_USART1_UART_Init(void);
 161:main.c        **** static void MX_USART6_UART_Init(void);
 162:main.c        **** static void MX_TIM7_Init(void);
 163:main.c        **** void StartDefaultTask(void const * argument);
 164:main.c        **** 
 165:main.c        **** void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
 166:main.c        ****                                 
 167:main.c        ****                                 
 168:main.c        ****                                 
 169:main.c        ****                                 
 170:main.c        **** 
 171:main.c        **** /* USER CODE BEGIN PFP */
 172:main.c        **** /* Private function prototypes -----------------------------------------------*/
 173:main.c        **** 
 174:main.c        **** /* USER CODE END PFP */
 175:main.c        **** 
 176:main.c        **** /* USER CODE BEGIN 0 */
 177:main.c        **** void mainTask(void* p);
 178:main.c        **** 
 179:main.c        **** osThreadId netconn_thread_handle;
 180:main.c        **** 
 181:main.c        **** #define LCD_X_SIZE      RK043FN48H_WIDTH
 182:main.c        **** #define LCD_Y_SIZE      RK043FN48H_HEIGHT
 183:main.c        **** static uint32_t lcd_image_fg[LCD_Y_SIZE][LCD_X_SIZE] __attribute__((section(".sdram"))) __attribute
 184:main.c        **** static uint32_t lcd_image_bg[LCD_Y_SIZE][LCD_X_SIZE] __attribute__((section(".sdram"))) __attribute
 185:main.c        **** 
 186:main.c        **** #define MASS_STORAGE_BUF_SIZE		( 1024 * 1024 )
 187:main.c        **** static uint32_t mass_storage_buf[MASS_STORAGE_BUF_SIZE] __attribute__((section(".sdram"))) __attrib
 188:main.c        **** 
 189:main.c        **** #define PRINTF_USES_HAL_TX    0
 190:main.c        **** #define ENABLE_NETWORK        0
 191:main.c        **** 
 192:main.c        **** int __io_putchar(int ch)
 193:main.c        **** {
 194:main.c        ****   uint8_t data = ch;
 195:main.c        ****   #if PRINTF_USES_HAL_TX
 196:main.c        ****     HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t*)&data, len, 100); 
 197:main.c        ****   #else
 198:main.c        ****     while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE) == RESET) { ; }
 199:main.c        ****     huart1.Instance->TDR = (uint16_t)data;
 200:main.c        ****   #endif
 201:main.c        ****   return 0;
 202:main.c        **** }
 203:main.c        **** 
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 5


 204:main.c        **** char inkey(void)
 205:main.c        **** {
 206:main.c        ****   uint32_t flags = huart1.Instance->ISR;
 207:main.c        ****   
 208:main.c        ****   if((flags & UART_FLAG_RXNE) || (flags & UART_FLAG_ORE))
 209:main.c        ****   {
 210:main.c        ****     __HAL_UART_CLEAR_OREFLAG(&huart1);
 211:main.c        ****     return (huart1.Instance->RDR);
 212:main.c        ****   }
 213:main.c        ****   else
 214:main.c        ****     return 0;
 215:main.c        **** }
 216:main.c        **** 
 217:main.c        **** //partially based on available code examples
 218:main.c        **** static void lcd_start(void)
 219:main.c        **** {
 220:main.c        ****   /* LCD Initialization */ 
 221:main.c        ****   BSP_LCD_Init();
 222:main.c        **** 
 223:main.c        ****   /* LCD Initialization */ 
 224:main.c        ****   BSP_LCD_LayerDefaultInit(0, (unsigned int)lcd_image_bg);
 225:main.c        ****   //BSP_LCD_LayerDefaultInit(1, (unsigned int)lcd_image_bg+(LCD_X_SIZE*LCD_Y_SIZE*4));
 226:main.c        ****   BSP_LCD_LayerDefaultInit(1, (unsigned int)lcd_image_fg);
 227:main.c        **** 
 228:main.c        ****   /* Enable the LCD */ 
 229:main.c        ****   BSP_LCD_DisplayOn(); 
 230:main.c        ****   
 231:main.c        ****   /* Select the LCD Background Layer  */
 232:main.c        ****   BSP_LCD_SelectLayer(0);
 233:main.c        **** 
 234:main.c        ****   /* Clear the Background Layer */ 
 235:main.c        ****   BSP_LCD_Clear(LCD_COLOR_WHITE);
 236:main.c        ****   BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 237:main.c        ****   
 238:main.c        ****   BSP_LCD_SetColorKeying(1,LCD_COLOR_WHITE);
 239:main.c        ****   
 240:main.c        ****   /* Select the LCD Foreground Layer  */
 241:main.c        ****   BSP_LCD_SelectLayer(1);
 242:main.c        **** 
 243:main.c        ****   /* Clear the Foreground Layer */ 
 244:main.c        ****   BSP_LCD_Clear(LCD_COLOR_WHITE);
 245:main.c        ****   BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 246:main.c        ****   
 247:main.c        ****   /* Configure the transparency for foreground and background :
 248:main.c        ****      Increase the transparency */
 249:main.c        ****   BSP_LCD_SetTransparency(0, 255);
 250:main.c        ****   BSP_LCD_SetTransparency(1, 255);
 251:main.c        **** }
 252:main.c        **** 
 253:main.c        **** //[rmv]
 254:main.c        **** void draw_background(void)
 255:main.c        **** {
 256:main.c        ****   /* Select the LCD Background Layer  */
 257:main.c        ****   BSP_LCD_SelectLayer(0);
 258:main.c        ****   BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 259:main.c        ****   BSP_LCD_FillRect(0.4*LCD_X_SIZE,0.2*LCD_Y_SIZE,150,130);
 260:main.c        ****   
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 6


 261:main.c        ****   //select Foreground Layer
 262:main.c        ****   BSP_LCD_SelectLayer(1);
 263:main.c        **** }
 264:main.c        **** 
 265:main.c        **** static TS_StateTypeDef  TS_State;
 266:main.c        **** 
 267:main.c        **** 
 268:main.c        **** int initialize_touchscreen(void)
 269:main.c        **** {
 270:main.c        ****   uint8_t  status = 0;
 271:main.c        ****   status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 272:main.c        ****   if(status != TS_OK) return -1;
 273:main.c        ****   return 0;
 274:main.c        **** }
 275:main.c        **** 
 276:main.c        **** 
 277:main.c        **** 
 278:main.c        **** /* USER CODE END 0 */
 279:main.c        **** 
 280:main.c        **** /**
 281:main.c        ****   * @brief  The application entry point.
 282:main.c        ****   *
 283:main.c        ****   * @retval None
 284:main.c        ****   */
 285:main.c        **** int main(void)
 286:main.c        **** {
 287:main.c        ****   /* USER CODE BEGIN 1 */
 288:main.c        **** 
 289:main.c        ****   /* USER CODE END 1 */
 290:main.c        **** 
 291:main.c        ****   /* MCU Configuration----------------------------------------------------------*/
 292:main.c        **** 
 293:main.c        ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 294:main.c        ****   HAL_Init();
 295:main.c        **** 
 296:main.c        ****   /* USER CODE BEGIN Init */
 297:main.c        **** 
 298:main.c        ****   /* USER CODE END Init */
 299:main.c        **** 
 300:main.c        ****   /* Configure the system clock */
 301:main.c        ****   SystemClock_Config();
 302:main.c        **** 
 303:main.c        ****   /* USER CODE BEGIN SysInit */
 304:main.c        **** 
 305:main.c        ****   /* USER CODE END SysInit */
 306:main.c        **** 
 307:main.c        ****   /* Initialize all configured peripherals */
 308:main.c        ****   MX_GPIO_Init();
 309:main.c        ****   MX_ADC3_Init();
 310:main.c        ****   MX_CRC_Init();
 311:main.c        ****   MX_DCMI_Init();
 312:main.c        ****   MX_DMA2D_Init();
 313:main.c        ****   MX_FMC_Init();
 314:main.c        ****   MX_I2C1_Init();
 315:main.c        ****   MX_I2C3_Init();
 316:main.c        ****   MX_LTDC_Init();
 317:main.c        ****   MX_QUADSPI_Init();
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 7


 318:main.c        ****   MX_RTC_Init();
 319:main.c        ****   MX_SAI2_Init();
 320:main.c        ****   MX_SDMMC1_SD_Init();
 321:main.c        ****   MX_SPDIFRX_Init();
 322:main.c        ****   MX_SPI2_Init();
 323:main.c        ****   MX_TIM1_Init();
 324:main.c        ****   MX_TIM2_Init();
 325:main.c        ****   MX_TIM3_Init();
 326:main.c        ****   MX_TIM5_Init();
 327:main.c        ****   MX_TIM8_Init();
 328:main.c        ****   MX_TIM12_Init();
 329:main.c        ****   MX_USART1_UART_Init();
 330:main.c        ****   MX_USART6_UART_Init();
 331:main.c        ****   MX_TIM7_Init();
 332:main.c        ****   /* USER CODE BEGIN 2 */
 333:main.c        ****   debug_init(&huart1);
 334:main.c        **** 
 335:main.c        ****   xprintf(ANSI_FG_GREEN "STM32F746 Discovery Project" ANSI_FG_DEFAULT "\n");
 336:main.c        **** 
 337:main.c        ****   printf("Regular printf\n");
 338:main.c        **** 
 339:main.c        **** lcd_start();
 340:main.c        **** draw_background();
 341:main.c        **** initialize_touchscreen();
 342:main.c        **** 
 343:main.c        ****   /* USER CODE END 2 */
 344:main.c        **** 
 345:main.c        ****   /* USER CODE BEGIN RTOS_MUTEX */
 346:main.c        ****   /* add mutexes, ... */
 347:main.c        ****   /* USER CODE END RTOS_MUTEX */
 348:main.c        **** 
 349:main.c        ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 350:main.c        ****   /* add semaphores, ... */
 351:main.c        ****   /* USER CODE END RTOS_SEMAPHORES */
 352:main.c        **** 
 353:main.c        ****   /* USER CODE BEGIN RTOS_TIMERS */
 354:main.c        ****   /* start timers, add new ones, ... */
 355:main.c        ****   /* USER CODE END RTOS_TIMERS */
 356:main.c        **** 
 357:main.c        ****   /* Create the thread(s) */
 358:main.c        ****   /* definition and creation of defaultTask */
 359:main.c        ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 360:main.c        ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 361:main.c        **** 
 362:main.c        ****   /* USER CODE BEGIN RTOS_THREADS */
 363:main.c        ****   /* add threads, ... */
 364:main.c        ****   /* USER CODE END RTOS_THREADS */
 365:main.c        **** 
 366:main.c        ****   /* USER CODE BEGIN RTOS_QUEUES */
 367:main.c        ****   /* add queues, ... */
 368:main.c        ****   /* USER CODE END RTOS_QUEUES */
 369:main.c        ****  
 370:main.c        **** 
 371:main.c        ****   /* Start scheduler */
 372:main.c        ****   osKernelStart();
 373:main.c        ****   
 374:main.c        ****   /* We should never get here as control is now taken by the scheduler */
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 8


 375:main.c        **** 
 376:main.c        ****   /* Infinite loop */
 377:main.c        ****   /* USER CODE BEGIN WHILE */
 378:main.c        ****   while (1)
 379:main.c        ****   {
 380:main.c        **** 
 381:main.c        ****   /* USER CODE END WHILE */
 382:main.c        **** 
 383:main.c        ****   /* USER CODE BEGIN 3 */
 384:main.c        **** 
 385:main.c        ****   }
 386:main.c        ****   /* USER CODE END 3 */
 387:main.c        **** 
 388:main.c        **** }
 389:main.c        **** 
 390:main.c        **** /**
 391:main.c        ****   * @brief System Clock Configuration
 392:main.c        ****   * @retval None
 393:main.c        ****   */
 394:main.c        **** void SystemClock_Config(void)
 395:main.c        **** {
 396:main.c        **** 
 397:main.c        ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 398:main.c        ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 399:main.c        ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
 400:main.c        **** 
 401:main.c        ****     /**Configure the main internal regulator output voltage 
 402:main.c        ****     */
 403:main.c        ****   __HAL_RCC_PWR_CLK_ENABLE();
 404:main.c        **** 
 405:main.c        ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 406:main.c        **** 
 407:main.c        ****     /**Initializes the CPU, AHB and APB busses clocks 
 408:main.c        ****     */
 409:main.c        ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 410:main.c        ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 411:main.c        ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 412:main.c        ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 413:main.c        ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 414:main.c        ****   RCC_OscInitStruct.PLL.PLLM = 25;
 415:main.c        ****   RCC_OscInitStruct.PLL.PLLN = 400;
 416:main.c        ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 417:main.c        ****   RCC_OscInitStruct.PLL.PLLQ = 8;
 418:main.c        ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 419:main.c        ****   {
 420:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 421:main.c        ****   }
 422:main.c        **** 
 423:main.c        ****     /**Activate the Over-Drive mode 
 424:main.c        ****     */
 425:main.c        ****   if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 426:main.c        ****   {
 427:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 428:main.c        ****   }
 429:main.c        **** 
 430:main.c        ****     /**Initializes the CPU, AHB and APB busses clocks 
 431:main.c        ****     */
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 9


 432:main.c        ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 433:main.c        ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 434:main.c        ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 435:main.c        ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 436:main.c        ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 437:main.c        ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 438:main.c        **** 
 439:main.c        ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 440:main.c        ****   {
 441:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 442:main.c        ****   }
 443:main.c        **** 
 444:main.c        ****   PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 445:main.c        ****                               |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 446:main.c        ****                               |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
 447:main.c        ****                               |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
 448:main.c        ****                               |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 449:main.c        ****   PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 450:main.c        ****   PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 451:main.c        ****   PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 452:main.c        ****   PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 453:main.c        ****   PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 454:main.c        ****   PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 455:main.c        ****   PeriphClkInitStruct.PLLSAI.PLLSAIQ = 4;
 456:main.c        ****   PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 457:main.c        ****   PeriphClkInitStruct.PLLI2SDivQ = 1;
 458:main.c        ****   PeriphClkInitStruct.PLLSAIDivQ = 1;
 459:main.c        ****   PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 460:main.c        ****   PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 461:main.c        ****   PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 462:main.c        ****   PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 463:main.c        ****   PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 464:main.c        ****   PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 465:main.c        ****   PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 466:main.c        ****   PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 467:main.c        ****   PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 468:main.c        ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 469:main.c        ****   {
 470:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 471:main.c        ****   }
 472:main.c        **** 
 473:main.c        ****     /**Configure the Systick interrupt time 
 474:main.c        ****     */
 475:main.c        ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 476:main.c        **** 
 477:main.c        ****     /**Configure the Systick 
 478:main.c        ****     */
 479:main.c        ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 480:main.c        **** 
 481:main.c        ****   /* SysTick_IRQn interrupt configuration */
 482:main.c        ****   HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 483:main.c        **** }
 484:main.c        **** 
 485:main.c        **** /* ADC3 init function */
 486:main.c        **** static void MX_ADC3_Init(void)
 487:main.c        **** {
 488:main.c        **** 
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 10


 489:main.c        ****   ADC_ChannelConfTypeDef sConfig;
 490:main.c        **** 
 491:main.c        ****     /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of co
 492:main.c        ****     */
 493:main.c        ****   hadc3.Instance = ADC3;
 494:main.c        ****   hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 495:main.c        ****   hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 496:main.c        ****   hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 497:main.c        ****   hadc3.Init.ContinuousConvMode = DISABLE;
 498:main.c        ****   hadc3.Init.DiscontinuousConvMode = DISABLE;
 499:main.c        ****   hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 500:main.c        ****   hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 501:main.c        ****   hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 502:main.c        ****   hadc3.Init.NbrOfConversion = 1;
 503:main.c        ****   hadc3.Init.DMAContinuousRequests = DISABLE;
 504:main.c        ****   hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 505:main.c        ****   if (HAL_ADC_Init(&hadc3) != HAL_OK)
 506:main.c        ****   {
 507:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 508:main.c        ****   }
 509:main.c        **** 
 510:main.c        ****     /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and i
 511:main.c        ****     */
 512:main.c        ****   sConfig.Channel = ADC_CHANNEL_4;
 513:main.c        ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 514:main.c        ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 515:main.c        ****   if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 516:main.c        ****   {
 517:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 518:main.c        ****   }
 519:main.c        **** 
 520:main.c        **** }
 521:main.c        **** 
 522:main.c        **** /* CRC init function */
 523:main.c        **** static void MX_CRC_Init(void)
 524:main.c        **** {
 525:main.c        **** 
 526:main.c        ****   hcrc.Instance = CRC;
 527:main.c        ****   hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 528:main.c        ****   hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 529:main.c        ****   hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 530:main.c        ****   hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 531:main.c        ****   hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 532:main.c        ****   if (HAL_CRC_Init(&hcrc) != HAL_OK)
 533:main.c        ****   {
 534:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 535:main.c        ****   }
 536:main.c        **** 
 537:main.c        **** }
 538:main.c        **** 
 539:main.c        **** /* DCMI init function */
 540:main.c        **** static void MX_DCMI_Init(void)
 541:main.c        **** {
 542:main.c        **** 
 543:main.c        ****   hdcmi.Instance = DCMI;
 544:main.c        ****   hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 545:main.c        ****   hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 11


 546:main.c        ****   hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 547:main.c        ****   hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 548:main.c        ****   hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 549:main.c        ****   hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 550:main.c        ****   hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 551:main.c        ****   hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 552:main.c        ****   hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 553:main.c        ****   hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 554:main.c        ****   hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 555:main.c        ****   if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 556:main.c        ****   {
 557:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 558:main.c        ****   }
 559:main.c        **** 
 560:main.c        **** }
 561:main.c        **** 
 562:main.c        **** /* DMA2D init function */
 563:main.c        **** static void MX_DMA2D_Init(void)
 564:main.c        **** {
 565:main.c        **** 
 566:main.c        ****   hdma2d.Instance = DMA2D;
 567:main.c        ****   hdma2d.Init.Mode = DMA2D_M2M;
 568:main.c        ****   hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 569:main.c        ****   hdma2d.Init.OutputOffset = 0;
 570:main.c        ****   hdma2d.LayerCfg[1].InputOffset = 0;
 571:main.c        ****   hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 572:main.c        ****   hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 573:main.c        ****   hdma2d.LayerCfg[1].InputAlpha = 0;
 574:main.c        ****   if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 575:main.c        ****   {
 576:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 577:main.c        ****   }
 578:main.c        **** 
 579:main.c        ****   if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 580:main.c        ****   {
 581:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 582:main.c        ****   }
 583:main.c        **** 
 584:main.c        **** }
 585:main.c        **** 
 586:main.c        **** /* I2C1 init function */
 587:main.c        **** static void MX_I2C1_Init(void)
 588:main.c        **** {
 589:main.c        **** 
 590:main.c        ****   hi2c1.Instance = I2C1;
 591:main.c        ****   hi2c1.Init.Timing = 0x00C0EAFF;
 592:main.c        ****   hi2c1.Init.OwnAddress1 = 0;
 593:main.c        ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 594:main.c        ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 595:main.c        ****   hi2c1.Init.OwnAddress2 = 0;
 596:main.c        ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 597:main.c        ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 598:main.c        ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 599:main.c        ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 600:main.c        ****   {
 601:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 602:main.c        ****   }
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 12


 603:main.c        **** 
 604:main.c        ****     /**Configure Analogue filter 
 605:main.c        ****     */
 606:main.c        ****   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 607:main.c        ****   {
 608:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 609:main.c        ****   }
 610:main.c        **** 
 611:main.c        ****     /**Configure Digital filter 
 612:main.c        ****     */
 613:main.c        ****   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 614:main.c        ****   {
 615:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 616:main.c        ****   }
 617:main.c        **** 
 618:main.c        **** }
 619:main.c        **** 
 620:main.c        **** /* I2C3 init function */
 621:main.c        **** static void MX_I2C3_Init(void)
 622:main.c        **** {
 623:main.c        **** 
 624:main.c        ****   hi2c3.Instance = I2C3;
 625:main.c        ****   hi2c3.Init.Timing = 0x00C0EAFF;
 626:main.c        ****   hi2c3.Init.OwnAddress1 = 0;
 627:main.c        ****   hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 628:main.c        ****   hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 629:main.c        ****   hi2c3.Init.OwnAddress2 = 0;
 630:main.c        ****   hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 631:main.c        ****   hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 632:main.c        ****   hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 633:main.c        ****   if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 634:main.c        ****   {
 635:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 636:main.c        ****   }
 637:main.c        **** 
 638:main.c        ****     /**Configure Analogue filter 
 639:main.c        ****     */
 640:main.c        ****   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 641:main.c        ****   {
 642:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 643:main.c        ****   }
 644:main.c        **** 
 645:main.c        ****     /**Configure Digital filter 
 646:main.c        ****     */
 647:main.c        ****   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 648:main.c        ****   {
 649:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 650:main.c        ****   }
 651:main.c        **** 
 652:main.c        **** }
 653:main.c        **** 
 654:main.c        **** /* LTDC init function */
 655:main.c        **** static void MX_LTDC_Init(void)
 656:main.c        **** {
 657:main.c        **** 
 658:main.c        ****   LTDC_LayerCfgTypeDef pLayerCfg;
 659:main.c        **** 
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 13


 660:main.c        ****   hltdc.Instance = LTDC;
 661:main.c        ****   hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 662:main.c        ****   hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 663:main.c        ****   hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 664:main.c        ****   hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 665:main.c        ****   hltdc.Init.HorizontalSync = 40;
 666:main.c        ****   hltdc.Init.VerticalSync = 9;
 667:main.c        ****   hltdc.Init.AccumulatedHBP = 53;
 668:main.c        ****   hltdc.Init.AccumulatedVBP = 11;
 669:main.c        ****   hltdc.Init.AccumulatedActiveW = 533;
 670:main.c        ****   hltdc.Init.AccumulatedActiveH = 283;
 671:main.c        ****   hltdc.Init.TotalWidth = 565;
 672:main.c        ****   hltdc.Init.TotalHeigh = 285;
 673:main.c        ****   hltdc.Init.Backcolor.Blue = 0;
 674:main.c        ****   hltdc.Init.Backcolor.Green = 0;
 675:main.c        ****   hltdc.Init.Backcolor.Red = 0;
 676:main.c        ****   if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 677:main.c        ****   {
 678:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 679:main.c        ****   }
 680:main.c        **** 
 681:main.c        ****   pLayerCfg.WindowX0 = 0;
 682:main.c        ****   pLayerCfg.WindowX1 = 480;
 683:main.c        ****   pLayerCfg.WindowY0 = 0;
 684:main.c        ****   pLayerCfg.WindowY1 = 272;
 685:main.c        ****   pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 686:main.c        ****   pLayerCfg.Alpha = 255;
 687:main.c        ****   pLayerCfg.Alpha0 = 0;
 688:main.c        ****   pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 689:main.c        ****   pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 690:main.c        ****   pLayerCfg.FBStartAdress = 0xC0000000;
 691:main.c        ****   pLayerCfg.ImageWidth = 480;
 692:main.c        ****   pLayerCfg.ImageHeight = 272;
 693:main.c        ****   pLayerCfg.Backcolor.Blue = 0;
 694:main.c        ****   pLayerCfg.Backcolor.Green = 0;
 695:main.c        ****   pLayerCfg.Backcolor.Red = 0;
 696:main.c        ****   if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 697:main.c        ****   {
 698:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 699:main.c        ****   }
 700:main.c        **** 
 701:main.c        **** }
 702:main.c        **** 
 703:main.c        **** /* QUADSPI init function */
 704:main.c        **** static void MX_QUADSPI_Init(void)
 705:main.c        **** {
 706:main.c        **** 
 707:main.c        ****   /* QUADSPI parameter configuration*/
 708:main.c        ****   hqspi.Instance = QUADSPI;
 709:main.c        ****   hqspi.Init.ClockPrescaler = 255;
 710:main.c        ****   hqspi.Init.FifoThreshold = 1;
 711:main.c        ****   hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 712:main.c        ****   hqspi.Init.FlashSize = 1;
 713:main.c        ****   hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 714:main.c        ****   hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 715:main.c        ****   hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 716:main.c        ****   hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 14


 717:main.c        ****   if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 718:main.c        ****   {
 719:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 720:main.c        ****   }
 721:main.c        **** 
 722:main.c        **** }
 723:main.c        **** 
 724:main.c        **** /* RTC init function */
 725:main.c        **** static void MX_RTC_Init(void)
 726:main.c        **** {
 727:main.c        **** 
 728:main.c        ****   /* USER CODE BEGIN RTC_Init 0 */
 729:main.c        **** 
 730:main.c        ****   /* USER CODE END RTC_Init 0 */
 731:main.c        **** 
 732:main.c        ****   RTC_TimeTypeDef sTime;
 733:main.c        ****   RTC_DateTypeDef sDate;
 734:main.c        ****   RTC_AlarmTypeDef sAlarm;
 735:main.c        **** 
 736:main.c        ****   /* USER CODE BEGIN RTC_Init 1 */
 737:main.c        **** 
 738:main.c        ****   /* USER CODE END RTC_Init 1 */
 739:main.c        **** 
 740:main.c        ****     /**Initialize RTC Only 
 741:main.c        ****     */
 742:main.c        ****   hrtc.Instance = RTC;
 743:main.c        ****   hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 744:main.c        ****   hrtc.Init.AsynchPrediv = 127;
 745:main.c        ****   hrtc.Init.SynchPrediv = 255;
 746:main.c        ****   hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 747:main.c        ****   hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 748:main.c        ****   hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 749:main.c        ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 750:main.c        ****   {
 751:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 752:main.c        ****   }
 753:main.c        **** 
 754:main.c        ****     /**Initialize RTC and set the Time and Date 
 755:main.c        ****     */
 756:main.c        ****   sTime.Hours = 0x0;
 757:main.c        ****   sTime.Minutes = 0x0;
 758:main.c        ****   sTime.Seconds = 0x0;
 759:main.c        ****   sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 760:main.c        ****   sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 761:main.c        ****   if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 762:main.c        ****   {
 763:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 764:main.c        ****   }
 765:main.c        **** 
 766:main.c        ****   sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 767:main.c        ****   sDate.Month = RTC_MONTH_JANUARY;
 768:main.c        ****   sDate.Date = 0x1;
 769:main.c        ****   sDate.Year = 0x0;
 770:main.c        **** 
 771:main.c        ****   if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 772:main.c        ****   {
 773:main.c        ****     _Error_Handler(__FILE__, __LINE__);
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 15


 774:main.c        ****   }
 775:main.c        **** 
 776:main.c        ****     /**Enable the Alarm A 
 777:main.c        ****     */
 778:main.c        ****   sAlarm.AlarmTime.Hours = 0x0;
 779:main.c        ****   sAlarm.AlarmTime.Minutes = 0x0;
 780:main.c        ****   sAlarm.AlarmTime.Seconds = 0x0;
 781:main.c        ****   sAlarm.AlarmTime.SubSeconds = 0x0;
 782:main.c        ****   sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 783:main.c        ****   sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 784:main.c        ****   sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 785:main.c        ****   sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 786:main.c        ****   sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 787:main.c        ****   sAlarm.AlarmDateWeekDay = 0x1;
 788:main.c        ****   sAlarm.Alarm = RTC_ALARM_A;
 789:main.c        ****   if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 790:main.c        ****   {
 791:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 792:main.c        ****   }
 793:main.c        **** 
 794:main.c        ****     /**Enable the Alarm B 
 795:main.c        ****     */
 796:main.c        ****   sAlarm.AlarmDateWeekDay = 0x1;
 797:main.c        ****   sAlarm.Alarm = RTC_ALARM_B;
 798:main.c        ****   if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 799:main.c        ****   {
 800:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 801:main.c        ****   }
 802:main.c        **** 
 803:main.c        ****     /**Enable the TimeStamp 
 804:main.c        ****     */
 805:main.c        ****   if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 806:main.c        ****   {
 807:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 808:main.c        ****   }
 809:main.c        **** 
 810:main.c        **** }
 811:main.c        **** 
 812:main.c        **** /* SAI2 init function */
 813:main.c        **** static void MX_SAI2_Init(void)
 814:main.c        **** {
 815:main.c        **** 
 816:main.c        ****   hsai_BlockA2.Instance = SAI2_Block_A;
 817:main.c        ****   hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 818:main.c        ****   hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 819:main.c        ****   hsai_BlockA2.Init.DataSize = SAI_DATASIZE_24;
 820:main.c        ****   hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 821:main.c        ****   hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 822:main.c        ****   hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 823:main.c        ****   hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 824:main.c        ****   hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 825:main.c        ****   hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 826:main.c        ****   hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 827:main.c        ****   hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 828:main.c        ****   hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 829:main.c        ****   hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 830:main.c        ****   hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 16


 831:main.c        ****   hsai_BlockA2.FrameInit.FrameLength = 8;
 832:main.c        ****   hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 833:main.c        ****   hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 834:main.c        ****   hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 835:main.c        ****   hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 836:main.c        ****   hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 837:main.c        ****   hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 838:main.c        ****   hsai_BlockA2.SlotInit.SlotNumber = 1;
 839:main.c        ****   hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 840:main.c        ****   if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 841:main.c        ****   {
 842:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 843:main.c        ****   }
 844:main.c        **** 
 845:main.c        ****   hsai_BlockB2.Instance = SAI2_Block_B;
 846:main.c        ****   hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 847:main.c        ****   hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 848:main.c        ****   hsai_BlockB2.Init.DataSize = SAI_DATASIZE_24;
 849:main.c        ****   hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 850:main.c        ****   hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 851:main.c        ****   hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 852:main.c        ****   hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 853:main.c        ****   hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 854:main.c        ****   hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 855:main.c        ****   hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 856:main.c        ****   hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 857:main.c        ****   hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 858:main.c        ****   hsai_BlockB2.FrameInit.FrameLength = 8;
 859:main.c        ****   hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 860:main.c        ****   hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 861:main.c        ****   hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 862:main.c        ****   hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 863:main.c        ****   hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 864:main.c        ****   hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 865:main.c        ****   hsai_BlockB2.SlotInit.SlotNumber = 1;
 866:main.c        ****   hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 867:main.c        ****   if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 868:main.c        ****   {
 869:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 870:main.c        ****   }
 871:main.c        **** 
 872:main.c        **** }
 873:main.c        **** 
 874:main.c        **** /* SDMMC1 init function */
 875:main.c        **** static void MX_SDMMC1_SD_Init(void)
 876:main.c        **** {
  27              		.loc 1 876 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 877:main.c        **** 
 878:main.c        ****   hsd1.Instance = SDMMC1;
  32              		.loc 1 878 0
  33 0000 054B     		ldr	r3, .L2
  34 0002 064A     		ldr	r2, .L2+4
  35 0004 1A60     		str	r2, [r3]
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 17


 879:main.c        ****   hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  36              		.loc 1 879 0
  37 0006 0022     		movs	r2, #0
  38 0008 5A60     		str	r2, [r3, #4]
 880:main.c        ****   hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
  39              		.loc 1 880 0
  40 000a 9A60     		str	r2, [r3, #8]
 881:main.c        ****   hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  41              		.loc 1 881 0
  42 000c DA60     		str	r2, [r3, #12]
 882:main.c        ****   hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
  43              		.loc 1 882 0
  44 000e 1A61     		str	r2, [r3, #16]
 883:main.c        ****   hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  45              		.loc 1 883 0
  46 0010 5A61     		str	r2, [r3, #20]
 884:main.c        ****   hsd1.Init.ClockDiv = 0;
  47              		.loc 1 884 0
  48 0012 9A61     		str	r2, [r3, #24]
  49 0014 7047     		bx	lr
  50              	.L3:
  51 0016 00BF     		.align	2
  52              	.L2:
  53 0018 00000000 		.word	hsd1
  54 001c 002C0140 		.word	1073818624
  55              		.cfi_endproc
  56              	.LFE174:
  58              		.section	.text.MX_GPIO_Init,"ax",%progbits
  59              		.align	1
  60              		.syntax unified
  61              		.thumb
  62              		.thumb_func
  63              		.fpu fpv5-sp-d16
  65              	MX_GPIO_Init:
  66              	.LFB187:
 885:main.c        **** 
 886:main.c        **** }
 887:main.c        **** 
 888:main.c        **** /* SPDIFRX init function */
 889:main.c        **** static void MX_SPDIFRX_Init(void)
 890:main.c        **** {
 891:main.c        **** 
 892:main.c        ****   hspdif.Instance = SPDIFRX;
 893:main.c        ****   hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 894:main.c        ****   hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 895:main.c        ****   hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 896:main.c        ****   hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 897:main.c        ****   hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 898:main.c        ****   hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 899:main.c        ****   hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 900:main.c        ****   hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 901:main.c        ****   hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 902:main.c        ****   hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 903:main.c        ****   if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 904:main.c        ****   {
 905:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 906:main.c        ****   }
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 18


 907:main.c        **** 
 908:main.c        **** }
 909:main.c        **** 
 910:main.c        **** /* SPI2 init function */
 911:main.c        **** static void MX_SPI2_Init(void)
 912:main.c        **** {
 913:main.c        **** 
 914:main.c        ****   /* SPI2 parameter configuration*/
 915:main.c        ****   hspi2.Instance = SPI2;
 916:main.c        ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 917:main.c        ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 918:main.c        ****   hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 919:main.c        ****   hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 920:main.c        ****   hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 921:main.c        ****   hspi2.Init.NSS = SPI_NSS_SOFT;
 922:main.c        ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 923:main.c        ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 924:main.c        ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 925:main.c        ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 926:main.c        ****   hspi2.Init.CRCPolynomial = 7;
 927:main.c        ****   hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 928:main.c        ****   hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 929:main.c        ****   if (HAL_SPI_Init(&hspi2) != HAL_OK)
 930:main.c        ****   {
 931:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 932:main.c        ****   }
 933:main.c        **** 
 934:main.c        **** }
 935:main.c        **** 
 936:main.c        **** /* TIM1 init function */
 937:main.c        **** static void MX_TIM1_Init(void)
 938:main.c        **** {
 939:main.c        **** 
 940:main.c        ****   TIM_ClockConfigTypeDef sClockSourceConfig;
 941:main.c        ****   TIM_MasterConfigTypeDef sMasterConfig;
 942:main.c        ****   TIM_OC_InitTypeDef sConfigOC;
 943:main.c        ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
 944:main.c        **** 
 945:main.c        ****   htim1.Instance = TIM1;
 946:main.c        ****   htim1.Init.Prescaler = 0;
 947:main.c        ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 948:main.c        ****   htim1.Init.Period = 0;
 949:main.c        ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 950:main.c        ****   htim1.Init.RepetitionCounter = 0;
 951:main.c        ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 952:main.c        ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 953:main.c        ****   {
 954:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 955:main.c        ****   }
 956:main.c        **** 
 957:main.c        ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 958:main.c        ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 959:main.c        ****   {
 960:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 961:main.c        ****   }
 962:main.c        **** 
 963:main.c        ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 19


 964:main.c        ****   {
 965:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 966:main.c        ****   }
 967:main.c        **** 
 968:main.c        ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 969:main.c        ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 970:main.c        ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 971:main.c        ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 972:main.c        ****   {
 973:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 974:main.c        ****   }
 975:main.c        **** 
 976:main.c        ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 977:main.c        ****   sConfigOC.Pulse = 0;
 978:main.c        ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 979:main.c        ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 980:main.c        ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 981:main.c        ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 982:main.c        ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 983:main.c        ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 984:main.c        ****   {
 985:main.c        ****     _Error_Handler(__FILE__, __LINE__);
 986:main.c        ****   }
 987:main.c        **** 
 988:main.c        ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 989:main.c        ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 990:main.c        ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 991:main.c        ****   sBreakDeadTimeConfig.DeadTime = 0;
 992:main.c        ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 993:main.c        ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 994:main.c        ****   sBreakDeadTimeConfig.BreakFilter = 0;
 995:main.c        ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 996:main.c        ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 997:main.c        ****   sBreakDeadTimeConfig.Break2Filter = 0;
 998:main.c        ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 999:main.c        ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
1000:main.c        ****   {
1001:main.c        ****     _Error_Handler(__FILE__, __LINE__);
1002:main.c        ****   }
1003:main.c        **** 
1004:main.c        ****   HAL_TIM_MspPostInit(&htim1);
1005:main.c        **** 
1006:main.c        **** }
1007:main.c        **** 
1008:main.c        **** /* TIM2 init function */
1009:main.c        **** static void MX_TIM2_Init(void)
1010:main.c        **** {
1011:main.c        **** 
1012:main.c        ****   TIM_ClockConfigTypeDef sClockSourceConfig;
1013:main.c        ****   TIM_MasterConfigTypeDef sMasterConfig;
1014:main.c        ****   TIM_OC_InitTypeDef sConfigOC;
1015:main.c        **** 
1016:main.c        ****   htim2.Instance = TIM2;
1017:main.c        ****   htim2.Init.Prescaler = 0;
1018:main.c        ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
1019:main.c        ****   htim2.Init.Period = 0;
1020:main.c        ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 20


1021:main.c        ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
1022:main.c        ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
1023:main.c        ****   {
1024:main.c        ****     _Error_Handler(__FILE__, __LINE__);
1025:main.c        ****   }
1026:main.c        **** 
1027:main.c        ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
1028:main.c        ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
1029:main.c        ****   {
1030:main.c        ****     _Error_Handler(__FILE__, __LINE__);
1031:main.c        ****   }
1032:main.c        **** 
1033:main.c        ****   if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
1034:main.c        ****   {
1035:main.c        ****     _Error_Handler(__FILE__, __LINE__);
1036:main.c        ****   }
1037:main.c        **** 
1038:main.c        ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
1039:main.c        ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
1040:main.c        ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
1041:main.c        ****   {
1042:main.c        ****     _Error_Handler(__FILE__, __LINE__);
1043:main.c        ****   }
1044:main.c        **** 
1045:main.c        ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
1046:main.c        ****   sConfigOC.Pulse = 0;
1047:main.c        ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
1048:main.c        ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
1049:main.c        ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
1050:main.c        ****   {
1051:main.c        ****     _Error_Handler(__FILE__, __LINE__);
1052:main.c        ****   }
1053:main.c        **** 
1054:main.c        ****   HAL_TIM_MspPostInit(&htim2);
1055:main.c        **** 
1056:main.c        **** }
1057:main.c        **** 
1058:main.c        **** /* TIM3 init function */
1059:main.c        **** static void MX_TIM3_Init(void)
1060:main.c        **** {
1061:main.c        **** 
1062:main.c        ****   TIM_ClockConfigTypeDef sClockSourceConfig;
1063:main.c        ****   TIM_MasterConfigTypeDef sMasterConfig;
1064:main.c        ****   TIM_OC_InitTypeDef sConfigOC;
1065:main.c        **** 
1066:main.c        ****   htim3.Instance = TIM3;
1067:main.c        ****   htim3.Init.Prescaler = 0;
1068:main.c        ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
1069:main.c        ****   htim3.Init.Period = 0;
1070:main.c        ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
1071:main.c        ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
1072:main.c        ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
1073:main.c        ****   {
1074:main.c        ****     _Error_Handler(__FILE__, __LINE__);
1075:main.c        ****   }
1076:main.c        **** 
1077:main.c        ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 21


1078:main.c        ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
1079:main.c        ****   {
1080:main.c        ****     _Error_Handler(__FILE__, __LINE__);
1081:main.c        ****   }
1082:main.c        **** 
1083:main.c        ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
1084:main.c        ****   {
1085:main.c        ****     _Error_Handler(__FILE__, __LINE__);
1086:main.c        ****   }
1087:main.c        **** 
1088:main.c        ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
1089:main.c        ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
1090:main.c        ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
1091:main.c        ****   {
1092:main.c        ****     _Error_Handler(__FILE__, __LINE__);
1093:main.c        ****   }
1094:main.c        **** 
1095:main.c        ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
1096:main.c        ****   sConfigOC.Pulse = 0;
1097:main.c        ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
1098:main.c        ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
1099:main.c        ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
1100:main.c        ****   {
1101:main.c        ****     _Error_Handler(__FILE__, __LINE__);
1102:main.c        ****   }
1103:main.c        **** 
1104:main.c        ****   HAL_TIM_MspPostInit(&htim3);
1105:main.c        **** 
1106:main.c        **** }
1107:main.c        **** 
1108:main.c        **** /* TIM5 init function */
1109:main.c        **** static void MX_TIM5_Init(void)
1110:main.c        **** {
1111:main.c        **** 
1112:main.c        ****   TIM_ClockConfigTypeDef sClockSourceConfig;
1113:main.c        ****   TIM_MasterConfigTypeDef sMasterConfig;
1114:main.c        ****   TIM_OC_InitTypeDef sConfigOC;
1115:main.c        **** 
1116:main.c        ****   htim5.Instance = TIM5;
1117:main.c        ****   htim5.Init.Prescaler = 0;
1118:main.c        ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
1119:main.c        ****   htim5.Init.Period = 0;
1120:main.c        ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
1121:main.c        ****   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
1122:main.c        ****   if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
1123:main.c        ****   {
1124:main.c        ****     _Error_Handler(__FILE__, __LINE__);
1125:main.c        ****   }
1126:main.c        **** 
1127:main.c        ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
1128:main.c        ****   if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
1129:main.c        ****   {
1130:main.c        ****     _Error_Handler(__FILE__, __LINE__);
1131:main.c        ****   }
1132:main.c        **** 
1133:main.c        ****   if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
1134:main.c        ****   {
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 22


1135:main.c        ****     _Error_Handler(__FILE__, __LINE__);
1136:main.c        ****   }
1137:main.c        **** 
1138:main.c        ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
1139:main.c        ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
1140:main.c        ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
1141:main.c        ****   {
1142:main.c        ****     _Error_Handler(__FILE__, __LINE__);
1143:main.c        ****   }
1144:main.c        **** 
1145:main.c        ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
1146:main.c        ****   sConfigOC.Pulse = 0;
1147:main.c        ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
1148:main.c        ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
1149:main.c        ****   if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
1150:main.c        ****   {
1151:main.c        ****     _Error_Handler(__FILE__, __LINE__);
1152:main.c        ****   }
1153:main.c        **** 
1154:main.c        ****   HAL_TIM_MspPostInit(&htim5);
1155:main.c        **** 
1156:main.c        **** }
1157:main.c        **** 
1158:main.c        **** /* TIM7 init function */
1159:main.c        **** static void MX_TIM7_Init(void)
1160:main.c        **** {
1161:main.c        **** 
1162:main.c        ****   TIM_MasterConfigTypeDef sMasterConfig;
1163:main.c        **** 
1164:main.c        ****   htim7.Instance = TIM7;
1165:main.c        ****   htim7.Init.Prescaler = 0;
1166:main.c        ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
1167:main.c        ****   htim7.Init.Period = 0;
1168:main.c        ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
1169:main.c        ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
1170:main.c        ****   {
1171:main.c        ****     _Error_Handler(__FILE__, __LINE__);
1172:main.c        ****   }
1173:main.c        **** 
1174:main.c        ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
1175:main.c        ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
1176:main.c        ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
1177:main.c        ****   {
1178:main.c        ****     _Error_Handler(__FILE__, __LINE__);
1179:main.c        ****   }
1180:main.c        **** 
1181:main.c        **** }
1182:main.c        **** 
1183:main.c        **** /* TIM8 init function */
1184:main.c        **** static void MX_TIM8_Init(void)
1185:main.c        **** {
1186:main.c        **** 
1187:main.c        ****   TIM_ClockConfigTypeDef sClockSourceConfig;
1188:main.c        ****   TIM_MasterConfigTypeDef sMasterConfig;
1189:main.c        **** 
1190:main.c        ****   htim8.Instance = TIM8;
1191:main.c        ****   htim8.Init.Prescaler = 0;
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 23


1192:main.c        ****   htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
1193:main.c        ****   htim8.Init.Period = 0;
1194:main.c        ****   htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
1195:main.c        ****   htim8.Init.RepetitionCounter = 0;
1196:main.c        ****   htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
1197:main.c        ****   if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
1198:main.c        ****   {
1199:main.c        ****     _Error_Handler(__FILE__, __LINE__);
1200:main.c        ****   }
1201:main.c        **** 
1202:main.c        ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
1203:main.c        ****   if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
1204:main.c        ****   {
1205:main.c        ****     _Error_Handler(__FILE__, __LINE__);
1206:main.c        ****   }
1207:main.c        **** 
1208:main.c        ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
1209:main.c        ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
1210:main.c        ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
1211:main.c        ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
1212:main.c        ****   {
1213:main.c        ****     _Error_Handler(__FILE__, __LINE__);
1214:main.c        ****   }
1215:main.c        **** 
1216:main.c        **** }
1217:main.c        **** 
1218:main.c        **** /* TIM12 init function */
1219:main.c        **** static void MX_TIM12_Init(void)
1220:main.c        **** {
1221:main.c        **** 
1222:main.c        ****   TIM_OC_InitTypeDef sConfigOC;
1223:main.c        **** 
1224:main.c        ****   htim12.Instance = TIM12;
1225:main.c        ****   htim12.Init.Prescaler = 0;
1226:main.c        ****   htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
1227:main.c        ****   htim12.Init.Period = 0;
1228:main.c        ****   htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
1229:main.c        ****   htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
1230:main.c        ****   if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
1231:main.c        ****   {
1232:main.c        ****     _Error_Handler(__FILE__, __LINE__);
1233:main.c        ****   }
1234:main.c        **** 
1235:main.c        ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
1236:main.c        ****   sConfigOC.Pulse = 0;
1237:main.c        ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
1238:main.c        ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
1239:main.c        ****   if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
1240:main.c        ****   {
1241:main.c        ****     _Error_Handler(__FILE__, __LINE__);
1242:main.c        ****   }
1243:main.c        **** 
1244:main.c        ****   HAL_TIM_MspPostInit(&htim12);
1245:main.c        **** 
1246:main.c        **** }
1247:main.c        **** 
1248:main.c        **** /* USART1 init function */
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 24


1249:main.c        **** static void MX_USART1_UART_Init(void)
1250:main.c        **** {
1251:main.c        **** 
1252:main.c        ****   huart1.Instance = USART1;
1253:main.c        ****   huart1.Init.BaudRate = 115200;
1254:main.c        ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
1255:main.c        ****   huart1.Init.StopBits = UART_STOPBITS_1;
1256:main.c        ****   huart1.Init.Parity = UART_PARITY_NONE;
1257:main.c        ****   huart1.Init.Mode = UART_MODE_TX_RX;
1258:main.c        ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
1259:main.c        ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
1260:main.c        ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
1261:main.c        ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
1262:main.c        ****   if (HAL_UART_Init(&huart1) != HAL_OK)
1263:main.c        ****   {
1264:main.c        ****     _Error_Handler(__FILE__, __LINE__);
1265:main.c        ****   }
1266:main.c        **** 
1267:main.c        **** }
1268:main.c        **** 
1269:main.c        **** /* USART6 init function */
1270:main.c        **** static void MX_USART6_UART_Init(void)
1271:main.c        **** {
1272:main.c        **** 
1273:main.c        ****   huart6.Instance = USART6;
1274:main.c        ****   huart6.Init.BaudRate = 115200;
1275:main.c        ****   huart6.Init.WordLength = UART_WORDLENGTH_8B;
1276:main.c        ****   huart6.Init.StopBits = UART_STOPBITS_1;
1277:main.c        ****   huart6.Init.Parity = UART_PARITY_NONE;
1278:main.c        ****   huart6.Init.Mode = UART_MODE_TX_RX;
1279:main.c        ****   huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
1280:main.c        ****   huart6.Init.OverSampling = UART_OVERSAMPLING_16;
1281:main.c        ****   huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
1282:main.c        ****   huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
1283:main.c        ****   if (HAL_UART_Init(&huart6) != HAL_OK)
1284:main.c        ****   {
1285:main.c        ****     _Error_Handler(__FILE__, __LINE__);
1286:main.c        ****   }
1287:main.c        **** 
1288:main.c        **** }
1289:main.c        **** 
1290:main.c        **** /* FMC initialization function */
1291:main.c        **** static void MX_FMC_Init(void)
1292:main.c        **** {
1293:main.c        ****   FMC_SDRAM_TimingTypeDef SdramTiming;
1294:main.c        **** 
1295:main.c        ****   /** Perform the SDRAM1 memory initialization sequence
1296:main.c        ****   */
1297:main.c        ****   hsdram1.Instance = FMC_SDRAM_DEVICE;
1298:main.c        ****   /* hsdram1.Init */
1299:main.c        ****   hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
1300:main.c        ****   hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
1301:main.c        ****   hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
1302:main.c        ****   hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
1303:main.c        ****   hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
1304:main.c        ****   hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
1305:main.c        ****   hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 25


1306:main.c        ****   hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
1307:main.c        ****   hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
1308:main.c        ****   hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
1309:main.c        ****   /* SdramTiming */
1310:main.c        ****   SdramTiming.LoadToActiveDelay = 2;
1311:main.c        ****   SdramTiming.ExitSelfRefreshDelay = 7;
1312:main.c        ****   SdramTiming.SelfRefreshTime = 4;
1313:main.c        ****   SdramTiming.RowCycleDelay = 7;
1314:main.c        ****   SdramTiming.WriteRecoveryTime = 3;
1315:main.c        ****   SdramTiming.RPDelay = 2;
1316:main.c        ****   SdramTiming.RCDDelay = 2;
1317:main.c        **** 
1318:main.c        ****   if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
1319:main.c        ****   {
1320:main.c        ****     _Error_Handler(__FILE__, __LINE__);
1321:main.c        ****   }
1322:main.c        **** 
1323:main.c        **** }
1324:main.c        **** 
1325:main.c        **** /** Configure pins as 
1326:main.c        ****         * Analog 
1327:main.c        ****         * Input 
1328:main.c        ****         * Output
1329:main.c        ****         * EVENT_OUT
1330:main.c        ****         * EXTI
1331:main.c        ****      PB5   ------> USB_OTG_HS_ULPI_D7
1332:main.c        ****      PH4   ------> USB_OTG_HS_ULPI_NXT
1333:main.c        ****      PB13   ------> USB_OTG_HS_ULPI_D6
1334:main.c        ****      PB12   ------> USB_OTG_HS_ULPI_D5
1335:main.c        ****      PC0   ------> USB_OTG_HS_ULPI_STP
1336:main.c        ****      PC2   ------> USB_OTG_HS_ULPI_DIR
1337:main.c        ****      PA5   ------> USB_OTG_HS_ULPI_CK
1338:main.c        ****      PB10   ------> USB_OTG_HS_ULPI_D3
1339:main.c        ****      PA3   ------> USB_OTG_HS_ULPI_D0
1340:main.c        ****      PB1   ------> USB_OTG_HS_ULPI_D2
1341:main.c        ****      PB0   ------> USB_OTG_HS_ULPI_D1
1342:main.c        ****      PB11   ------> USB_OTG_HS_ULPI_D4
1343:main.c        **** */
1344:main.c        **** static void MX_GPIO_Init(void)
1345:main.c        **** {
  67              		.loc 1 1345 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 64
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  72              	.LCFI0:
  73              		.cfi_def_cfa_offset 36
  74              		.cfi_offset 4, -36
  75              		.cfi_offset 5, -32
  76              		.cfi_offset 6, -28
  77              		.cfi_offset 7, -24
  78              		.cfi_offset 8, -20
  79              		.cfi_offset 9, -16
  80              		.cfi_offset 10, -12
  81              		.cfi_offset 11, -8
  82              		.cfi_offset 14, -4
  83 0004 91B0     		sub	sp, sp, #68
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 26


  84              	.LCFI1:
  85              		.cfi_def_cfa_offset 104
  86              	.LBB2:
1346:main.c        **** 
1347:main.c        ****   GPIO_InitTypeDef GPIO_InitStruct;
1348:main.c        **** 
1349:main.c        ****   /* GPIO Ports Clock Enable */
1350:main.c        ****   __HAL_RCC_GPIOE_CLK_ENABLE();
  87              		.loc 1 1350 0
  88 0006 9A4B     		ldr	r3, .L6
  89 0008 1A6B     		ldr	r2, [r3, #48]
  90 000a 42F01002 		orr	r2, r2, #16
  91 000e 1A63     		str	r2, [r3, #48]
  92 0010 1A6B     		ldr	r2, [r3, #48]
  93 0012 02F01002 		and	r2, r2, #16
  94 0016 0092     		str	r2, [sp]
  95 0018 009A     		ldr	r2, [sp]
  96              	.LBE2:
  97              	.LBB3:
1351:main.c        ****   __HAL_RCC_GPIOG_CLK_ENABLE();
  98              		.loc 1 1351 0
  99 001a 1A6B     		ldr	r2, [r3, #48]
 100 001c 42F04002 		orr	r2, r2, #64
 101 0020 1A63     		str	r2, [r3, #48]
 102 0022 1A6B     		ldr	r2, [r3, #48]
 103 0024 02F04002 		and	r2, r2, #64
 104 0028 0192     		str	r2, [sp, #4]
 105 002a 019A     		ldr	r2, [sp, #4]
 106              	.LBE3:
 107              	.LBB4:
1352:main.c        ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 108              		.loc 1 1352 0
 109 002c 1A6B     		ldr	r2, [r3, #48]
 110 002e 42F00202 		orr	r2, r2, #2
 111 0032 1A63     		str	r2, [r3, #48]
 112 0034 1A6B     		ldr	r2, [r3, #48]
 113 0036 02F00202 		and	r2, r2, #2
 114 003a 0292     		str	r2, [sp, #8]
 115 003c 029A     		ldr	r2, [sp, #8]
 116              	.LBE4:
 117              	.LBB5:
1353:main.c        ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 118              		.loc 1 1353 0
 119 003e 1A6B     		ldr	r2, [r3, #48]
 120 0040 42F00802 		orr	r2, r2, #8
 121 0044 1A63     		str	r2, [r3, #48]
 122 0046 1A6B     		ldr	r2, [r3, #48]
 123 0048 02F00802 		and	r2, r2, #8
 124 004c 0392     		str	r2, [sp, #12]
 125 004e 039A     		ldr	r2, [sp, #12]
 126              	.LBE5:
 127              	.LBB6:
1354:main.c        ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 128              		.loc 1 1354 0
 129 0050 1A6B     		ldr	r2, [r3, #48]
 130 0052 42F00402 		orr	r2, r2, #4
 131 0056 1A63     		str	r2, [r3, #48]
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 27


 132 0058 1A6B     		ldr	r2, [r3, #48]
 133 005a 02F00402 		and	r2, r2, #4
 134 005e 0492     		str	r2, [sp, #16]
 135 0060 049A     		ldr	r2, [sp, #16]
 136              	.LBE6:
 137              	.LBB7:
1355:main.c        ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 138              		.loc 1 1355 0
 139 0062 1A6B     		ldr	r2, [r3, #48]
 140 0064 42F00102 		orr	r2, r2, #1
 141 0068 1A63     		str	r2, [r3, #48]
 142 006a 1A6B     		ldr	r2, [r3, #48]
 143 006c 02F00102 		and	r2, r2, #1
 144 0070 0592     		str	r2, [sp, #20]
 145 0072 059A     		ldr	r2, [sp, #20]
 146              	.LBE7:
 147              	.LBB8:
1356:main.c        ****   __HAL_RCC_GPIOJ_CLK_ENABLE();
 148              		.loc 1 1356 0
 149 0074 1A6B     		ldr	r2, [r3, #48]
 150 0076 42F40072 		orr	r2, r2, #512
 151 007a 1A63     		str	r2, [r3, #48]
 152 007c 1A6B     		ldr	r2, [r3, #48]
 153 007e 02F40072 		and	r2, r2, #512
 154 0082 0692     		str	r2, [sp, #24]
 155 0084 069A     		ldr	r2, [sp, #24]
 156              	.LBE8:
 157              	.LBB9:
1357:main.c        ****   __HAL_RCC_GPIOI_CLK_ENABLE();
 158              		.loc 1 1357 0
 159 0086 1A6B     		ldr	r2, [r3, #48]
 160 0088 42F48072 		orr	r2, r2, #256
 161 008c 1A63     		str	r2, [r3, #48]
 162 008e 1A6B     		ldr	r2, [r3, #48]
 163 0090 02F48072 		and	r2, r2, #256
 164 0094 0792     		str	r2, [sp, #28]
 165 0096 079A     		ldr	r2, [sp, #28]
 166              	.LBE9:
 167              	.LBB10:
1358:main.c        ****   __HAL_RCC_GPIOK_CLK_ENABLE();
 168              		.loc 1 1358 0
 169 0098 1A6B     		ldr	r2, [r3, #48]
 170 009a 42F48062 		orr	r2, r2, #1024
 171 009e 1A63     		str	r2, [r3, #48]
 172 00a0 1A6B     		ldr	r2, [r3, #48]
 173 00a2 02F48062 		and	r2, r2, #1024
 174 00a6 0892     		str	r2, [sp, #32]
 175 00a8 089A     		ldr	r2, [sp, #32]
 176              	.LBE10:
 177              	.LBB11:
1359:main.c        ****   __HAL_RCC_GPIOF_CLK_ENABLE();
 178              		.loc 1 1359 0
 179 00aa 1A6B     		ldr	r2, [r3, #48]
 180 00ac 42F02002 		orr	r2, r2, #32
 181 00b0 1A63     		str	r2, [r3, #48]
 182 00b2 1A6B     		ldr	r2, [r3, #48]
 183 00b4 02F02002 		and	r2, r2, #32
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 28


 184 00b8 0992     		str	r2, [sp, #36]
 185 00ba 099A     		ldr	r2, [sp, #36]
 186              	.LBE11:
 187              	.LBB12:
1360:main.c        ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 188              		.loc 1 1360 0
 189 00bc 1A6B     		ldr	r2, [r3, #48]
 190 00be 42F08002 		orr	r2, r2, #128
 191 00c2 1A63     		str	r2, [r3, #48]
 192 00c4 1B6B     		ldr	r3, [r3, #48]
 193 00c6 03F08003 		and	r3, r3, #128
 194 00ca 0A93     		str	r3, [sp, #40]
 195 00cc 0A9B     		ldr	r3, [sp, #40]
 196              	.LBE12:
1361:main.c        **** 
1362:main.c        ****   /*Configure GPIO pin Output Level */
1363:main.c        ****   HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 197              		.loc 1 1363 0
 198 00ce 0122     		movs	r2, #1
 199 00d0 2021     		movs	r1, #32
 200 00d2 6848     		ldr	r0, .L6+4
 201 00d4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 202              	.LVL0:
1364:main.c        **** 
1365:main.c        ****   /*Configure GPIO pin Output Level */
1366:main.c        ****   HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 203              		.loc 1 1366 0
 204 00d8 0022     		movs	r2, #0
 205 00da 0C21     		movs	r1, #12
 206 00dc 6648     		ldr	r0, .L6+8
 207 00de FFF7FEFF 		bl	HAL_GPIO_WritePin
 208              	.LVL1:
1367:main.c        **** 
1368:main.c        ****   /*Configure GPIO pin Output Level */
1369:main.c        ****   HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 209              		.loc 1 1369 0
 210 00e2 0122     		movs	r2, #1
 211 00e4 0821     		movs	r1, #8
 212 00e6 6548     		ldr	r0, .L6+12
 213 00e8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 214              	.LVL2:
1370:main.c        **** 
1371:main.c        ****   /*Configure GPIO pin Output Level */
1372:main.c        ****   HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 215              		.loc 1 1372 0
 216 00ec 0122     		movs	r2, #1
 217 00ee 4FF48051 		mov	r1, #4096
 218 00f2 6148     		ldr	r0, .L6+8
 219 00f4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 220              	.LVL3:
1373:main.c        **** 
1374:main.c        ****   /*Configure GPIO pin Output Level */
1375:main.c        ****   HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 221              		.loc 1 1375 0
 222 00f8 0022     		movs	r2, #0
 223 00fa 4FF40051 		mov	r1, #8192
 224 00fe 6048     		ldr	r0, .L6+16
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 29


 225 0100 FFF7FEFF 		bl	HAL_GPIO_WritePin
 226              	.LVL4:
1376:main.c        **** 
1377:main.c        ****   /*Configure GPIO pin Output Level */
1378:main.c        ****   HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 227              		.loc 1 1378 0
 228 0104 0022     		movs	r2, #0
 229 0106 C821     		movs	r1, #200
 230 0108 5E48     		ldr	r0, .L6+20
 231 010a FFF7FEFF 		bl	HAL_GPIO_WritePin
 232              	.LVL5:
1379:main.c        **** 
1380:main.c        ****   /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
1381:main.c        ****   GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 233              		.loc 1 1381 0
 234 010e 4FF0080A 		mov	r10, #8
 235 0112 CDF82CA0 		str	r10, [sp, #44]
1382:main.c        ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 236              		.loc 1 1382 0
 237 0116 0024     		movs	r4, #0
 238 0118 0C94     		str	r4, [sp, #48]
1383:main.c        ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 239              		.loc 1 1383 0
 240 011a 0D94     		str	r4, [sp, #52]
1384:main.c        ****   HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 241              		.loc 1 1384 0
 242 011c 0BA9     		add	r1, sp, #44
 243 011e 5A48     		ldr	r0, .L6+24
 244 0120 FFF7FEFF 		bl	HAL_GPIO_Init
 245              	.LVL6:
1385:main.c        **** 
1386:main.c        ****   /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
1387:main.c        ****                            ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
1388:main.c        ****   GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 246              		.loc 1 1388 0
 247 0124 43F62343 		movw	r3, #15395
 248 0128 0B93     		str	r3, [sp, #44]
1389:main.c        ****                           |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
1390:main.c        ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 249              		.loc 1 1390 0
 250 012a 4FF00208 		mov	r8, #2
 251 012e CDF83080 		str	r8, [sp, #48]
1391:main.c        ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 252              		.loc 1 1391 0
 253 0132 0D94     		str	r4, [sp, #52]
1392:main.c        ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 254              		.loc 1 1392 0
 255 0134 0327     		movs	r7, #3
 256 0136 0E97     		str	r7, [sp, #56]
1393:main.c        ****   GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 257              		.loc 1 1393 0
 258 0138 0A26     		movs	r6, #10
 259 013a 0F96     		str	r6, [sp, #60]
1394:main.c        ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 260              		.loc 1 1394 0
 261 013c 0BA9     		add	r1, sp, #44
 262 013e 5348     		ldr	r0, .L6+28
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 30


 263 0140 FFF7FEFF 		bl	HAL_GPIO_Init
 264              	.LVL7:
1395:main.c        **** 
1396:main.c        ****   /*Configure GPIO pin : OTG_FS_VBUS_Pin */
1397:main.c        ****   GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 265              		.loc 1 1397 0
 266 0144 4FF48053 		mov	r3, #4096
 267 0148 0B93     		str	r3, [sp, #44]
1398:main.c        ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 268              		.loc 1 1398 0
 269 014a 0C94     		str	r4, [sp, #48]
1399:main.c        ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 270              		.loc 1 1399 0
 271 014c 0D94     		str	r4, [sp, #52]
1400:main.c        ****   HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 272              		.loc 1 1400 0
 273 014e 0BA9     		add	r1, sp, #44
 274 0150 4F48     		ldr	r0, .L6+32
 275 0152 FFF7FEFF 		bl	HAL_GPIO_Init
 276              	.LVL8:
1401:main.c        **** 
1402:main.c        ****   /*Configure GPIO pin : Audio_INT_Pin */
1403:main.c        ****   GPIO_InitStruct.Pin = Audio_INT_Pin;
 277              		.loc 1 1403 0
 278 0156 4023     		movs	r3, #64
 279 0158 0B93     		str	r3, [sp, #44]
1404:main.c        ****   GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 280              		.loc 1 1404 0
 281 015a DFF840B1 		ldr	fp, .L6+44
 282 015e CDF830B0 		str	fp, [sp, #48]
1405:main.c        ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 283              		.loc 1 1405 0
 284 0162 0D94     		str	r4, [sp, #52]
1406:main.c        ****   HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 285              		.loc 1 1406 0
 286 0164 0BA9     		add	r1, sp, #44
 287 0166 4348     		ldr	r0, .L6+4
 288 0168 FFF7FEFF 		bl	HAL_GPIO_Init
 289              	.LVL9:
1407:main.c        **** 
1408:main.c        ****   /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
1409:main.c        ****   GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 290              		.loc 1 1409 0
 291 016c 2023     		movs	r3, #32
 292 016e 0B93     		str	r3, [sp, #44]
1410:main.c        ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 293              		.loc 1 1410 0
 294 0170 0125     		movs	r5, #1
 295 0172 0C95     		str	r5, [sp, #48]
1411:main.c        ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 296              		.loc 1 1411 0
 297 0174 0D94     		str	r4, [sp, #52]
1412:main.c        ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 298              		.loc 1 1412 0
 299 0176 0E94     		str	r4, [sp, #56]
1413:main.c        ****   HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 300              		.loc 1 1413 0
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 31


 301 0178 0BA9     		add	r1, sp, #44
 302 017a 3E48     		ldr	r0, .L6+4
 303 017c FFF7FEFF 		bl	HAL_GPIO_Init
 304              	.LVL10:
1414:main.c        **** 
1415:main.c        ****   /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
1416:main.c        ****   GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 305              		.loc 1 1416 0
 306 0180 41F20C03 		movw	r3, #4108
 307 0184 0B93     		str	r3, [sp, #44]
1417:main.c        ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 308              		.loc 1 1417 0
 309 0186 0C95     		str	r5, [sp, #48]
1418:main.c        ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 310              		.loc 1 1418 0
 311 0188 0D94     		str	r4, [sp, #52]
1419:main.c        ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 312              		.loc 1 1419 0
 313 018a 0E94     		str	r4, [sp, #56]
1420:main.c        ****   HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 314              		.loc 1 1420 0
 315 018c 0BA9     		add	r1, sp, #44
 316 018e 3A48     		ldr	r0, .L6+8
 317 0190 FFF7FEFF 		bl	HAL_GPIO_Init
 318              	.LVL11:
1421:main.c        **** 
1422:main.c        ****   /*Configure GPIO pin : uSD_Detect_Pin */
1423:main.c        ****   GPIO_InitStruct.Pin = uSD_Detect_Pin;
 319              		.loc 1 1423 0
 320 0194 4FF40059 		mov	r9, #8192
 321 0198 CDF82C90 		str	r9, [sp, #44]
1424:main.c        ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 322              		.loc 1 1424 0
 323 019c 0C94     		str	r4, [sp, #48]
1425:main.c        ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 324              		.loc 1 1425 0
 325 019e 0D94     		str	r4, [sp, #52]
1426:main.c        ****   HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 326              		.loc 1 1426 0
 327 01a0 0BA9     		add	r1, sp, #44
 328 01a2 3C48     		ldr	r0, .L6+36
 329 01a4 FFF7FEFF 		bl	HAL_GPIO_Init
 330              	.LVL12:
1427:main.c        **** 
1428:main.c        ****   /*Configure GPIO pin : LCD_BL_CTRL_Pin */
1429:main.c        ****   GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 331              		.loc 1 1429 0
 332 01a8 CDF82CA0 		str	r10, [sp, #44]
1430:main.c        ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 333              		.loc 1 1430 0
 334 01ac 0C95     		str	r5, [sp, #48]
1431:main.c        ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 335              		.loc 1 1431 0
 336 01ae 0D94     		str	r4, [sp, #52]
1432:main.c        ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 337              		.loc 1 1432 0
 338 01b0 0E94     		str	r4, [sp, #56]
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 32


1433:main.c        ****   HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 339              		.loc 1 1433 0
 340 01b2 0BA9     		add	r1, sp, #44
 341 01b4 3148     		ldr	r0, .L6+12
 342 01b6 FFF7FEFF 		bl	HAL_GPIO_Init
 343              	.LVL13:
1434:main.c        **** 
1435:main.c        ****   /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
1436:main.c        ****   GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 344              		.loc 1 1436 0
 345 01ba 4FF0100A 		mov	r10, #16
 346 01be CDF82CA0 		str	r10, [sp, #44]
1437:main.c        ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 347              		.loc 1 1437 0
 348 01c2 0C94     		str	r4, [sp, #48]
1438:main.c        ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 349              		.loc 1 1438 0
 350 01c4 0D94     		str	r4, [sp, #52]
1439:main.c        ****   HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 351              		.loc 1 1439 0
 352 01c6 0BA9     		add	r1, sp, #44
 353 01c8 2A48     		ldr	r0, .L6+4
 354 01ca FFF7FEFF 		bl	HAL_GPIO_Init
 355              	.LVL14:
1440:main.c        **** 
1441:main.c        ****   /*Configure GPIO pins : TP3_Pin NC2_Pin */
1442:main.c        ****   GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 356              		.loc 1 1442 0
 357 01ce 48F20403 		movw	r3, #32772
 358 01d2 0B93     		str	r3, [sp, #44]
1443:main.c        ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 359              		.loc 1 1443 0
 360 01d4 0C94     		str	r4, [sp, #48]
1444:main.c        ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 361              		.loc 1 1444 0
 362 01d6 0D94     		str	r4, [sp, #52]
1445:main.c        ****   HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 363              		.loc 1 1445 0
 364 01d8 0BA9     		add	r1, sp, #44
 365 01da 2948     		ldr	r0, .L6+16
 366 01dc FFF7FEFF 		bl	HAL_GPIO_Init
 367              	.LVL15:
1446:main.c        **** 
1447:main.c        ****   /*Configure GPIO pin : DCMI_PWR_EN_Pin */
1448:main.c        ****   GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 368              		.loc 1 1448 0
 369 01e0 CDF82C90 		str	r9, [sp, #44]
1449:main.c        ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 370              		.loc 1 1449 0
 371 01e4 0C95     		str	r5, [sp, #48]
1450:main.c        ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 372              		.loc 1 1450 0
 373 01e6 0D94     		str	r4, [sp, #52]
1451:main.c        ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 374              		.loc 1 1451 0
 375 01e8 0E94     		str	r4, [sp, #56]
1452:main.c        ****   HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 33


 376              		.loc 1 1452 0
 377 01ea 0BA9     		add	r1, sp, #44
 378 01ec 2448     		ldr	r0, .L6+16
 379 01ee FFF7FEFF 		bl	HAL_GPIO_Init
 380              	.LVL16:
1453:main.c        **** 
1454:main.c        ****   /*Configure GPIO pin : LCD_INT_Pin */
1455:main.c        ****   GPIO_InitStruct.Pin = LCD_INT_Pin;
 381              		.loc 1 1455 0
 382 01f2 CDF82C90 		str	r9, [sp, #44]
1456:main.c        ****   GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 383              		.loc 1 1456 0
 384 01f6 CDF830B0 		str	fp, [sp, #48]
1457:main.c        ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 385              		.loc 1 1457 0
 386 01fa 0D94     		str	r4, [sp, #52]
1458:main.c        ****   HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 387              		.loc 1 1458 0
 388 01fc 0BA9     		add	r1, sp, #44
 389 01fe 1E48     		ldr	r0, .L6+8
 390 0200 FFF7FEFF 		bl	HAL_GPIO_Init
 391              	.LVL17:
1459:main.c        **** 
1460:main.c        ****   /*Configure GPIO pin : ULPI_NXT_Pin */
1461:main.c        ****   GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 392              		.loc 1 1461 0
 393 0204 CDF82CA0 		str	r10, [sp, #44]
1462:main.c        ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 394              		.loc 1 1462 0
 395 0208 CDF83080 		str	r8, [sp, #48]
1463:main.c        ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 396              		.loc 1 1463 0
 397 020c 0D94     		str	r4, [sp, #52]
1464:main.c        ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 398              		.loc 1 1464 0
 399 020e 0E97     		str	r7, [sp, #56]
1465:main.c        ****   GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 400              		.loc 1 1465 0
 401 0210 0F96     		str	r6, [sp, #60]
1466:main.c        ****   HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 402              		.loc 1 1466 0
 403 0212 0BA9     		add	r1, sp, #44
 404 0214 1A48     		ldr	r0, .L6+16
 405 0216 FFF7FEFF 		bl	HAL_GPIO_Init
 406              	.LVL18:
1467:main.c        **** 
1468:main.c        ****   /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
1469:main.c        ****   GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 407              		.loc 1 1469 0
 408 021a C823     		movs	r3, #200
 409 021c 0B93     		str	r3, [sp, #44]
1470:main.c        ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 410              		.loc 1 1470 0
 411 021e 0C95     		str	r5, [sp, #48]
1471:main.c        ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 412              		.loc 1 1471 0
 413 0220 0D94     		str	r4, [sp, #52]
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 34


1472:main.c        ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 414              		.loc 1 1472 0
 415 0222 0E94     		str	r4, [sp, #56]
1473:main.c        ****   HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 416              		.loc 1 1473 0
 417 0224 0BA9     		add	r1, sp, #44
 418 0226 1748     		ldr	r0, .L6+20
 419 0228 FFF7FEFF 		bl	HAL_GPIO_Init
 420              	.LVL19:
1474:main.c        **** 
1475:main.c        ****   /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
1476:main.c        ****   GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 421              		.loc 1 1476 0
 422 022c 0523     		movs	r3, #5
 423 022e 0B93     		str	r3, [sp, #44]
1477:main.c        ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 424              		.loc 1 1477 0
 425 0230 CDF83080 		str	r8, [sp, #48]
1478:main.c        ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 426              		.loc 1 1478 0
 427 0234 0D94     		str	r4, [sp, #52]
1479:main.c        ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 428              		.loc 1 1479 0
 429 0236 0E97     		str	r7, [sp, #56]
1480:main.c        ****   GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 430              		.loc 1 1480 0
 431 0238 0F96     		str	r6, [sp, #60]
1481:main.c        ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 432              		.loc 1 1481 0
 433 023a 0BA9     		add	r1, sp, #44
 434 023c 1548     		ldr	r0, .L6+36
 435 023e FFF7FEFF 		bl	HAL_GPIO_Init
 436              	.LVL20:
1482:main.c        **** 
1483:main.c        ****   /*Configure GPIO pin : RMII_RXER_Pin */
1484:main.c        ****   GPIO_InitStruct.Pin = RMII_RXER_Pin;
 437              		.loc 1 1484 0
 438 0242 0423     		movs	r3, #4
 439 0244 0B93     		str	r3, [sp, #44]
1485:main.c        ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 440              		.loc 1 1485 0
 441 0246 0C94     		str	r4, [sp, #48]
1486:main.c        ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 442              		.loc 1 1486 0
 443 0248 0D94     		str	r4, [sp, #52]
1487:main.c        ****   HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 444              		.loc 1 1487 0
 445 024a 0BA9     		add	r1, sp, #44
 446 024c 0D48     		ldr	r0, .L6+20
 447 024e FFF7FEFF 		bl	HAL_GPIO_Init
 448              	.LVL21:
1488:main.c        **** 
1489:main.c        ****   /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
1490:main.c        ****   GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 449              		.loc 1 1490 0
 450 0252 2823     		movs	r3, #40
 451 0254 0B93     		str	r3, [sp, #44]
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 35


1491:main.c        ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 452              		.loc 1 1491 0
 453 0256 CDF83080 		str	r8, [sp, #48]
1492:main.c        ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 454              		.loc 1 1492 0
 455 025a 0D94     		str	r4, [sp, #52]
1493:main.c        ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 456              		.loc 1 1493 0
 457 025c 0E97     		str	r7, [sp, #56]
1494:main.c        ****   GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 458              		.loc 1 1494 0
 459 025e 0F96     		str	r6, [sp, #60]
1495:main.c        ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 460              		.loc 1 1495 0
 461 0260 0BA9     		add	r1, sp, #44
 462 0262 0D48     		ldr	r0, .L6+40
 463 0264 FFF7FEFF 		bl	HAL_GPIO_Init
 464              	.LVL22:
1496:main.c        **** 
1497:main.c        **** }
 465              		.loc 1 1497 0
 466 0268 11B0     		add	sp, sp, #68
 467              	.LCFI2:
 468              		.cfi_def_cfa_offset 36
 469              		@ sp needed
 470 026a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 471              	.L7:
 472 026e 00BF     		.align	2
 473              	.L6:
 474 0270 00380240 		.word	1073887232
 475 0274 000C0240 		.word	1073875968
 476 0278 00200240 		.word	1073881088
 477 027c 00280240 		.word	1073883136
 478 0280 001C0240 		.word	1073880064
 479 0284 00180240 		.word	1073879040
 480 0288 00100240 		.word	1073876992
 481 028c 00040240 		.word	1073873920
 482 0290 00240240 		.word	1073882112
 483 0294 00080240 		.word	1073874944
 484 0298 00000240 		.word	1073872896
 485 029c 00001210 		.word	269615104
 486              		.cfi_endproc
 487              	.LFE187:
 489              		.section	.text.lcd_start,"ax",%progbits
 490              		.align	1
 491              		.syntax unified
 492              		.thumb
 493              		.thumb_func
 494              		.fpu fpv5-sp-d16
 496              	lcd_start:
 497              	.LFB159:
 219:main.c        ****   /* LCD Initialization */ 
 498              		.loc 1 219 0
 499              		.cfi_startproc
 500              		@ args = 0, pretend = 0, frame = 0
 501              		@ frame_needed = 0, uses_anonymous_args = 0
 502 0000 08B5     		push	{r3, lr}
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 36


 503              	.LCFI3:
 504              		.cfi_def_cfa_offset 8
 505              		.cfi_offset 3, -8
 506              		.cfi_offset 14, -4
 221:main.c        **** 
 507              		.loc 1 221 0
 508 0002 FFF7FEFF 		bl	BSP_LCD_Init
 509              	.LVL23:
 224:main.c        ****   //BSP_LCD_LayerDefaultInit(1, (unsigned int)lcd_image_bg+(LCD_X_SIZE*LCD_Y_SIZE*4));
 510              		.loc 1 224 0
 511 0006 1749     		ldr	r1, .L10
 512 0008 0020     		movs	r0, #0
 513 000a FFF7FEFF 		bl	BSP_LCD_LayerDefaultInit
 514              	.LVL24:
 226:main.c        **** 
 515              		.loc 1 226 0
 516 000e 1649     		ldr	r1, .L10+4
 517 0010 0120     		movs	r0, #1
 518 0012 FFF7FEFF 		bl	BSP_LCD_LayerDefaultInit
 519              	.LVL25:
 229:main.c        ****   
 520              		.loc 1 229 0
 521 0016 FFF7FEFF 		bl	BSP_LCD_DisplayOn
 522              	.LVL26:
 232:main.c        **** 
 523              		.loc 1 232 0
 524 001a 0020     		movs	r0, #0
 525 001c FFF7FEFF 		bl	BSP_LCD_SelectLayer
 526              	.LVL27:
 235:main.c        ****   BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 527              		.loc 1 235 0
 528 0020 4FF0FF30 		mov	r0, #-1
 529 0024 FFF7FEFF 		bl	BSP_LCD_Clear
 530              	.LVL28:
 236:main.c        ****   
 531              		.loc 1 236 0
 532 0028 4FF0FF30 		mov	r0, #-1
 533 002c FFF7FEFF 		bl	BSP_LCD_SetBackColor
 534              	.LVL29:
 238:main.c        ****   
 535              		.loc 1 238 0
 536 0030 4FF0FF31 		mov	r1, #-1
 537 0034 0120     		movs	r0, #1
 538 0036 FFF7FEFF 		bl	BSP_LCD_SetColorKeying
 539              	.LVL30:
 241:main.c        **** 
 540              		.loc 1 241 0
 541 003a 0120     		movs	r0, #1
 542 003c FFF7FEFF 		bl	BSP_LCD_SelectLayer
 543              	.LVL31:
 244:main.c        ****   BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 544              		.loc 1 244 0
 545 0040 4FF0FF30 		mov	r0, #-1
 546 0044 FFF7FEFF 		bl	BSP_LCD_Clear
 547              	.LVL32:
 245:main.c        ****   
 548              		.loc 1 245 0
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 37


 549 0048 4FF0FF30 		mov	r0, #-1
 550 004c FFF7FEFF 		bl	BSP_LCD_SetBackColor
 551              	.LVL33:
 249:main.c        ****   BSP_LCD_SetTransparency(1, 255);
 552              		.loc 1 249 0
 553 0050 FF21     		movs	r1, #255
 554 0052 0020     		movs	r0, #0
 555 0054 FFF7FEFF 		bl	BSP_LCD_SetTransparency
 556              	.LVL34:
 250:main.c        **** }
 557              		.loc 1 250 0
 558 0058 FF21     		movs	r1, #255
 559 005a 0120     		movs	r0, #1
 560 005c FFF7FEFF 		bl	BSP_LCD_SetTransparency
 561              	.LVL35:
 562 0060 08BD     		pop	{r3, pc}
 563              	.L11:
 564 0062 00BF     		.align	2
 565              	.L10:
 566 0064 00000000 		.word	.LANCHOR0
 567 0068 00F80700 		.word	.LANCHOR1+960
 568              		.cfi_endproc
 569              	.LFE159:
 571              		.section	.text.__io_putchar,"ax",%progbits
 572              		.align	1
 573              		.global	__io_putchar
 574              		.syntax unified
 575              		.thumb
 576              		.thumb_func
 577              		.fpu fpv5-sp-d16
 579              	__io_putchar:
 580              	.LFB157:
 193:main.c        ****   uint8_t data = ch;
 581              		.loc 1 193 0
 582              		.cfi_startproc
 583              		@ args = 0, pretend = 0, frame = 0
 584              		@ frame_needed = 0, uses_anonymous_args = 0
 585              		@ link register save eliminated.
 586              	.LVL36:
 587              	.L13:
 198:main.c        ****     huart1.Instance->TDR = (uint16_t)data;
 588              		.loc 1 198 0 discriminator 1
 589 0000 044B     		ldr	r3, .L14
 590 0002 1B68     		ldr	r3, [r3]
 591 0004 DA69     		ldr	r2, [r3, #28]
 592 0006 12F0800F 		tst	r2, #128
 593 000a F9D0     		beq	.L13
 199:main.c        ****   #endif
 594              		.loc 1 199 0
 595 000c C0B2     		uxtb	r0, r0
 596              	.LVL37:
 597 000e 9862     		str	r0, [r3, #40]
 202:main.c        **** 
 598              		.loc 1 202 0
 599 0010 0020     		movs	r0, #0
 600 0012 7047     		bx	lr
 601              	.L15:
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 38


 602              		.align	2
 603              	.L14:
 604 0014 00000000 		.word	huart1
 605              		.cfi_endproc
 606              	.LFE157:
 608              		.section	.text.inkey,"ax",%progbits
 609              		.align	1
 610              		.global	inkey
 611              		.syntax unified
 612              		.thumb
 613              		.thumb_func
 614              		.fpu fpv5-sp-d16
 616              	inkey:
 617              	.LFB158:
 205:main.c        ****   uint32_t flags = huart1.Instance->ISR;
 618              		.loc 1 205 0
 619              		.cfi_startproc
 620              		@ args = 0, pretend = 0, frame = 0
 621              		@ frame_needed = 0, uses_anonymous_args = 0
 622              		@ link register save eliminated.
 206:main.c        ****   
 623              		.loc 1 206 0
 624 0000 064B     		ldr	r3, .L19
 625 0002 1B68     		ldr	r3, [r3]
 626 0004 DA69     		ldr	r2, [r3, #28]
 627              	.LVL38:
 208:main.c        ****   {
 628              		.loc 1 208 0
 629 0006 12F0280F 		tst	r2, #40
 630 000a 04D0     		beq	.L18
 210:main.c        ****     return (huart1.Instance->RDR);
 631              		.loc 1 210 0
 632 000c 0822     		movs	r2, #8
 633              	.LVL39:
 634 000e 1A62     		str	r2, [r3, #32]
 211:main.c        ****   }
 635              		.loc 1 211 0
 636 0010 586A     		ldr	r0, [r3, #36]
 637 0012 C0B2     		uxtb	r0, r0
 638 0014 7047     		bx	lr
 639              	.LVL40:
 640              	.L18:
 214:main.c        **** }
 641              		.loc 1 214 0
 642 0016 0020     		movs	r0, #0
 215:main.c        **** 
 643              		.loc 1 215 0
 644 0018 7047     		bx	lr
 645              	.L20:
 646 001a 00BF     		.align	2
 647              	.L19:
 648 001c 00000000 		.word	huart1
 649              		.cfi_endproc
 650              	.LFE158:
 652              		.section	.text.draw_background,"ax",%progbits
 653              		.align	1
 654              		.global	draw_background
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 39


 655              		.syntax unified
 656              		.thumb
 657              		.thumb_func
 658              		.fpu fpv5-sp-d16
 660              	draw_background:
 661              	.LFB160:
 255:main.c        ****   /* Select the LCD Background Layer  */
 662              		.loc 1 255 0
 663              		.cfi_startproc
 664              		@ args = 0, pretend = 0, frame = 0
 665              		@ frame_needed = 0, uses_anonymous_args = 0
 666 0000 08B5     		push	{r3, lr}
 667              	.LCFI4:
 668              		.cfi_def_cfa_offset 8
 669              		.cfi_offset 3, -8
 670              		.cfi_offset 14, -4
 257:main.c        ****   BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 671              		.loc 1 257 0
 672 0002 0020     		movs	r0, #0
 673 0004 FFF7FEFF 		bl	BSP_LCD_SelectLayer
 674              	.LVL41:
 258:main.c        ****   BSP_LCD_FillRect(0.4*LCD_X_SIZE,0.2*LCD_Y_SIZE,150,130);
 675              		.loc 1 258 0
 676 0008 4FF0FF20 		mov	r0, #-16711936
 677 000c FFF7FEFF 		bl	BSP_LCD_SetTextColor
 678              	.LVL42:
 259:main.c        ****   
 679              		.loc 1 259 0
 680 0010 8223     		movs	r3, #130
 681 0012 9622     		movs	r2, #150
 682 0014 3621     		movs	r1, #54
 683 0016 C020     		movs	r0, #192
 684 0018 FFF7FEFF 		bl	BSP_LCD_FillRect
 685              	.LVL43:
 262:main.c        **** }
 686              		.loc 1 262 0
 687 001c 0120     		movs	r0, #1
 688 001e FFF7FEFF 		bl	BSP_LCD_SelectLayer
 689              	.LVL44:
 690 0022 08BD     		pop	{r3, pc}
 691              		.cfi_endproc
 692              	.LFE160:
 694              		.section	.text.StartDefaultTask,"ax",%progbits
 695              		.align	1
 696              		.global	StartDefaultTask
 697              		.syntax unified
 698              		.thumb
 699              		.thumb_func
 700              		.fpu fpv5-sp-d16
 702              	StartDefaultTask:
 703              	.LFB190:
1498:main.c        **** 
1499:main.c        **** /* USER CODE BEGIN 4 */
1500:main.c        **** #if ENABLE_NETWORK
1501:main.c        **** 
1502:main.c        **** static char response[500];
1503:main.c        **** 
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 40


1504:main.c        **** //based on available code examples
1505:main.c        **** static void http_server_serve(struct netconn *conn) 
1506:main.c        **** {
1507:main.c        ****   struct netbuf *inbuf;
1508:main.c        ****   err_t recv_err;
1509:main.c        ****   char* buf;
1510:main.c        ****   u16_t buflen;
1511:main.c        ****   
1512:main.c        ****   /* Read the data from the port, blocking if nothing yet there. 
1513:main.c        ****    We assume the request (the part we care about) is in one netbuf */
1514:main.c        ****   recv_err = netconn_recv(conn, &inbuf);
1515:main.c        ****   
1516:main.c        ****   if (recv_err == ERR_OK)
1517:main.c        ****   {
1518:main.c        ****     if (netconn_err(conn) == ERR_OK) 
1519:main.c        ****     {
1520:main.c        ****       netbuf_data(inbuf, (void**)&buf, &buflen);
1521:main.c        ****     
1522:main.c        ****       /* Is this an HTTP GET command? (only check the first 5 chars, since
1523:main.c        ****       there are other formats for GET, and we're keeping it very simple )*/
1524:main.c        ****       if ((buflen >=5) && (strncmp(buf, "GET /", 5) == 0))
1525:main.c        ****       {
1526:main.c        ****       response[0] = 0;
1527:main.c        **** 
1528:main.c        ****       strcpy(response, "HTTP/1.1 200 OK\r\n\
1529:main.c        ****         Content-Type: text/html\r\n\
1530:main.c        ****         Connnection: close\r\n\r\n\
1531:main.c        ****         <!DOCTYPE HTML>\r\n");
1532:main.c        **** 
1533:main.c        ****       #if 0
1534:main.c        ****       strcat(response,"<html>\r\n\
1535:main.c        ****       <meta http-equiv=\"refresh\" content=\"10\">");
1536:main.c        ****       #endif
1537:main.c        **** 
1538:main.c        ****       strcat(response,"<title>Prosta strona WWW</title>");
1539:main.c        ****       strcat(response,"<h1>H1 Header</h1>");
1540:main.c        **** 
1541:main.c        ****       strcat(response,"A to jest tekst na stronie");
1542:main.c        ****           netconn_write(conn, response, sizeof(response), NETCONN_NOCOPY);
1543:main.c        ****       }
1544:main.c        ****     }
1545:main.c        ****   }
1546:main.c        ****   /* Close the connection (server closes in HTTP) */
1547:main.c        ****   netconn_close(conn);
1548:main.c        ****   
1549:main.c        ****   /* Delete the buffer (netconn_recv gives us ownership,
1550:main.c        ****    so we have to make sure to deallocate the buffer) */
1551:main.c        ****   netbuf_delete(inbuf);
1552:main.c        **** }
1553:main.c        **** 
1554:main.c        **** 
1555:main.c        **** //based on available code examples
1556:main.c        **** static void http_server_netconn_thread(void const *arg)
1557:main.c        **** { 
1558:main.c        ****   struct netconn *conn, *newconn;
1559:main.c        ****   err_t err, accept_err;
1560:main.c        ****   
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 41


1561:main.c        ****   xprintf("http_server_netconn_thread\n");
1562:main.c        ****   
1563:main.c        ****   /* Create a new TCP connection handle */
1564:main.c        ****   conn = netconn_new(NETCONN_TCP);
1565:main.c        ****   
1566:main.c        ****   if (conn!= NULL)
1567:main.c        ****   {
1568:main.c        ****     /* Bind to port 80 (HTTP) with default IP address */
1569:main.c        ****     err = netconn_bind(conn, NULL, 80);
1570:main.c        ****     
1571:main.c        ****     if (err == ERR_OK)
1572:main.c        ****     {
1573:main.c        ****       /* Put the connection into LISTEN state */
1574:main.c        ****       netconn_listen(conn);
1575:main.c        ****   
1576:main.c        ****       while(1) 
1577:main.c        ****       {
1578:main.c        ****         /* accept any icoming connection */
1579:main.c        ****         accept_err = netconn_accept(conn, &newconn);
1580:main.c        ****         if(accept_err == ERR_OK)
1581:main.c        ****         {
1582:main.c        ****           /* serve connection */
1583:main.c        ****           http_server_serve(newconn);
1584:main.c        **** 
1585:main.c        ****           /* delete connection */
1586:main.c        ****           netconn_delete(newconn);
1587:main.c        ****         }
1588:main.c        ****       }
1589:main.c        ****     }
1590:main.c        ****   }
1591:main.c        **** }
1592:main.c        **** 
1593:main.c        **** #endif //ENABLE_NETWORK
1594:main.c        **** 
1595:main.c        **** #define AUDIO_OUT_BUFFER_SIZE                      8192
1596:main.c        **** enum {
1597:main.c        ****   BUFFER_OFFSET_NONE = 0,  
1598:main.c        ****   BUFFER_OFFSET_HALF,  
1599:main.c        ****   BUFFER_OFFSET_FULL,     
1600:main.c        **** };
1601:main.c        **** 
1602:main.c        **** uint8_t buff[AUDIO_OUT_BUFFER_SIZE];
1603:main.c        **** static FIL file;
1604:main.c        **** extern ApplicationTypeDef Appli_state;
1605:main.c        **** static uint8_t player_state = 0;
1606:main.c        **** static uint8_t buf_offs = BUFFER_OFFSET_NONE;
1607:main.c        **** static uint32_t fpos = 0;
1608:main.c        **** 
1609:main.c        **** 
1610:main.c        **** void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
1611:main.c        **** {
1612:main.c        ****     buf_offs = BUFFER_OFFSET_FULL;
1613:main.c        **** }
1614:main.c        **** 
1615:main.c        **** void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
1616:main.c        **** { 
1617:main.c        ****     buf_offs = BUFFER_OFFSET_HALF;
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 42


1618:main.c        **** }
1619:main.c        **** 
1620:main.c        **** 
1621:main.c        **** 
1622:main.c        **** 
1623:main.c        **** /* USER CODE END 4 */
1624:main.c        **** 
1625:main.c        **** /* USER CODE BEGIN Header_StartDefaultTask */
1626:main.c        **** /**
1627:main.c        ****   * @brief  Function implementing the defaultTask thread.
1628:main.c        ****   * @param  argument: Not used 
1629:main.c        ****   * @retval None
1630:main.c        ****   */
1631:main.c        **** /* USER CODE END Header_StartDefaultTask */
1632:main.c        **** void StartDefaultTask(void const * argument)
1633:main.c        **** {
 704              		.loc 1 1633 0
 705              		.cfi_startproc
 706              		@ args = 0, pretend = 0, frame = 8
 707              		@ frame_needed = 0, uses_anonymous_args = 0
 708              	.LVL45:
 709 0000 10B5     		push	{r4, lr}
 710              	.LCFI5:
 711              		.cfi_def_cfa_offset 8
 712              		.cfi_offset 4, -8
 713              		.cfi_offset 14, -4
 714 0002 82B0     		sub	sp, sp, #8
 715              	.LCFI6:
 716              		.cfi_def_cfa_offset 16
1634:main.c        ****   /* init code for FATFS */
1635:main.c        ****   MX_FATFS_Init();
 717              		.loc 1 1635 0
 718 0004 FFF7FEFF 		bl	MX_FATFS_Init
 719              	.LVL46:
1636:main.c        **** 
1637:main.c        ****   /* init code for USB_HOST */
1638:main.c        ****   MX_USB_HOST_Init();
 720              		.loc 1 1638 0
 721 0008 FFF7FEFF 		bl	MX_USB_HOST_Init
 722              	.LVL47:
1639:main.c        **** 
1640:main.c        ****   /* init code for LWIP */
1641:main.c        ****   #if ENABLE_NETWORK
1642:main.c        ****     MX_LWIP_Init();
1643:main.c        ****   #endif
1644:main.c        **** 
1645:main.c        ****   /* USER CODE BEGIN 5 */
1646:main.c        ****   #if ENABLE_NETWORK
1647:main.c        ****     osThreadDef(netconn_thread, http_server_netconn_thread, osPriorityNormal, 0, 1024);
1648:main.c        ****     netconn_thread_handle = osThreadCreate(osThread(netconn_thread), NULL);
1649:main.c        ****   #endif
1650:main.c        ****   
1651:main.c        ****   vTaskDelay(1000);
 723              		.loc 1 1651 0
 724 000c 4FF47A70 		mov	r0, #1000
 725 0010 FFF7FEFF 		bl	vTaskDelay
 726              	.LVL48:
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 43


1652:main.c        ****   
1653:main.c        ****   lcd_start();
 727              		.loc 1 1653 0
 728 0014 FFF7FEFF 		bl	lcd_start
 729              	.LVL49:
1654:main.c        ****   draw_background();
 730              		.loc 1 1654 0
 731 0018 FFF7FEFF 		bl	draw_background
 732              	.LVL50:
1655:main.c        ****   
1656:main.c        ****   xprintf("waiting for USB mass storage\n");
 733              		.loc 1 1656 0
 734 001c 6148     		ldr	r0, .L50
 735 001e FFF7FEFF 		bl	xprintf
 736              	.LVL51:
 737              	.L24:
1657:main.c        ****   
1658:main.c        ****   do
1659:main.c        ****   {
1660:main.c        ****     xprintf(".");
 738              		.loc 1 1660 0 discriminator 1
 739 0022 6148     		ldr	r0, .L50+4
 740 0024 FFF7FEFF 		bl	xprintf
 741              	.LVL52:
1661:main.c        ****     vTaskDelay(250);
 742              		.loc 1 1661 0 discriminator 1
 743 0028 FA20     		movs	r0, #250
 744 002a FFF7FEFF 		bl	vTaskDelay
 745              	.LVL53:
1662:main.c        ****   }while(Appli_state != APPLICATION_READY);
 746              		.loc 1 1662 0 discriminator 1
 747 002e 5F4B     		ldr	r3, .L50+8
 748 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 749 0032 022B     		cmp	r3, #2
 750 0034 F5D1     		bne	.L24
1663:main.c        ****     
1664:main.c        ****   xprintf("initializing audio codec...\n");
 751              		.loc 1 1664 0
 752 0036 5E48     		ldr	r0, .L50+12
 753 0038 FFF7FEFF 		bl	xprintf
 754              	.LVL54:
1665:main.c        ****   if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE1, 60, AUDIO_FREQUENCY_44K) == 0)
 755              		.loc 1 1665 0
 756 003c 4AF64442 		movw	r2, #44100
 757 0040 3C21     		movs	r1, #60
 758 0042 0220     		movs	r0, #2
 759 0044 FFF7FEFF 		bl	BSP_AUDIO_OUT_Init
 760              	.LVL55:
 761 0048 30B9     		cbnz	r0, .L25
1666:main.c        ****   {
1667:main.c        **** 	xprintf("audio init OK\n");
 762              		.loc 1 1667 0
 763 004a 5A48     		ldr	r0, .L50+16
 764 004c FFF7FEFF 		bl	xprintf
 765              	.LVL56:
 766              	.L26:
1668:main.c        ****   }
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 44


1669:main.c        ****   else
1670:main.c        ****   {
1671:main.c        **** 	xprintf("audio init ERROR\n");
1672:main.c        ****   }
1673:main.c        ****   BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 767              		.loc 1 1673 0
 768 0050 0520     		movs	r0, #5
 769 0052 FFF7FEFF 		bl	BSP_AUDIO_OUT_SetAudioFrameSlot
 770              	.LVL57:
 771 0056 29E0     		b	.L41
 772              	.L25:
1671:main.c        ****   }
 773              		.loc 1 1671 0
 774 0058 5748     		ldr	r0, .L50+20
 775 005a FFF7FEFF 		bl	xprintf
 776              	.LVL58:
 777 005e F7E7     		b	.L26
 778              	.L47:
 779              	.LBB13:
1674:main.c        ****   
1675:main.c        ****   /* Infinite loop */
1676:main.c        ****   for(;;)
1677:main.c        ****   {
1678:main.c        **** 
1679:main.c        ****   BSP_TS_GetState(&TS_State);
1680:main.c        ****   if(TS_State.touchDetected)
1681:main.c        ****   {
1682:main.c        ****     BSP_LCD_Clear(LCD_COLOR_WHITE);
 780              		.loc 1 1682 0
 781 0060 4FF0FF30 		mov	r0, #-1
 782 0064 FFF7FEFF 		bl	BSP_LCD_Clear
 783              	.LVL59:
1683:main.c        ****     BSP_LCD_SetTextColor(0x40FF00FF);
 784              		.loc 1 1683 0
 785 0068 5448     		ldr	r0, .L50+24
 786 006a FFF7FEFF 		bl	BSP_LCD_SetTextColor
 787              	.LVL60:
1684:main.c        ****     BSP_LCD_FillCircle(TS_State.touchX[0],TS_State.touchY[0],40);
 788              		.loc 1 1684 0
 789 006e 2822     		movs	r2, #40
 790 0070 A189     		ldrh	r1, [r4, #12]
 791 0072 6088     		ldrh	r0, [r4, #2]
 792 0074 FFF7FEFF 		bl	BSP_LCD_FillCircle
 793              	.LVL61:
 794 0078 1FE0     		b	.L27
 795              	.LVL62:
 796              	.L29:
1685:main.c        ****   }
1686:main.c        **** 
1687:main.c        ****   char key = inkey();
1688:main.c        ****   
1689:main.c        ****   switch(key)
1690:main.c        ****   {
1691:main.c        ****     case 0: break;
1692:main.c        ****     case 'a':
1693:main.c        ****     {
1694:main.c        ****       xprintf("Odebrano polecenie a\n");
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 45


 797              		.loc 1 1694 0
 798 007a 5148     		ldr	r0, .L50+28
 799              	.LVL63:
 800 007c FFF7FEFF 		bl	xprintf
 801              	.LVL64:
 802              	.L31:
1695:main.c        ****       break;
1696:main.c        ****     }
1697:main.c        ****     
1698:main.c        ****     case 'p':
1699:main.c        ****     {
1700:main.c        ****       xprintf("play command...\n");
1701:main.c        ****       if(player_state) {xprintf("already playing\n"); break;}
1702:main.c        **** 	  
1703:main.c        ****       FRESULT res;
1704:main.c        ****       res = f_open(&file,"1:/testwave.wav",FA_READ);
1705:main.c        ****       if(res==FR_OK)
1706:main.c        ****       {
1707:main.c        ****         xprintf("wave file open OK\n");
1708:main.c        ****       }
1709:main.c        ****       else
1710:main.c        ****       {
1711:main.c        ****         xprintf("wave file open ERROR, res = %d\n",res);
1712:main.c        ****       }
1713:main.c        ****       player_state = 1;
1714:main.c        ****       BSP_AUDIO_OUT_Play((uint16_t*)&buff[0],AUDIO_OUT_BUFFER_SIZE);
1715:main.c        ****       fpos = 0;
1716:main.c        ****       buf_offs = BUFFER_OFFSET_NONE;
1717:main.c        ****       break;
1718:main.c        ****     }
1719:main.c        ****     default:
1720:main.c        ****     {
1721:main.c        ****       xprintf("Nie rozpoznane polecenie: %c = %02X\n",key,key);
1722:main.c        ****       break;
1723:main.c        ****     }
1724:main.c        ****   }
1725:main.c        ****   
1726:main.c        ****   if(player_state)
 803              		.loc 1 1726 0
 804 0080 504B     		ldr	r3, .L50+32
 805 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 806 0084 7BB1     		cbz	r3, .L35
 807              	.LBB14:
1727:main.c        ****   {
1728:main.c        ****     uint32_t br;
1729:main.c        ****     
1730:main.c        ****     if(buf_offs == BUFFER_OFFSET_HALF)
 808              		.loc 1 1730 0
 809 0086 504B     		ldr	r3, .L50+36
 810 0088 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 811 008a 012B     		cmp	r3, #1
 812 008c 49D0     		beq	.L44
 813              	.L36:
1731:main.c        ****     {
1732:main.c        ****       if(f_read(&file, 
1733:main.c        ****           &buff[0], 
1734:main.c        ****           AUDIO_OUT_BUFFER_SIZE/2,
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 46


1735:main.c        ****           (void *)&br) != FR_OK)
1736:main.c        ****       { 
1737:main.c        ****       BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW); 
1738:main.c        ****       xprintf("f_read error on half\n");
1739:main.c        ****       }
1740:main.c        ****       buf_offs = BUFFER_OFFSET_NONE;
1741:main.c        ****       fpos += br;
1742:main.c        ****       
1743:main.c        ****     }
1744:main.c        ****     
1745:main.c        ****     if(buf_offs == BUFFER_OFFSET_FULL)
 814              		.loc 1 1745 0
 815 008e 4E4B     		ldr	r3, .L50+36
 816 0090 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 817 0092 022B     		cmp	r3, #2
 818 0094 5DD0     		beq	.L45
 819              	.L38:
1746:main.c        ****     {
1747:main.c        ****       if(f_read(&file, 
1748:main.c        ****           &buff[AUDIO_OUT_BUFFER_SIZE /2], 
1749:main.c        ****           AUDIO_OUT_BUFFER_SIZE/2, 
1750:main.c        ****           (void *)&br) != FR_OK)
1751:main.c        ****       { 
1752:main.c        ****         BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW); 
1753:main.c        ****         xprintf("f_read error on full\n");
1754:main.c        ****       } 
1755:main.c        **** 
1756:main.c        ****       buf_offs = BUFFER_OFFSET_NONE;
1757:main.c        ****       fpos += br; 
1758:main.c        ****     }
1759:main.c        **** 
1760:main.c        ****     if( (br < AUDIO_OUT_BUFFER_SIZE/2) && fpos )
 820              		.loc 1 1760 0
 821 0096 019B     		ldr	r3, [sp, #4]
 822 0098 B3F5805F 		cmp	r3, #4096
 823 009c 03D2     		bcs	.L35
 824              		.loc 1 1760 0 is_stmt 0 discriminator 1
 825 009e 4B4B     		ldr	r3, .L50+40
 826 00a0 1B68     		ldr	r3, [r3]
 827 00a2 002B     		cmp	r3, #0
 828 00a4 6DD1     		bne	.L46
 829              	.L35:
 830              	.LBE14:
1761:main.c        ****     {
1762:main.c        ****       xprintf("stop at eof\n");
1763:main.c        ****       BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
1764:main.c        ****       f_close(&file); 
1765:main.c        ****       player_state = 0;
1766:main.c        ****       fpos = 0;
1767:main.c        ****       buf_offs = BUFFER_OFFSET_NONE;
1768:main.c        ****     }
1769:main.c        ****   }  //if(player_state)
1770:main.c        **** 
1771:main.c        **** 
1772:main.c        ****   vTaskDelay(1);
 831              		.loc 1 1772 0 is_stmt 1
 832 00a6 0120     		movs	r0, #1
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 47


 833 00a8 FFF7FEFF 		bl	vTaskDelay
 834              	.LVL65:
 835              	.L41:
1679:main.c        ****   if(TS_State.touchDetected)
 836              		.loc 1 1679 0
 837 00ac 484C     		ldr	r4, .L50+44
 838 00ae 2046     		mov	r0, r4
 839 00b0 FFF7FEFF 		bl	BSP_TS_GetState
 840              	.LVL66:
1680:main.c        ****   {
 841              		.loc 1 1680 0
 842 00b4 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 843 00b6 002B     		cmp	r3, #0
 844 00b8 D2D1     		bne	.L47
 845              	.L27:
1687:main.c        ****   
 846              		.loc 1 1687 0
 847 00ba FFF7FEFF 		bl	inkey
 848              	.LVL67:
1689:main.c        ****   {
 849              		.loc 1 1689 0
 850 00be 6128     		cmp	r0, #97
 851 00c0 DBD0     		beq	.L29
 852 00c2 7028     		cmp	r0, #112
 853 00c4 07D0     		beq	.L30
 854 00c6 0028     		cmp	r0, #0
 855 00c8 DAD0     		beq	.L31
1721:main.c        ****       break;
 856              		.loc 1 1721 0
 857 00ca 0246     		mov	r2, r0
 858 00cc 0146     		mov	r1, r0
 859 00ce 4148     		ldr	r0, .L50+48
 860              	.LVL68:
 861 00d0 FFF7FEFF 		bl	xprintf
 862              	.LVL69:
1722:main.c        ****     }
 863              		.loc 1 1722 0
 864 00d4 D4E7     		b	.L31
 865              	.LVL70:
 866              	.L30:
 867              	.LBB15:
1700:main.c        ****       if(player_state) {xprintf("already playing\n"); break;}
 868              		.loc 1 1700 0
 869 00d6 4048     		ldr	r0, .L50+52
 870              	.LVL71:
 871 00d8 FFF7FEFF 		bl	xprintf
 872              	.LVL72:
1701:main.c        **** 	  
 873              		.loc 1 1701 0
 874 00dc 394B     		ldr	r3, .L50+32
 875 00de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 876 00e0 1BB1     		cbz	r3, .L32
1701:main.c        **** 	  
 877              		.loc 1 1701 0 is_stmt 0 discriminator 1
 878 00e2 3E48     		ldr	r0, .L50+56
 879 00e4 FFF7FEFF 		bl	xprintf
 880              	.LVL73:
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 48


 881 00e8 CAE7     		b	.L31
 882              	.L32:
1704:main.c        ****       if(res==FR_OK)
 883              		.loc 1 1704 0 is_stmt 1
 884 00ea 0122     		movs	r2, #1
 885 00ec 3C49     		ldr	r1, .L50+60
 886 00ee 3D48     		ldr	r0, .L50+64
 887 00f0 FFF7FEFF 		bl	f_open
 888              	.LVL74:
1705:main.c        ****       {
 889              		.loc 1 1705 0
 890 00f4 0146     		mov	r1, r0
 891 00f6 80B9     		cbnz	r0, .L33
1707:main.c        ****       }
 892              		.loc 1 1707 0
 893 00f8 3B48     		ldr	r0, .L50+68
 894              	.LVL75:
 895 00fa FFF7FEFF 		bl	xprintf
 896              	.LVL76:
 897              	.L34:
1713:main.c        ****       BSP_AUDIO_OUT_Play((uint16_t*)&buff[0],AUDIO_OUT_BUFFER_SIZE);
 898              		.loc 1 1713 0
 899 00fe 0122     		movs	r2, #1
 900 0100 304B     		ldr	r3, .L50+32
 901 0102 1A70     		strb	r2, [r3]
1714:main.c        ****       fpos = 0;
 902              		.loc 1 1714 0
 903 0104 4FF40051 		mov	r1, #8192
 904 0108 3848     		ldr	r0, .L50+72
 905 010a FFF7FEFF 		bl	BSP_AUDIO_OUT_Play
 906              	.LVL77:
1715:main.c        ****       buf_offs = BUFFER_OFFSET_NONE;
 907              		.loc 1 1715 0
 908 010e 0023     		movs	r3, #0
 909 0110 2E4A     		ldr	r2, .L50+40
 910 0112 1360     		str	r3, [r2]
1716:main.c        ****       break;
 911              		.loc 1 1716 0
 912 0114 2C4A     		ldr	r2, .L50+36
 913 0116 1370     		strb	r3, [r2]
1717:main.c        ****     }
 914              		.loc 1 1717 0
 915 0118 B2E7     		b	.L31
 916              	.LVL78:
 917              	.L33:
1711:main.c        ****       }
 918              		.loc 1 1711 0
 919 011a 3548     		ldr	r0, .L50+76
 920              	.LVL79:
 921 011c FFF7FEFF 		bl	xprintf
 922              	.LVL80:
 923 0120 EDE7     		b	.L34
 924              	.L44:
 925              	.LBE15:
 926              	.LBB16:
1732:main.c        ****           &buff[0], 
 927              		.loc 1 1732 0
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 49


 928 0122 01AB     		add	r3, sp, #4
 929 0124 4FF48052 		mov	r2, #4096
 930 0128 3049     		ldr	r1, .L50+72
 931 012a 2E48     		ldr	r0, .L50+64
 932 012c FFF7FEFF 		bl	f_read
 933              	.LVL81:
 934 0130 40B9     		cbnz	r0, .L48
 935              	.L37:
1740:main.c        ****       fpos += br;
 936              		.loc 1 1740 0
 937 0132 0022     		movs	r2, #0
 938 0134 244B     		ldr	r3, .L50+36
 939 0136 1A70     		strb	r2, [r3]
1741:main.c        ****       
 940              		.loc 1 1741 0
 941 0138 244A     		ldr	r2, .L50+40
 942 013a 1368     		ldr	r3, [r2]
 943 013c 0199     		ldr	r1, [sp, #4]
 944 013e 0B44     		add	r3, r3, r1
 945 0140 1360     		str	r3, [r2]
 946 0142 A4E7     		b	.L36
 947              	.L48:
1737:main.c        ****       xprintf("f_read error on half\n");
 948              		.loc 1 1737 0
 949 0144 0220     		movs	r0, #2
 950 0146 FFF7FEFF 		bl	BSP_AUDIO_OUT_Stop
 951              	.LVL82:
1738:main.c        ****       }
 952              		.loc 1 1738 0
 953 014a 2A48     		ldr	r0, .L50+80
 954 014c FFF7FEFF 		bl	xprintf
 955              	.LVL83:
 956 0150 EFE7     		b	.L37
 957              	.L45:
1747:main.c        ****           &buff[AUDIO_OUT_BUFFER_SIZE /2], 
 958              		.loc 1 1747 0
 959 0152 01AB     		add	r3, sp, #4
 960 0154 4FF48052 		mov	r2, #4096
 961 0158 2749     		ldr	r1, .L50+84
 962 015a 2248     		ldr	r0, .L50+64
 963 015c FFF7FEFF 		bl	f_read
 964              	.LVL84:
 965 0160 40B9     		cbnz	r0, .L49
 966              	.L39:
1756:main.c        ****       fpos += br; 
 967              		.loc 1 1756 0
 968 0162 0022     		movs	r2, #0
 969 0164 184B     		ldr	r3, .L50+36
 970 0166 1A70     		strb	r2, [r3]
1757:main.c        ****     }
 971              		.loc 1 1757 0
 972 0168 184A     		ldr	r2, .L50+40
 973 016a 1368     		ldr	r3, [r2]
 974 016c 0199     		ldr	r1, [sp, #4]
 975 016e 0B44     		add	r3, r3, r1
 976 0170 1360     		str	r3, [r2]
 977 0172 90E7     		b	.L38
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 50


 978              	.L49:
1752:main.c        ****         xprintf("f_read error on full\n");
 979              		.loc 1 1752 0
 980 0174 0220     		movs	r0, #2
 981 0176 FFF7FEFF 		bl	BSP_AUDIO_OUT_Stop
 982              	.LVL85:
1753:main.c        ****       } 
 983              		.loc 1 1753 0
 984 017a 2048     		ldr	r0, .L50+88
 985 017c FFF7FEFF 		bl	xprintf
 986              	.LVL86:
 987 0180 EFE7     		b	.L39
 988              	.L46:
1762:main.c        ****       BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 989              		.loc 1 1762 0
 990 0182 1F48     		ldr	r0, .L50+92
 991 0184 FFF7FEFF 		bl	xprintf
 992              	.LVL87:
1763:main.c        ****       f_close(&file); 
 993              		.loc 1 1763 0
 994 0188 0220     		movs	r0, #2
 995 018a FFF7FEFF 		bl	BSP_AUDIO_OUT_Stop
 996              	.LVL88:
1764:main.c        ****       player_state = 0;
 997              		.loc 1 1764 0
 998 018e 1548     		ldr	r0, .L50+64
 999 0190 FFF7FEFF 		bl	f_close
 1000              	.LVL89:
1765:main.c        ****       fpos = 0;
 1001              		.loc 1 1765 0
 1002 0194 0023     		movs	r3, #0
 1003 0196 0B4A     		ldr	r2, .L50+32
 1004 0198 1370     		strb	r3, [r2]
1766:main.c        ****       buf_offs = BUFFER_OFFSET_NONE;
 1005              		.loc 1 1766 0
 1006 019a 0C4A     		ldr	r2, .L50+40
 1007 019c 1360     		str	r3, [r2]
1767:main.c        ****     }
 1008              		.loc 1 1767 0
 1009 019e 0A4A     		ldr	r2, .L50+36
 1010 01a0 1370     		strb	r3, [r2]
 1011 01a2 80E7     		b	.L35
 1012              	.L51:
 1013              		.align	2
 1014              	.L50:
 1015 01a4 00000000 		.word	.LC2
 1016 01a8 20000000 		.word	.LC3
 1017 01ac 00000000 		.word	Appli_state
 1018 01b0 24000000 		.word	.LC4
 1019 01b4 44000000 		.word	.LC5
 1020 01b8 54000000 		.word	.LC6
 1021 01bc FF00FF40 		.word	1090453759
 1022 01c0 68000000 		.word	.LC7
 1023 01c4 00000000 		.word	.LANCHOR3
 1024 01c8 00000000 		.word	.LANCHOR6
 1025 01cc 00000000 		.word	.LANCHOR5
 1026 01d0 00000000 		.word	.LANCHOR2
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 51


 1027 01d4 EC000000 		.word	.LC13
 1028 01d8 80000000 		.word	.LC8
 1029 01dc 94000000 		.word	.LC9
 1030 01e0 A8000000 		.word	.LC10
 1031 01e4 00000000 		.word	.LANCHOR4
 1032 01e8 B8000000 		.word	.LC11
 1033 01ec 00000000 		.word	buff
 1034 01f0 CC000000 		.word	.LC12
 1035 01f4 14010000 		.word	.LC14
 1036 01f8 00100000 		.word	buff+4096
 1037 01fc 2C010000 		.word	.LC15
 1038 0200 44010000 		.word	.LC16
 1039              	.LBE16:
 1040              	.LBE13:
 1041              		.cfi_endproc
 1042              	.LFE190:
 1044              		.section	.text.initialize_touchscreen,"ax",%progbits
 1045              		.align	1
 1046              		.global	initialize_touchscreen
 1047              		.syntax unified
 1048              		.thumb
 1049              		.thumb_func
 1050              		.fpu fpv5-sp-d16
 1052              	initialize_touchscreen:
 1053              	.LFB161:
 269:main.c        ****   uint8_t  status = 0;
 1054              		.loc 1 269 0
 1055              		.cfi_startproc
 1056              		@ args = 0, pretend = 0, frame = 0
 1057              		@ frame_needed = 0, uses_anonymous_args = 0
 1058 0000 10B5     		push	{r4, lr}
 1059              	.LCFI7:
 1060              		.cfi_def_cfa_offset 8
 1061              		.cfi_offset 4, -8
 1062              		.cfi_offset 14, -4
 1063              	.LVL90:
 271:main.c        ****   if(status != TS_OK) return -1;
 1064              		.loc 1 271 0
 1065 0002 FFF7FEFF 		bl	BSP_LCD_GetXSize
 1066              	.LVL91:
 1067 0006 84B2     		uxth	r4, r0
 1068 0008 FFF7FEFF 		bl	BSP_LCD_GetYSize
 1069              	.LVL92:
 1070 000c 81B2     		uxth	r1, r0
 1071 000e 2046     		mov	r0, r4
 1072 0010 FFF7FEFF 		bl	BSP_TS_Init
 1073              	.LVL93:
 272:main.c        ****   return 0;
 1074              		.loc 1 272 0
 1075 0014 08B9     		cbnz	r0, .L56
 273:main.c        **** }
 1076              		.loc 1 273 0
 1077 0016 0020     		movs	r0, #0
 1078              	.LVL94:
 274:main.c        **** 
 1079              		.loc 1 274 0
 1080 0018 10BD     		pop	{r4, pc}
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 52


 1081              	.LVL95:
 1082              	.L56:
 272:main.c        ****   return 0;
 1083              		.loc 1 272 0
 1084 001a 4FF0FF30 		mov	r0, #-1
 1085              	.LVL96:
 1086 001e 10BD     		pop	{r4, pc}
 1087              		.cfi_endproc
 1088              	.LFE161:
 1090              		.section	.text.BSP_AUDIO_OUT_TransferComplete_CallBack,"ax",%progbits
 1091              		.align	1
 1092              		.global	BSP_AUDIO_OUT_TransferComplete_CallBack
 1093              		.syntax unified
 1094              		.thumb
 1095              		.thumb_func
 1096              		.fpu fpv5-sp-d16
 1098              	BSP_AUDIO_OUT_TransferComplete_CallBack:
 1099              	.LFB188:
1611:main.c        ****     buf_offs = BUFFER_OFFSET_FULL;
 1100              		.loc 1 1611 0
 1101              		.cfi_startproc
 1102              		@ args = 0, pretend = 0, frame = 0
 1103              		@ frame_needed = 0, uses_anonymous_args = 0
 1104              		@ link register save eliminated.
1612:main.c        **** }
 1105              		.loc 1 1612 0
 1106 0000 0222     		movs	r2, #2
 1107 0002 014B     		ldr	r3, .L58
 1108 0004 1A70     		strb	r2, [r3]
 1109 0006 7047     		bx	lr
 1110              	.L59:
 1111              		.align	2
 1112              	.L58:
 1113 0008 00000000 		.word	.LANCHOR6
 1114              		.cfi_endproc
 1115              	.LFE188:
 1117              		.section	.text.BSP_AUDIO_OUT_HalfTransfer_CallBack,"ax",%progbits
 1118              		.align	1
 1119              		.global	BSP_AUDIO_OUT_HalfTransfer_CallBack
 1120              		.syntax unified
 1121              		.thumb
 1122              		.thumb_func
 1123              		.fpu fpv5-sp-d16
 1125              	BSP_AUDIO_OUT_HalfTransfer_CallBack:
 1126              	.LFB189:
1616:main.c        ****     buf_offs = BUFFER_OFFSET_HALF;
 1127              		.loc 1 1616 0
 1128              		.cfi_startproc
 1129              		@ args = 0, pretend = 0, frame = 0
 1130              		@ frame_needed = 0, uses_anonymous_args = 0
 1131              		@ link register save eliminated.
1617:main.c        **** }
 1132              		.loc 1 1617 0
 1133 0000 0122     		movs	r2, #1
 1134 0002 014B     		ldr	r3, .L61
 1135 0004 1A70     		strb	r2, [r3]
 1136 0006 7047     		bx	lr
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 53


 1137              	.L62:
 1138              		.align	2
 1139              	.L61:
 1140 0008 00000000 		.word	.LANCHOR6
 1141              		.cfi_endproc
 1142              	.LFE189:
 1144              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1145              		.align	1
 1146              		.global	HAL_TIM_PeriodElapsedCallback
 1147              		.syntax unified
 1148              		.thumb
 1149              		.thumb_func
 1150              		.fpu fpv5-sp-d16
 1152              	HAL_TIM_PeriodElapsedCallback:
 1153              	.LFB191:
1773:main.c        **** 
1774:main.c        ****   }
1775:main.c        ****   /* USER CODE END 5 */ 
1776:main.c        **** }
1777:main.c        **** 
1778:main.c        **** /**
1779:main.c        ****   * @brief  Period elapsed callback in non blocking mode
1780:main.c        ****   * @note   This function is called  when TIM6 interrupt took place, inside
1781:main.c        ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
1782:main.c        ****   * a global variable "uwTick" used as application time base.
1783:main.c        ****   * @param  htim : TIM handle
1784:main.c        ****   * @retval None
1785:main.c        ****   */
1786:main.c        **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
1787:main.c        **** {
 1154              		.loc 1 1787 0
 1155              		.cfi_startproc
 1156              		@ args = 0, pretend = 0, frame = 0
 1157              		@ frame_needed = 0, uses_anonymous_args = 0
 1158              	.LVL97:
 1159 0000 08B5     		push	{r3, lr}
 1160              	.LCFI8:
 1161              		.cfi_def_cfa_offset 8
 1162              		.cfi_offset 3, -8
 1163              		.cfi_offset 14, -4
1788:main.c        ****   /* USER CODE BEGIN Callback 0 */
1789:main.c        **** 
1790:main.c        ****   /* USER CODE END Callback 0 */
1791:main.c        ****   if (htim->Instance == TIM6) {
 1164              		.loc 1 1791 0
 1165 0002 0268     		ldr	r2, [r0]
 1166 0004 034B     		ldr	r3, .L67
 1167 0006 9A42     		cmp	r2, r3
 1168 0008 00D0     		beq	.L66
 1169              	.LVL98:
 1170              	.L63:
 1171 000a 08BD     		pop	{r3, pc}
 1172              	.LVL99:
 1173              	.L66:
1792:main.c        ****     HAL_IncTick();
 1174              		.loc 1 1792 0
 1175 000c FFF7FEFF 		bl	HAL_IncTick
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 54


 1176              	.LVL100:
1793:main.c        ****   }
1794:main.c        ****   /* USER CODE BEGIN Callback 1 */
1795:main.c        **** 
1796:main.c        ****   /* USER CODE END Callback 1 */
1797:main.c        **** }
 1177              		.loc 1 1797 0
 1178 0010 FBE7     		b	.L63
 1179              	.L68:
 1180 0012 00BF     		.align	2
 1181              	.L67:
 1182 0014 00100040 		.word	1073745920
 1183              		.cfi_endproc
 1184              	.LFE191:
 1186              		.section	.text._Error_Handler,"ax",%progbits
 1187              		.align	1
 1188              		.global	_Error_Handler
 1189              		.syntax unified
 1190              		.thumb
 1191              		.thumb_func
 1192              		.fpu fpv5-sp-d16
 1194              	_Error_Handler:
 1195              	.LFB192:
1798:main.c        **** 
1799:main.c        **** /**
1800:main.c        ****   * @brief  This function is executed in case of error occurrence.
1801:main.c        ****   * @param  file: The file name as string.
1802:main.c        ****   * @param  line: The line in file as a number.
1803:main.c        ****   * @retval None
1804:main.c        ****   */
1805:main.c        **** void _Error_Handler(char *file, int line)
1806:main.c        **** {
 1196              		.loc 1 1806 0
 1197              		.cfi_startproc
 1198              		@ Volatile: function does not return.
 1199              		@ args = 0, pretend = 0, frame = 0
 1200              		@ frame_needed = 0, uses_anonymous_args = 0
 1201              		@ link register save eliminated.
 1202              	.LVL101:
 1203              	.L70:
 1204 0000 FEE7     		b	.L70
 1205              		.cfi_endproc
 1206              	.LFE192:
 1208              		.section	.text.MX_ADC3_Init,"ax",%progbits
 1209              		.align	1
 1210              		.syntax unified
 1211              		.thumb
 1212              		.thumb_func
 1213              		.fpu fpv5-sp-d16
 1215              	MX_ADC3_Init:
 1216              	.LFB164:
 487:main.c        **** 
 1217              		.loc 1 487 0
 1218              		.cfi_startproc
 1219              		@ args = 0, pretend = 0, frame = 16
 1220              		@ frame_needed = 0, uses_anonymous_args = 0
 487:main.c        **** 
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 55


 1221              		.loc 1 487 0
 1222 0000 00B5     		push	{lr}
 1223              	.LCFI9:
 1224              		.cfi_def_cfa_offset 4
 1225              		.cfi_offset 14, -4
 1226 0002 85B0     		sub	sp, sp, #20
 1227              	.LCFI10:
 1228              		.cfi_def_cfa_offset 24
 493:main.c        ****   hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1229              		.loc 1 493 0
 1230 0004 1648     		ldr	r0, .L77
 1231 0006 174B     		ldr	r3, .L77+4
 1232 0008 0360     		str	r3, [r0]
 494:main.c        ****   hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 1233              		.loc 1 494 0
 1234 000a 4FF48033 		mov	r3, #65536
 1235 000e 4360     		str	r3, [r0, #4]
 495:main.c        ****   hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 1236              		.loc 1 495 0
 1237 0010 0023     		movs	r3, #0
 1238 0012 8360     		str	r3, [r0, #8]
 496:main.c        ****   hadc3.Init.ContinuousConvMode = DISABLE;
 1239              		.loc 1 496 0
 1240 0014 0361     		str	r3, [r0, #16]
 497:main.c        ****   hadc3.Init.DiscontinuousConvMode = DISABLE;
 1241              		.loc 1 497 0
 1242 0016 8361     		str	r3, [r0, #24]
 498:main.c        ****   hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1243              		.loc 1 498 0
 1244 0018 0362     		str	r3, [r0, #32]
 499:main.c        ****   hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1245              		.loc 1 499 0
 1246 001a C362     		str	r3, [r0, #44]
 500:main.c        ****   hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1247              		.loc 1 500 0
 1248 001c 124A     		ldr	r2, .L77+8
 1249 001e 8262     		str	r2, [r0, #40]
 501:main.c        ****   hadc3.Init.NbrOfConversion = 1;
 1250              		.loc 1 501 0
 1251 0020 C360     		str	r3, [r0, #12]
 502:main.c        ****   hadc3.Init.DMAContinuousRequests = DISABLE;
 1252              		.loc 1 502 0
 1253 0022 0122     		movs	r2, #1
 1254 0024 C261     		str	r2, [r0, #28]
 503:main.c        ****   hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1255              		.loc 1 503 0
 1256 0026 0363     		str	r3, [r0, #48]
 504:main.c        ****   if (HAL_ADC_Init(&hadc3) != HAL_OK)
 1257              		.loc 1 504 0
 1258 0028 4261     		str	r2, [r0, #20]
 505:main.c        ****   {
 1259              		.loc 1 505 0
 1260 002a FFF7FEFF 		bl	HAL_ADC_Init
 1261              	.LVL102:
 1262 002e 68B9     		cbnz	r0, .L75
 512:main.c        ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 1263              		.loc 1 512 0
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 56


 1264 0030 0423     		movs	r3, #4
 1265 0032 0093     		str	r3, [sp]
 513:main.c        ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1266              		.loc 1 513 0
 1267 0034 0123     		movs	r3, #1
 1268 0036 0193     		str	r3, [sp, #4]
 514:main.c        ****   if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 1269              		.loc 1 514 0
 1270 0038 0023     		movs	r3, #0
 1271 003a 0293     		str	r3, [sp, #8]
 515:main.c        ****   {
 1272              		.loc 1 515 0
 1273 003c 6946     		mov	r1, sp
 1274 003e 0848     		ldr	r0, .L77
 1275 0040 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1276              	.LVL103:
 1277 0044 38B9     		cbnz	r0, .L76
 520:main.c        **** 
 1278              		.loc 1 520 0
 1279 0046 05B0     		add	sp, sp, #20
 1280              	.LCFI11:
 1281              		.cfi_remember_state
 1282              		.cfi_def_cfa_offset 4
 1283              		@ sp needed
 1284 0048 5DF804FB 		ldr	pc, [sp], #4
 1285              	.L75:
 1286              	.LCFI12:
 1287              		.cfi_restore_state
 507:main.c        ****   }
 1288              		.loc 1 507 0
 1289 004c 40F2FB11 		movw	r1, #507
 1290 0050 0648     		ldr	r0, .L77+12
 1291 0052 FFF7FEFF 		bl	_Error_Handler
 1292              	.LVL104:
 1293              	.L76:
 517:main.c        ****   }
 1294              		.loc 1 517 0
 1295 0056 40F20521 		movw	r1, #517
 1296 005a 0448     		ldr	r0, .L77+12
 1297 005c FFF7FEFF 		bl	_Error_Handler
 1298              	.LVL105:
 1299              	.L78:
 1300              		.align	2
 1301              	.L77:
 1302 0060 00000000 		.word	hadc3
 1303 0064 00220140 		.word	1073816064
 1304 0068 0100000F 		.word	251658241
 1305 006c 00000000 		.word	.LC17
 1306              		.cfi_endproc
 1307              	.LFE164:
 1309              		.section	.text.MX_CRC_Init,"ax",%progbits
 1310              		.align	1
 1311              		.syntax unified
 1312              		.thumb
 1313              		.thumb_func
 1314              		.fpu fpv5-sp-d16
 1316              	MX_CRC_Init:
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 57


 1317              	.LFB165:
 524:main.c        **** 
 1318              		.loc 1 524 0
 1319              		.cfi_startproc
 1320              		@ args = 0, pretend = 0, frame = 0
 1321              		@ frame_needed = 0, uses_anonymous_args = 0
 1322 0000 08B5     		push	{r3, lr}
 1323              	.LCFI13:
 1324              		.cfi_def_cfa_offset 8
 1325              		.cfi_offset 3, -8
 1326              		.cfi_offset 14, -4
 526:main.c        ****   hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 1327              		.loc 1 526 0
 1328 0002 0948     		ldr	r0, .L83
 1329 0004 094B     		ldr	r3, .L83+4
 1330 0006 0360     		str	r3, [r0]
 527:main.c        ****   hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 1331              		.loc 1 527 0
 1332 0008 0023     		movs	r3, #0
 1333 000a 0371     		strb	r3, [r0, #4]
 528:main.c        ****   hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 1334              		.loc 1 528 0
 1335 000c 4371     		strb	r3, [r0, #5]
 529:main.c        ****   hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 1336              		.loc 1 529 0
 1337 000e 4361     		str	r3, [r0, #20]
 530:main.c        ****   hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 1338              		.loc 1 530 0
 1339 0010 8361     		str	r3, [r0, #24]
 531:main.c        ****   if (HAL_CRC_Init(&hcrc) != HAL_OK)
 1340              		.loc 1 531 0
 1341 0012 0123     		movs	r3, #1
 1342 0014 0362     		str	r3, [r0, #32]
 532:main.c        ****   {
 1343              		.loc 1 532 0
 1344 0016 FFF7FEFF 		bl	HAL_CRC_Init
 1345              	.LVL106:
 1346 001a 00B9     		cbnz	r0, .L82
 1347 001c 08BD     		pop	{r3, pc}
 1348              	.L82:
 534:main.c        ****   }
 1349              		.loc 1 534 0
 1350 001e 40F21621 		movw	r1, #534
 1351 0022 0348     		ldr	r0, .L83+8
 1352 0024 FFF7FEFF 		bl	_Error_Handler
 1353              	.LVL107:
 1354              	.L84:
 1355              		.align	2
 1356              	.L83:
 1357 0028 00000000 		.word	hcrc
 1358 002c 00300240 		.word	1073885184
 1359 0030 00000000 		.word	.LC17
 1360              		.cfi_endproc
 1361              	.LFE165:
 1363              		.section	.text.MX_DCMI_Init,"ax",%progbits
 1364              		.align	1
 1365              		.syntax unified
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 58


 1366              		.thumb
 1367              		.thumb_func
 1368              		.fpu fpv5-sp-d16
 1370              	MX_DCMI_Init:
 1371              	.LFB166:
 541:main.c        **** 
 1372              		.loc 1 541 0
 1373              		.cfi_startproc
 1374              		@ args = 0, pretend = 0, frame = 0
 1375              		@ frame_needed = 0, uses_anonymous_args = 0
 1376 0000 08B5     		push	{r3, lr}
 1377              	.LCFI14:
 1378              		.cfi_def_cfa_offset 8
 1379              		.cfi_offset 3, -8
 1380              		.cfi_offset 14, -4
 543:main.c        ****   hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 1381              		.loc 1 543 0
 1382 0002 0C48     		ldr	r0, .L89
 1383 0004 0C4B     		ldr	r3, .L89+4
 1384 0006 0360     		str	r3, [r0]
 544:main.c        ****   hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 1385              		.loc 1 544 0
 1386 0008 0023     		movs	r3, #0
 1387 000a 4360     		str	r3, [r0, #4]
 545:main.c        ****   hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 1388              		.loc 1 545 0
 1389 000c 8360     		str	r3, [r0, #8]
 546:main.c        ****   hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 1390              		.loc 1 546 0
 1391 000e C360     		str	r3, [r0, #12]
 547:main.c        ****   hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 1392              		.loc 1 547 0
 1393 0010 0361     		str	r3, [r0, #16]
 548:main.c        ****   hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 1394              		.loc 1 548 0
 1395 0012 4361     		str	r3, [r0, #20]
 549:main.c        ****   hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 1396              		.loc 1 549 0
 1397 0014 8361     		str	r3, [r0, #24]
 550:main.c        ****   hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 1398              		.loc 1 550 0
 1399 0016 0362     		str	r3, [r0, #32]
 551:main.c        ****   hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 1400              		.loc 1 551 0
 1401 0018 4362     		str	r3, [r0, #36]
 552:main.c        ****   hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 1402              		.loc 1 552 0
 1403 001a 8362     		str	r3, [r0, #40]
 553:main.c        ****   hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 1404              		.loc 1 553 0
 1405 001c C362     		str	r3, [r0, #44]
 554:main.c        ****   if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 1406              		.loc 1 554 0
 1407 001e 0363     		str	r3, [r0, #48]
 555:main.c        ****   {
 1408              		.loc 1 555 0
 1409 0020 FFF7FEFF 		bl	HAL_DCMI_Init
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 59


 1410              	.LVL108:
 1411 0024 00B9     		cbnz	r0, .L88
 1412 0026 08BD     		pop	{r3, pc}
 1413              	.L88:
 557:main.c        ****   }
 1414              		.loc 1 557 0
 1415 0028 40F22D21 		movw	r1, #557
 1416 002c 0348     		ldr	r0, .L89+8
 1417 002e FFF7FEFF 		bl	_Error_Handler
 1418              	.LVL109:
 1419              	.L90:
 1420 0032 00BF     		.align	2
 1421              	.L89:
 1422 0034 00000000 		.word	hdcmi
 1423 0038 00000550 		.word	1342504960
 1424 003c 00000000 		.word	.LC17
 1425              		.cfi_endproc
 1426              	.LFE166:
 1428              		.section	.text.MX_DMA2D_Init,"ax",%progbits
 1429              		.align	1
 1430              		.syntax unified
 1431              		.thumb
 1432              		.thumb_func
 1433              		.fpu fpv5-sp-d16
 1435              	MX_DMA2D_Init:
 1436              	.LFB167:
 564:main.c        **** 
 1437              		.loc 1 564 0
 1438              		.cfi_startproc
 1439              		@ args = 0, pretend = 0, frame = 0
 1440              		@ frame_needed = 0, uses_anonymous_args = 0
 1441 0000 08B5     		push	{r3, lr}
 1442              	.LCFI15:
 1443              		.cfi_def_cfa_offset 8
 1444              		.cfi_offset 3, -8
 1445              		.cfi_offset 14, -4
 566:main.c        ****   hdma2d.Init.Mode = DMA2D_M2M;
 1446              		.loc 1 566 0
 1447 0002 0F48     		ldr	r0, .L97
 1448 0004 0F4B     		ldr	r3, .L97+4
 1449 0006 0360     		str	r3, [r0]
 567:main.c        ****   hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 1450              		.loc 1 567 0
 1451 0008 0023     		movs	r3, #0
 1452 000a 4360     		str	r3, [r0, #4]
 568:main.c        ****   hdma2d.Init.OutputOffset = 0;
 1453              		.loc 1 568 0
 1454 000c 8360     		str	r3, [r0, #8]
 569:main.c        ****   hdma2d.LayerCfg[1].InputOffset = 0;
 1455              		.loc 1 569 0
 1456 000e C360     		str	r3, [r0, #12]
 570:main.c        ****   hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 1457              		.loc 1 570 0
 1458 0010 8362     		str	r3, [r0, #40]
 571:main.c        ****   hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 1459              		.loc 1 571 0
 1460 0012 C362     		str	r3, [r0, #44]
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 60


 572:main.c        ****   hdma2d.LayerCfg[1].InputAlpha = 0;
 1461              		.loc 1 572 0
 1462 0014 0363     		str	r3, [r0, #48]
 573:main.c        ****   if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 1463              		.loc 1 573 0
 1464 0016 4363     		str	r3, [r0, #52]
 574:main.c        ****   {
 1465              		.loc 1 574 0
 1466 0018 FFF7FEFF 		bl	HAL_DMA2D_Init
 1467              	.LVL110:
 1468 001c 28B9     		cbnz	r0, .L95
 579:main.c        ****   {
 1469              		.loc 1 579 0
 1470 001e 0121     		movs	r1, #1
 1471 0020 0748     		ldr	r0, .L97
 1472 0022 FFF7FEFF 		bl	HAL_DMA2D_ConfigLayer
 1473              	.LVL111:
 1474 0026 28B9     		cbnz	r0, .L96
 1475 0028 08BD     		pop	{r3, pc}
 1476              	.L95:
 576:main.c        ****   }
 1477              		.loc 1 576 0
 1478 002a 4FF41071 		mov	r1, #576
 1479 002e 0648     		ldr	r0, .L97+8
 1480 0030 FFF7FEFF 		bl	_Error_Handler
 1481              	.LVL112:
 1482              	.L96:
 581:main.c        ****   }
 1483              		.loc 1 581 0
 1484 0034 40F24521 		movw	r1, #581
 1485 0038 0348     		ldr	r0, .L97+8
 1486 003a FFF7FEFF 		bl	_Error_Handler
 1487              	.LVL113:
 1488              	.L98:
 1489 003e 00BF     		.align	2
 1490              	.L97:
 1491 0040 00000000 		.word	hdma2d
 1492 0044 00B00240 		.word	1073917952
 1493 0048 00000000 		.word	.LC17
 1494              		.cfi_endproc
 1495              	.LFE167:
 1497              		.section	.text.MX_FMC_Init,"ax",%progbits
 1498              		.align	1
 1499              		.syntax unified
 1500              		.thumb
 1501              		.thumb_func
 1502              		.fpu fpv5-sp-d16
 1504              	MX_FMC_Init:
 1505              	.LFB186:
1292:main.c        ****   FMC_SDRAM_TimingTypeDef SdramTiming;
 1506              		.loc 1 1292 0
 1507              		.cfi_startproc
 1508              		@ args = 0, pretend = 0, frame = 32
 1509              		@ frame_needed = 0, uses_anonymous_args = 0
 1510 0000 00B5     		push	{lr}
 1511              	.LCFI16:
 1512              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 61


 1513              		.cfi_offset 14, -4
 1514 0002 89B0     		sub	sp, sp, #36
 1515              	.LCFI17:
 1516              		.cfi_def_cfa_offset 40
1297:main.c        ****   /* hsdram1.Init */
 1517              		.loc 1 1297 0
 1518 0004 1648     		ldr	r0, .L103
 1519 0006 174B     		ldr	r3, .L103+4
 1520 0008 0360     		str	r3, [r0]
1299:main.c        ****   hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 1521              		.loc 1 1299 0
 1522 000a 0023     		movs	r3, #0
 1523 000c 4360     		str	r3, [r0, #4]
1300:main.c        ****   hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 1524              		.loc 1 1300 0
 1525 000e 8360     		str	r3, [r0, #8]
1301:main.c        ****   hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 1526              		.loc 1 1301 0
 1527 0010 0421     		movs	r1, #4
 1528 0012 C160     		str	r1, [r0, #12]
1302:main.c        ****   hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 1529              		.loc 1 1302 0
 1530 0014 1022     		movs	r2, #16
 1531 0016 0261     		str	r2, [r0, #16]
1303:main.c        ****   hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 1532              		.loc 1 1303 0
 1533 0018 4022     		movs	r2, #64
 1534 001a 4261     		str	r2, [r0, #20]
1304:main.c        ****   hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 1535              		.loc 1 1304 0
 1536 001c 4FF4C072 		mov	r2, #384
 1537 0020 8261     		str	r2, [r0, #24]
1305:main.c        ****   hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 1538              		.loc 1 1305 0
 1539 0022 C361     		str	r3, [r0, #28]
1306:main.c        ****   hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 1540              		.loc 1 1306 0
 1541 0024 4FF40062 		mov	r2, #2048
 1542 0028 0262     		str	r2, [r0, #32]
1307:main.c        ****   hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 1543              		.loc 1 1307 0
 1544 002a 4FF48052 		mov	r2, #4096
 1545 002e 4262     		str	r2, [r0, #36]
1308:main.c        ****   /* SdramTiming */
 1546              		.loc 1 1308 0
 1547 0030 8362     		str	r3, [r0, #40]
1310:main.c        ****   SdramTiming.ExitSelfRefreshDelay = 7;
 1548              		.loc 1 1310 0
 1549 0032 0223     		movs	r3, #2
 1550 0034 0193     		str	r3, [sp, #4]
1311:main.c        ****   SdramTiming.SelfRefreshTime = 4;
 1551              		.loc 1 1311 0
 1552 0036 0722     		movs	r2, #7
 1553 0038 0292     		str	r2, [sp, #8]
1312:main.c        ****   SdramTiming.RowCycleDelay = 7;
 1554              		.loc 1 1312 0
 1555 003a 0391     		str	r1, [sp, #12]
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 62


1313:main.c        ****   SdramTiming.WriteRecoveryTime = 3;
 1556              		.loc 1 1313 0
 1557 003c 0492     		str	r2, [sp, #16]
1314:main.c        ****   SdramTiming.RPDelay = 2;
 1558              		.loc 1 1314 0
 1559 003e 0322     		movs	r2, #3
 1560 0040 0592     		str	r2, [sp, #20]
1315:main.c        ****   SdramTiming.RCDDelay = 2;
 1561              		.loc 1 1315 0
 1562 0042 0693     		str	r3, [sp, #24]
1316:main.c        **** 
 1563              		.loc 1 1316 0
 1564 0044 0793     		str	r3, [sp, #28]
1318:main.c        ****   {
 1565              		.loc 1 1318 0
 1566 0046 6944     		add	r1, sp, r1
 1567 0048 FFF7FEFF 		bl	HAL_SDRAM_Init
 1568              	.LVL114:
 1569 004c 10B9     		cbnz	r0, .L102
1323:main.c        **** 
 1570              		.loc 1 1323 0
 1571 004e 09B0     		add	sp, sp, #36
 1572              	.LCFI18:
 1573              		.cfi_remember_state
 1574              		.cfi_def_cfa_offset 4
 1575              		@ sp needed
 1576 0050 5DF804FB 		ldr	pc, [sp], #4
 1577              	.L102:
 1578              	.LCFI19:
 1579              		.cfi_restore_state
1320:main.c        ****   }
 1580              		.loc 1 1320 0
 1581 0054 4FF4A561 		mov	r1, #1320
 1582 0058 0348     		ldr	r0, .L103+8
 1583 005a FFF7FEFF 		bl	_Error_Handler
 1584              	.LVL115:
 1585              	.L104:
 1586 005e 00BF     		.align	2
 1587              	.L103:
 1588 0060 00000000 		.word	hsdram1
 1589 0064 400100A0 		.word	-1610612416
 1590 0068 00000000 		.word	.LC17
 1591              		.cfi_endproc
 1592              	.LFE186:
 1594              		.section	.text.MX_I2C1_Init,"ax",%progbits
 1595              		.align	1
 1596              		.syntax unified
 1597              		.thumb
 1598              		.thumb_func
 1599              		.fpu fpv5-sp-d16
 1601              	MX_I2C1_Init:
 1602              	.LFB168:
 588:main.c        **** 
 1603              		.loc 1 588 0
 1604              		.cfi_startproc
 1605              		@ args = 0, pretend = 0, frame = 0
 1606              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 63


 1607 0000 08B5     		push	{r3, lr}
 1608              	.LCFI20:
 1609              		.cfi_def_cfa_offset 8
 1610              		.cfi_offset 3, -8
 1611              		.cfi_offset 14, -4
 590:main.c        ****   hi2c1.Init.Timing = 0x00C0EAFF;
 1612              		.loc 1 590 0
 1613 0002 1548     		ldr	r0, .L113
 1614 0004 154B     		ldr	r3, .L113+4
 1615 0006 0360     		str	r3, [r0]
 591:main.c        ****   hi2c1.Init.OwnAddress1 = 0;
 1616              		.loc 1 591 0
 1617 0008 154B     		ldr	r3, .L113+8
 1618 000a 4360     		str	r3, [r0, #4]
 592:main.c        ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1619              		.loc 1 592 0
 1620 000c 0023     		movs	r3, #0
 1621 000e 8360     		str	r3, [r0, #8]
 593:main.c        ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1622              		.loc 1 593 0
 1623 0010 0122     		movs	r2, #1
 1624 0012 C260     		str	r2, [r0, #12]
 594:main.c        ****   hi2c1.Init.OwnAddress2 = 0;
 1625              		.loc 1 594 0
 1626 0014 0361     		str	r3, [r0, #16]
 595:main.c        ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 1627              		.loc 1 595 0
 1628 0016 4361     		str	r3, [r0, #20]
 596:main.c        ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1629              		.loc 1 596 0
 1630 0018 8361     		str	r3, [r0, #24]
 597:main.c        ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1631              		.loc 1 597 0
 1632 001a C361     		str	r3, [r0, #28]
 598:main.c        ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1633              		.loc 1 598 0
 1634 001c 0362     		str	r3, [r0, #32]
 599:main.c        ****   {
 1635              		.loc 1 599 0
 1636 001e FFF7FEFF 		bl	HAL_I2C_Init
 1637              	.LVL116:
 1638 0022 50B9     		cbnz	r0, .L110
 606:main.c        ****   {
 1639              		.loc 1 606 0
 1640 0024 0021     		movs	r1, #0
 1641 0026 0C48     		ldr	r0, .L113
 1642 0028 FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 1643              	.LVL117:
 1644 002c 50B9     		cbnz	r0, .L111
 613:main.c        ****   {
 1645              		.loc 1 613 0
 1646 002e 0021     		movs	r1, #0
 1647 0030 0948     		ldr	r0, .L113
 1648 0032 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 1649              	.LVL118:
 1650 0036 50B9     		cbnz	r0, .L112
 1651 0038 08BD     		pop	{r3, pc}
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 64


 1652              	.L110:
 601:main.c        ****   }
 1653              		.loc 1 601 0
 1654 003a 40F25921 		movw	r1, #601
 1655 003e 0948     		ldr	r0, .L113+12
 1656 0040 FFF7FEFF 		bl	_Error_Handler
 1657              	.LVL119:
 1658              	.L111:
 608:main.c        ****   }
 1659              		.loc 1 608 0
 1660 0044 4FF41871 		mov	r1, #608
 1661 0048 0648     		ldr	r0, .L113+12
 1662 004a FFF7FEFF 		bl	_Error_Handler
 1663              	.LVL120:
 1664              	.L112:
 615:main.c        ****   }
 1665              		.loc 1 615 0
 1666 004e 40F26721 		movw	r1, #615
 1667 0052 0448     		ldr	r0, .L113+12
 1668 0054 FFF7FEFF 		bl	_Error_Handler
 1669              	.LVL121:
 1670              	.L114:
 1671              		.align	2
 1672              	.L113:
 1673 0058 00000000 		.word	hi2c1
 1674 005c 00540040 		.word	1073763328
 1675 0060 FFEAC000 		.word	12643071
 1676 0064 00000000 		.word	.LC17
 1677              		.cfi_endproc
 1678              	.LFE168:
 1680              		.section	.text.MX_I2C3_Init,"ax",%progbits
 1681              		.align	1
 1682              		.syntax unified
 1683              		.thumb
 1684              		.thumb_func
 1685              		.fpu fpv5-sp-d16
 1687              	MX_I2C3_Init:
 1688              	.LFB169:
 622:main.c        **** 
 1689              		.loc 1 622 0
 1690              		.cfi_startproc
 1691              		@ args = 0, pretend = 0, frame = 0
 1692              		@ frame_needed = 0, uses_anonymous_args = 0
 1693 0000 08B5     		push	{r3, lr}
 1694              	.LCFI21:
 1695              		.cfi_def_cfa_offset 8
 1696              		.cfi_offset 3, -8
 1697              		.cfi_offset 14, -4
 624:main.c        ****   hi2c3.Init.Timing = 0x00C0EAFF;
 1698              		.loc 1 624 0
 1699 0002 1548     		ldr	r0, .L123
 1700 0004 154B     		ldr	r3, .L123+4
 1701 0006 0360     		str	r3, [r0]
 625:main.c        ****   hi2c3.Init.OwnAddress1 = 0;
 1702              		.loc 1 625 0
 1703 0008 154B     		ldr	r3, .L123+8
 1704 000a 4360     		str	r3, [r0, #4]
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 65


 626:main.c        ****   hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1705              		.loc 1 626 0
 1706 000c 0023     		movs	r3, #0
 1707 000e 8360     		str	r3, [r0, #8]
 627:main.c        ****   hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1708              		.loc 1 627 0
 1709 0010 0122     		movs	r2, #1
 1710 0012 C260     		str	r2, [r0, #12]
 628:main.c        ****   hi2c3.Init.OwnAddress2 = 0;
 1711              		.loc 1 628 0
 1712 0014 0361     		str	r3, [r0, #16]
 629:main.c        ****   hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 1713              		.loc 1 629 0
 1714 0016 4361     		str	r3, [r0, #20]
 630:main.c        ****   hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1715              		.loc 1 630 0
 1716 0018 8361     		str	r3, [r0, #24]
 631:main.c        ****   hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1717              		.loc 1 631 0
 1718 001a C361     		str	r3, [r0, #28]
 632:main.c        ****   if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 1719              		.loc 1 632 0
 1720 001c 0362     		str	r3, [r0, #32]
 633:main.c        ****   {
 1721              		.loc 1 633 0
 1722 001e FFF7FEFF 		bl	HAL_I2C_Init
 1723              	.LVL122:
 1724 0022 50B9     		cbnz	r0, .L120
 640:main.c        ****   {
 1725              		.loc 1 640 0
 1726 0024 0021     		movs	r1, #0
 1727 0026 0C48     		ldr	r0, .L123
 1728 0028 FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 1729              	.LVL123:
 1730 002c 50B9     		cbnz	r0, .L121
 647:main.c        ****   {
 1731              		.loc 1 647 0
 1732 002e 0021     		movs	r1, #0
 1733 0030 0948     		ldr	r0, .L123
 1734 0032 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 1735              	.LVL124:
 1736 0036 50B9     		cbnz	r0, .L122
 1737 0038 08BD     		pop	{r3, pc}
 1738              	.L120:
 635:main.c        ****   }
 1739              		.loc 1 635 0
 1740 003a 40F27B21 		movw	r1, #635
 1741 003e 0948     		ldr	r0, .L123+12
 1742 0040 FFF7FEFF 		bl	_Error_Handler
 1743              	.LVL125:
 1744              	.L121:
 642:main.c        ****   }
 1745              		.loc 1 642 0
 1746 0044 40F28221 		movw	r1, #642
 1747 0048 0648     		ldr	r0, .L123+12
 1748 004a FFF7FEFF 		bl	_Error_Handler
 1749              	.LVL126:
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 66


 1750              	.L122:
 649:main.c        ****   }
 1751              		.loc 1 649 0
 1752 004e 40F28921 		movw	r1, #649
 1753 0052 0448     		ldr	r0, .L123+12
 1754 0054 FFF7FEFF 		bl	_Error_Handler
 1755              	.LVL127:
 1756              	.L124:
 1757              		.align	2
 1758              	.L123:
 1759 0058 00000000 		.word	hi2c3
 1760 005c 005C0040 		.word	1073765376
 1761 0060 FFEAC000 		.word	12643071
 1762 0064 00000000 		.word	.LC17
 1763              		.cfi_endproc
 1764              	.LFE169:
 1766              		.section	.text.MX_LTDC_Init,"ax",%progbits
 1767              		.align	1
 1768              		.syntax unified
 1769              		.thumb
 1770              		.thumb_func
 1771              		.fpu fpv5-sp-d16
 1773              	MX_LTDC_Init:
 1774              	.LFB170:
 656:main.c        **** 
 1775              		.loc 1 656 0
 1776              		.cfi_startproc
 1777              		@ args = 0, pretend = 0, frame = 56
 1778              		@ frame_needed = 0, uses_anonymous_args = 0
 1779 0000 00B5     		push	{lr}
 1780              	.LCFI22:
 1781              		.cfi_def_cfa_offset 4
 1782              		.cfi_offset 14, -4
 1783 0002 8FB0     		sub	sp, sp, #60
 1784              	.LCFI23:
 1785              		.cfi_def_cfa_offset 64
 660:main.c        ****   hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 1786              		.loc 1 660 0
 1787 0004 2948     		ldr	r0, .L131
 1788 0006 2A4B     		ldr	r3, .L131+4
 1789 0008 0360     		str	r3, [r0]
 661:main.c        ****   hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 1790              		.loc 1 661 0
 1791 000a 0023     		movs	r3, #0
 1792 000c 4360     		str	r3, [r0, #4]
 662:main.c        ****   hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 1793              		.loc 1 662 0
 1794 000e 8360     		str	r3, [r0, #8]
 663:main.c        ****   hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 1795              		.loc 1 663 0
 1796 0010 C360     		str	r3, [r0, #12]
 664:main.c        ****   hltdc.Init.HorizontalSync = 40;
 1797              		.loc 1 664 0
 1798 0012 0361     		str	r3, [r0, #16]
 665:main.c        ****   hltdc.Init.VerticalSync = 9;
 1799              		.loc 1 665 0
 1800 0014 2822     		movs	r2, #40
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 67


 1801 0016 4261     		str	r2, [r0, #20]
 666:main.c        ****   hltdc.Init.AccumulatedHBP = 53;
 1802              		.loc 1 666 0
 1803 0018 0922     		movs	r2, #9
 1804 001a 8261     		str	r2, [r0, #24]
 667:main.c        ****   hltdc.Init.AccumulatedVBP = 11;
 1805              		.loc 1 667 0
 1806 001c 3522     		movs	r2, #53
 1807 001e C261     		str	r2, [r0, #28]
 668:main.c        ****   hltdc.Init.AccumulatedActiveW = 533;
 1808              		.loc 1 668 0
 1809 0020 0B22     		movs	r2, #11
 1810 0022 0262     		str	r2, [r0, #32]
 669:main.c        ****   hltdc.Init.AccumulatedActiveH = 283;
 1811              		.loc 1 669 0
 1812 0024 40F21522 		movw	r2, #533
 1813 0028 4262     		str	r2, [r0, #36]
 670:main.c        ****   hltdc.Init.TotalWidth = 565;
 1814              		.loc 1 670 0
 1815 002a 40F21B12 		movw	r2, #283
 1816 002e 8262     		str	r2, [r0, #40]
 671:main.c        ****   hltdc.Init.TotalHeigh = 285;
 1817              		.loc 1 671 0
 1818 0030 40F23522 		movw	r2, #565
 1819 0034 C262     		str	r2, [r0, #44]
 672:main.c        ****   hltdc.Init.Backcolor.Blue = 0;
 1820              		.loc 1 672 0
 1821 0036 40F21D12 		movw	r2, #285
 1822 003a 0263     		str	r2, [r0, #48]
 673:main.c        ****   hltdc.Init.Backcolor.Green = 0;
 1823              		.loc 1 673 0
 1824 003c 80F83430 		strb	r3, [r0, #52]
 674:main.c        ****   hltdc.Init.Backcolor.Red = 0;
 1825              		.loc 1 674 0
 1826 0040 80F83530 		strb	r3, [r0, #53]
 675:main.c        ****   if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 1827              		.loc 1 675 0
 1828 0044 80F83630 		strb	r3, [r0, #54]
 676:main.c        ****   {
 1829              		.loc 1 676 0
 1830 0048 FFF7FEFF 		bl	HAL_LTDC_Init
 1831              	.LVL128:
 1832 004c 20BB     		cbnz	r0, .L129
 681:main.c        ****   pLayerCfg.WindowX1 = 480;
 1833              		.loc 1 681 0
 1834 004e 0022     		movs	r2, #0
 1835 0050 0192     		str	r2, [sp, #4]
 682:main.c        ****   pLayerCfg.WindowY0 = 0;
 1836              		.loc 1 682 0
 1837 0052 4FF4F071 		mov	r1, #480
 1838 0056 0291     		str	r1, [sp, #8]
 683:main.c        ****   pLayerCfg.WindowY1 = 272;
 1839              		.loc 1 683 0
 1840 0058 0392     		str	r2, [sp, #12]
 684:main.c        ****   pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 1841              		.loc 1 684 0
 1842 005a 4FF48873 		mov	r3, #272
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 68


 1843 005e 0493     		str	r3, [sp, #16]
 685:main.c        ****   pLayerCfg.Alpha = 255;
 1844              		.loc 1 685 0
 1845 0060 0592     		str	r2, [sp, #20]
 686:main.c        ****   pLayerCfg.Alpha0 = 0;
 1846              		.loc 1 686 0
 1847 0062 FF20     		movs	r0, #255
 1848 0064 0690     		str	r0, [sp, #24]
 687:main.c        ****   pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 1849              		.loc 1 687 0
 1850 0066 0792     		str	r2, [sp, #28]
 688:main.c        ****   pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 1851              		.loc 1 688 0
 1852 0068 4FF4C060 		mov	r0, #1536
 1853 006c 0890     		str	r0, [sp, #32]
 689:main.c        ****   pLayerCfg.FBStartAdress = 0xC0000000;
 1854              		.loc 1 689 0
 1855 006e 0720     		movs	r0, #7
 1856 0070 0990     		str	r0, [sp, #36]
 690:main.c        ****   pLayerCfg.ImageWidth = 480;
 1857              		.loc 1 690 0
 1858 0072 4FF04040 		mov	r0, #-1073741824
 1859 0076 0A90     		str	r0, [sp, #40]
 691:main.c        ****   pLayerCfg.ImageHeight = 272;
 1860              		.loc 1 691 0
 1861 0078 0B91     		str	r1, [sp, #44]
 692:main.c        ****   pLayerCfg.Backcolor.Blue = 0;
 1862              		.loc 1 692 0
 1863 007a 0C93     		str	r3, [sp, #48]
 693:main.c        ****   pLayerCfg.Backcolor.Green = 0;
 1864              		.loc 1 693 0
 1865 007c 8DF83420 		strb	r2, [sp, #52]
 694:main.c        ****   pLayerCfg.Backcolor.Red = 0;
 1866              		.loc 1 694 0
 1867 0080 8DF83520 		strb	r2, [sp, #53]
 695:main.c        ****   if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 1868              		.loc 1 695 0
 1869 0084 8DF83620 		strb	r2, [sp, #54]
 696:main.c        ****   {
 1870              		.loc 1 696 0
 1871 0088 01A9     		add	r1, sp, #4
 1872 008a 0848     		ldr	r0, .L131
 1873 008c FFF7FEFF 		bl	HAL_LTDC_ConfigLayer
 1874              	.LVL129:
 1875 0090 38B9     		cbnz	r0, .L130
 701:main.c        **** 
 1876              		.loc 1 701 0
 1877 0092 0FB0     		add	sp, sp, #60
 1878              	.LCFI24:
 1879              		.cfi_remember_state
 1880              		.cfi_def_cfa_offset 4
 1881              		@ sp needed
 1882 0094 5DF804FB 		ldr	pc, [sp], #4
 1883              	.L129:
 1884              	.LCFI25:
 1885              		.cfi_restore_state
 678:main.c        ****   }
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 69


 1886              		.loc 1 678 0
 1887 0098 40F2A621 		movw	r1, #678
 1888 009c 0548     		ldr	r0, .L131+8
 1889 009e FFF7FEFF 		bl	_Error_Handler
 1890              	.LVL130:
 1891              	.L130:
 698:main.c        ****   }
 1892              		.loc 1 698 0
 1893 00a2 40F2BA21 		movw	r1, #698
 1894 00a6 0348     		ldr	r0, .L131+8
 1895 00a8 FFF7FEFF 		bl	_Error_Handler
 1896              	.LVL131:
 1897              	.L132:
 1898              		.align	2
 1899              	.L131:
 1900 00ac 00000000 		.word	hltdc
 1901 00b0 00680140 		.word	1073833984
 1902 00b4 00000000 		.word	.LC17
 1903              		.cfi_endproc
 1904              	.LFE170:
 1906              		.section	.text.MX_QUADSPI_Init,"ax",%progbits
 1907              		.align	1
 1908              		.syntax unified
 1909              		.thumb
 1910              		.thumb_func
 1911              		.fpu fpv5-sp-d16
 1913              	MX_QUADSPI_Init:
 1914              	.LFB171:
 705:main.c        **** 
 1915              		.loc 1 705 0
 1916              		.cfi_startproc
 1917              		@ args = 0, pretend = 0, frame = 0
 1918              		@ frame_needed = 0, uses_anonymous_args = 0
 1919 0000 08B5     		push	{r3, lr}
 1920              	.LCFI26:
 1921              		.cfi_def_cfa_offset 8
 1922              		.cfi_offset 3, -8
 1923              		.cfi_offset 14, -4
 708:main.c        ****   hqspi.Init.ClockPrescaler = 255;
 1924              		.loc 1 708 0
 1925 0002 0B48     		ldr	r0, .L137
 1926 0004 0B4B     		ldr	r3, .L137+4
 1927 0006 0360     		str	r3, [r0]
 709:main.c        ****   hqspi.Init.FifoThreshold = 1;
 1928              		.loc 1 709 0
 1929 0008 FF23     		movs	r3, #255
 1930 000a 4360     		str	r3, [r0, #4]
 710:main.c        ****   hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 1931              		.loc 1 710 0
 1932 000c 0122     		movs	r2, #1
 1933 000e 8260     		str	r2, [r0, #8]
 711:main.c        ****   hqspi.Init.FlashSize = 1;
 1934              		.loc 1 711 0
 1935 0010 0023     		movs	r3, #0
 1936 0012 C360     		str	r3, [r0, #12]
 712:main.c        ****   hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 1937              		.loc 1 712 0
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 70


 1938 0014 0261     		str	r2, [r0, #16]
 713:main.c        ****   hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 1939              		.loc 1 713 0
 1940 0016 4361     		str	r3, [r0, #20]
 714:main.c        ****   hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 1941              		.loc 1 714 0
 1942 0018 8361     		str	r3, [r0, #24]
 715:main.c        ****   hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 1943              		.loc 1 715 0
 1944 001a C361     		str	r3, [r0, #28]
 716:main.c        ****   if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 1945              		.loc 1 716 0
 1946 001c 0362     		str	r3, [r0, #32]
 717:main.c        ****   {
 1947              		.loc 1 717 0
 1948 001e FFF7FEFF 		bl	HAL_QSPI_Init
 1949              	.LVL132:
 1950 0022 00B9     		cbnz	r0, .L136
 1951 0024 08BD     		pop	{r3, pc}
 1952              	.L136:
 719:main.c        ****   }
 1953              		.loc 1 719 0
 1954 0026 40F2CF21 		movw	r1, #719
 1955 002a 0348     		ldr	r0, .L137+8
 1956 002c FFF7FEFF 		bl	_Error_Handler
 1957              	.LVL133:
 1958              	.L138:
 1959              		.align	2
 1960              	.L137:
 1961 0030 00000000 		.word	hqspi
 1962 0034 001000A0 		.word	-1610608640
 1963 0038 00000000 		.word	.LC17
 1964              		.cfi_endproc
 1965              	.LFE171:
 1967              		.section	.text.MX_RTC_Init,"ax",%progbits
 1968              		.align	1
 1969              		.syntax unified
 1970              		.thumb
 1971              		.thumb_func
 1972              		.fpu fpv5-sp-d16
 1974              	MX_RTC_Init:
 1975              	.LFB172:
 726:main.c        **** 
 1976              		.loc 1 726 0
 1977              		.cfi_startproc
 1978              		@ args = 0, pretend = 0, frame = 72
 1979              		@ frame_needed = 0, uses_anonymous_args = 0
 1980 0000 00B5     		push	{lr}
 1981              	.LCFI27:
 1982              		.cfi_def_cfa_offset 4
 1983              		.cfi_offset 14, -4
 1984 0002 93B0     		sub	sp, sp, #76
 1985              	.LCFI28:
 1986              		.cfi_def_cfa_offset 80
 742:main.c        ****   hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 1987              		.loc 1 742 0
 1988 0004 3C48     		ldr	r0, .L153
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 71


 1989 0006 3D4B     		ldr	r3, .L153+4
 1990 0008 0360     		str	r3, [r0]
 743:main.c        ****   hrtc.Init.AsynchPrediv = 127;
 1991              		.loc 1 743 0
 1992 000a 0023     		movs	r3, #0
 1993 000c 4360     		str	r3, [r0, #4]
 744:main.c        ****   hrtc.Init.SynchPrediv = 255;
 1994              		.loc 1 744 0
 1995 000e 7F22     		movs	r2, #127
 1996 0010 8260     		str	r2, [r0, #8]
 745:main.c        ****   hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 1997              		.loc 1 745 0
 1998 0012 FF22     		movs	r2, #255
 1999 0014 C260     		str	r2, [r0, #12]
 746:main.c        ****   hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 2000              		.loc 1 746 0
 2001 0016 0361     		str	r3, [r0, #16]
 747:main.c        ****   hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 2002              		.loc 1 747 0
 2003 0018 4361     		str	r3, [r0, #20]
 748:main.c        ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 2004              		.loc 1 748 0
 2005 001a 8361     		str	r3, [r0, #24]
 749:main.c        ****   {
 2006              		.loc 1 749 0
 2007 001c FFF7FEFF 		bl	HAL_RTC_Init
 2008              	.LVL134:
 2009 0020 0028     		cmp	r0, #0
 2010 0022 4BD1     		bne	.L147
 756:main.c        ****   sTime.Minutes = 0x0;
 2011              		.loc 1 756 0
 2012 0024 0023     		movs	r3, #0
 2013 0026 8DF83030 		strb	r3, [sp, #48]
 757:main.c        ****   sTime.Seconds = 0x0;
 2014              		.loc 1 757 0
 2015 002a 8DF83130 		strb	r3, [sp, #49]
 758:main.c        ****   sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 2016              		.loc 1 758 0
 2017 002e 8DF83230 		strb	r3, [sp, #50]
 759:main.c        ****   sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 2018              		.loc 1 759 0
 2019 0032 1093     		str	r3, [sp, #64]
 760:main.c        ****   if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 2020              		.loc 1 760 0
 2021 0034 1193     		str	r3, [sp, #68]
 761:main.c        ****   {
 2022              		.loc 1 761 0
 2023 0036 0122     		movs	r2, #1
 2024 0038 0CA9     		add	r1, sp, #48
 2025 003a 2F48     		ldr	r0, .L153
 2026 003c FFF7FEFF 		bl	HAL_RTC_SetTime
 2027              	.LVL135:
 2028 0040 0028     		cmp	r0, #0
 2029 0042 40D1     		bne	.L148
 766:main.c        ****   sDate.Month = RTC_MONTH_JANUARY;
 2030              		.loc 1 766 0
 2031 0044 0122     		movs	r2, #1
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 72


 2032 0046 8DF82C20 		strb	r2, [sp, #44]
 767:main.c        ****   sDate.Date = 0x1;
 2033              		.loc 1 767 0
 2034 004a 8DF82D20 		strb	r2, [sp, #45]
 768:main.c        ****   sDate.Year = 0x0;
 2035              		.loc 1 768 0
 2036 004e 8DF82E20 		strb	r2, [sp, #46]
 769:main.c        **** 
 2037              		.loc 1 769 0
 2038 0052 0023     		movs	r3, #0
 2039 0054 8DF82F30 		strb	r3, [sp, #47]
 771:main.c        ****   {
 2040              		.loc 1 771 0
 2041 0058 0BA9     		add	r1, sp, #44
 2042 005a 2748     		ldr	r0, .L153
 2043 005c FFF7FEFF 		bl	HAL_RTC_SetDate
 2044              	.LVL136:
 2045 0060 0028     		cmp	r0, #0
 2046 0062 35D1     		bne	.L149
 778:main.c        ****   sAlarm.AlarmTime.Minutes = 0x0;
 2047              		.loc 1 778 0
 2048 0064 0023     		movs	r3, #0
 2049 0066 8DF80030 		strb	r3, [sp]
 779:main.c        ****   sAlarm.AlarmTime.Seconds = 0x0;
 2050              		.loc 1 779 0
 2051 006a 8DF80130 		strb	r3, [sp, #1]
 780:main.c        ****   sAlarm.AlarmTime.SubSeconds = 0x0;
 2052              		.loc 1 780 0
 2053 006e 8DF80230 		strb	r3, [sp, #2]
 781:main.c        ****   sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 2054              		.loc 1 781 0
 2055 0072 0193     		str	r3, [sp, #4]
 782:main.c        ****   sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 2056              		.loc 1 782 0
 2057 0074 0493     		str	r3, [sp, #16]
 783:main.c        ****   sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 2058              		.loc 1 783 0
 2059 0076 0593     		str	r3, [sp, #20]
 784:main.c        ****   sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 2060              		.loc 1 784 0
 2061 0078 0693     		str	r3, [sp, #24]
 785:main.c        ****   sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 2062              		.loc 1 785 0
 2063 007a 0793     		str	r3, [sp, #28]
 786:main.c        ****   sAlarm.AlarmDateWeekDay = 0x1;
 2064              		.loc 1 786 0
 2065 007c 0893     		str	r3, [sp, #32]
 787:main.c        ****   sAlarm.Alarm = RTC_ALARM_A;
 2066              		.loc 1 787 0
 2067 007e 0122     		movs	r2, #1
 2068 0080 8DF82420 		strb	r2, [sp, #36]
 788:main.c        ****   if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 2069              		.loc 1 788 0
 2070 0084 4FF48073 		mov	r3, #256
 2071 0088 0A93     		str	r3, [sp, #40]
 789:main.c        ****   {
 2072              		.loc 1 789 0
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 73


 2073 008a 6946     		mov	r1, sp
 2074 008c 1A48     		ldr	r0, .L153
 2075 008e FFF7FEFF 		bl	HAL_RTC_SetAlarm
 2076              	.LVL137:
 2077 0092 10BB     		cbnz	r0, .L150
 796:main.c        ****   sAlarm.Alarm = RTC_ALARM_B;
 2078              		.loc 1 796 0
 2079 0094 0122     		movs	r2, #1
 2080 0096 8DF82420 		strb	r2, [sp, #36]
 797:main.c        ****   if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 2081              		.loc 1 797 0
 2082 009a 4FF40073 		mov	r3, #512
 2083 009e 0A93     		str	r3, [sp, #40]
 798:main.c        ****   {
 2084              		.loc 1 798 0
 2085 00a0 6946     		mov	r1, sp
 2086 00a2 1548     		ldr	r0, .L153
 2087 00a4 FFF7FEFF 		bl	HAL_RTC_SetAlarm
 2088              	.LVL138:
 2089 00a8 E0B9     		cbnz	r0, .L151
 805:main.c        ****   {
 2090              		.loc 1 805 0
 2091 00aa 0222     		movs	r2, #2
 2092 00ac 0021     		movs	r1, #0
 2093 00ae 1248     		ldr	r0, .L153
 2094 00b0 FFF7FEFF 		bl	HAL_RTCEx_SetTimeStamp
 2095              	.LVL139:
 2096 00b4 D8B9     		cbnz	r0, .L152
 810:main.c        **** 
 2097              		.loc 1 810 0
 2098 00b6 13B0     		add	sp, sp, #76
 2099              	.LCFI29:
 2100              		.cfi_remember_state
 2101              		.cfi_def_cfa_offset 4
 2102              		@ sp needed
 2103 00b8 5DF804FB 		ldr	pc, [sp], #4
 2104              	.L147:
 2105              	.LCFI30:
 2106              		.cfi_restore_state
 751:main.c        ****   }
 2107              		.loc 1 751 0
 2108 00bc 40F2EF21 		movw	r1, #751
 2109 00c0 0F48     		ldr	r0, .L153+8
 2110 00c2 FFF7FEFF 		bl	_Error_Handler
 2111              	.LVL140:
 2112              	.L148:
 763:main.c        ****   }
 2113              		.loc 1 763 0
 2114 00c6 40F2FB21 		movw	r1, #763
 2115 00ca 0D48     		ldr	r0, .L153+8
 2116 00cc FFF7FEFF 		bl	_Error_Handler
 2117              	.LVL141:
 2118              	.L149:
 773:main.c        ****   }
 2119              		.loc 1 773 0
 2120 00d0 40F20531 		movw	r1, #773
 2121 00d4 0A48     		ldr	r0, .L153+8
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 74


 2122 00d6 FFF7FEFF 		bl	_Error_Handler
 2123              	.LVL142:
 2124              	.L150:
 791:main.c        ****   }
 2125              		.loc 1 791 0
 2126 00da 40F21731 		movw	r1, #791
 2127 00de 0848     		ldr	r0, .L153+8
 2128 00e0 FFF7FEFF 		bl	_Error_Handler
 2129              	.LVL143:
 2130              	.L151:
 800:main.c        ****   }
 2131              		.loc 1 800 0
 2132 00e4 4FF44871 		mov	r1, #800
 2133 00e8 0548     		ldr	r0, .L153+8
 2134 00ea FFF7FEFF 		bl	_Error_Handler
 2135              	.LVL144:
 2136              	.L152:
 807:main.c        ****   }
 2137              		.loc 1 807 0
 2138 00ee 40F22731 		movw	r1, #807
 2139 00f2 0348     		ldr	r0, .L153+8
 2140 00f4 FFF7FEFF 		bl	_Error_Handler
 2141              	.LVL145:
 2142              	.L154:
 2143              		.align	2
 2144              	.L153:
 2145 00f8 00000000 		.word	hrtc
 2146 00fc 00280040 		.word	1073752064
 2147 0100 00000000 		.word	.LC17
 2148              		.cfi_endproc
 2149              	.LFE172:
 2151              		.section	.text.MX_SAI2_Init,"ax",%progbits
 2152              		.align	1
 2153              		.syntax unified
 2154              		.thumb
 2155              		.thumb_func
 2156              		.fpu fpv5-sp-d16
 2158              	MX_SAI2_Init:
 2159              	.LFB173:
 814:main.c        **** 
 2160              		.loc 1 814 0
 2161              		.cfi_startproc
 2162              		@ args = 0, pretend = 0, frame = 0
 2163              		@ frame_needed = 0, uses_anonymous_args = 0
 2164 0000 08B5     		push	{r3, lr}
 2165              	.LCFI31:
 2166              		.cfi_def_cfa_offset 8
 2167              		.cfi_offset 3, -8
 2168              		.cfi_offset 14, -4
 816:main.c        ****   hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 2169              		.loc 1 816 0
 2170 0002 2648     		ldr	r0, .L161
 2171 0004 264B     		ldr	r3, .L161+4
 2172 0006 0360     		str	r3, [r0]
 817:main.c        ****   hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 2173              		.loc 1 817 0
 2174 0008 0023     		movs	r3, #0
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 75


 2175 000a 0363     		str	r3, [r0, #48]
 818:main.c        ****   hsai_BlockA2.Init.DataSize = SAI_DATASIZE_24;
 2176              		.loc 1 818 0
 2177 000c 4360     		str	r3, [r0, #4]
 819:main.c        ****   hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 2178              		.loc 1 819 0
 2179 000e C022     		movs	r2, #192
 2180 0010 4263     		str	r2, [r0, #52]
 820:main.c        ****   hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 2181              		.loc 1 820 0
 2182 0012 8363     		str	r3, [r0, #56]
 821:main.c        ****   hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 2183              		.loc 1 821 0
 2184 0014 C363     		str	r3, [r0, #60]
 822:main.c        ****   hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 2185              		.loc 1 822 0
 2186 0016 8360     		str	r3, [r0, #8]
 823:main.c        ****   hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 2187              		.loc 1 823 0
 2188 0018 0361     		str	r3, [r0, #16]
 824:main.c        ****   hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 2189              		.loc 1 824 0
 2190 001a 4361     		str	r3, [r0, #20]
 825:main.c        ****   hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 2191              		.loc 1 825 0
 2192 001c 8361     		str	r3, [r0, #24]
 826:main.c        ****   hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 2193              		.loc 1 826 0
 2194 001e 214A     		ldr	r2, .L161+8
 2195 0020 C261     		str	r2, [r0, #28]
 827:main.c        ****   hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 2196              		.loc 1 827 0
 2197 0022 C360     		str	r3, [r0, #12]
 828:main.c        ****   hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 2198              		.loc 1 828 0
 2199 0024 4362     		str	r3, [r0, #36]
 829:main.c        ****   hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 2200              		.loc 1 829 0
 2201 0026 8362     		str	r3, [r0, #40]
 830:main.c        ****   hsai_BlockA2.FrameInit.FrameLength = 8;
 2202              		.loc 1 830 0
 2203 0028 C362     		str	r3, [r0, #44]
 831:main.c        ****   hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 2204              		.loc 1 831 0
 2205 002a 0822     		movs	r2, #8
 2206 002c 0264     		str	r2, [r0, #64]
 832:main.c        ****   hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 2207              		.loc 1 832 0
 2208 002e 0122     		movs	r2, #1
 2209 0030 4264     		str	r2, [r0, #68]
 833:main.c        ****   hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 2210              		.loc 1 833 0
 2211 0032 8364     		str	r3, [r0, #72]
 834:main.c        ****   hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 2212              		.loc 1 834 0
 2213 0034 C364     		str	r3, [r0, #76]
 835:main.c        ****   hsai_BlockA2.SlotInit.FirstBitOffset = 0;
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 76


 2214              		.loc 1 835 0
 2215 0036 0365     		str	r3, [r0, #80]
 836:main.c        ****   hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 2216              		.loc 1 836 0
 2217 0038 4365     		str	r3, [r0, #84]
 837:main.c        ****   hsai_BlockA2.SlotInit.SlotNumber = 1;
 2218              		.loc 1 837 0
 2219 003a 8365     		str	r3, [r0, #88]
 838:main.c        ****   hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 2220              		.loc 1 838 0
 2221 003c C265     		str	r2, [r0, #92]
 839:main.c        ****   if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 2222              		.loc 1 839 0
 2223 003e 0366     		str	r3, [r0, #96]
 840:main.c        ****   {
 2224              		.loc 1 840 0
 2225 0040 FFF7FEFF 		bl	HAL_SAI_Init
 2226              	.LVL146:
 2227 0044 00BB     		cbnz	r0, .L159
 845:main.c        ****   hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 2228              		.loc 1 845 0
 2229 0046 1848     		ldr	r0, .L161+12
 2230 0048 184B     		ldr	r3, .L161+16
 2231 004a 0360     		str	r3, [r0]
 846:main.c        ****   hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 2232              		.loc 1 846 0
 2233 004c 0023     		movs	r3, #0
 2234 004e 0363     		str	r3, [r0, #48]
 847:main.c        ****   hsai_BlockB2.Init.DataSize = SAI_DATASIZE_24;
 2235              		.loc 1 847 0
 2236 0050 0322     		movs	r2, #3
 2237 0052 4260     		str	r2, [r0, #4]
 848:main.c        ****   hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 2238              		.loc 1 848 0
 2239 0054 C022     		movs	r2, #192
 2240 0056 4263     		str	r2, [r0, #52]
 849:main.c        ****   hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 2241              		.loc 1 849 0
 2242 0058 8363     		str	r3, [r0, #56]
 850:main.c        ****   hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 2243              		.loc 1 850 0
 2244 005a C363     		str	r3, [r0, #60]
 851:main.c        ****   hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 2245              		.loc 1 851 0
 2246 005c 0122     		movs	r2, #1
 2247 005e 8260     		str	r2, [r0, #8]
 852:main.c        ****   hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 2248              		.loc 1 852 0
 2249 0060 0361     		str	r3, [r0, #16]
 853:main.c        ****   hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 2250              		.loc 1 853 0
 2251 0062 8361     		str	r3, [r0, #24]
 854:main.c        ****   hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 2252              		.loc 1 854 0
 2253 0064 C360     		str	r3, [r0, #12]
 855:main.c        ****   hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 2254              		.loc 1 855 0
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 77


 2255 0066 4362     		str	r3, [r0, #36]
 856:main.c        ****   hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 2256              		.loc 1 856 0
 2257 0068 8362     		str	r3, [r0, #40]
 857:main.c        ****   hsai_BlockB2.FrameInit.FrameLength = 8;
 2258              		.loc 1 857 0
 2259 006a C362     		str	r3, [r0, #44]
 858:main.c        ****   hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 2260              		.loc 1 858 0
 2261 006c 0821     		movs	r1, #8
 2262 006e 0164     		str	r1, [r0, #64]
 859:main.c        ****   hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 2263              		.loc 1 859 0
 2264 0070 4264     		str	r2, [r0, #68]
 860:main.c        ****   hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 2265              		.loc 1 860 0
 2266 0072 8364     		str	r3, [r0, #72]
 861:main.c        ****   hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 2267              		.loc 1 861 0
 2268 0074 C364     		str	r3, [r0, #76]
 862:main.c        ****   hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 2269              		.loc 1 862 0
 2270 0076 0365     		str	r3, [r0, #80]
 863:main.c        ****   hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 2271              		.loc 1 863 0
 2272 0078 4365     		str	r3, [r0, #84]
 864:main.c        ****   hsai_BlockB2.SlotInit.SlotNumber = 1;
 2273              		.loc 1 864 0
 2274 007a 8365     		str	r3, [r0, #88]
 865:main.c        ****   hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 2275              		.loc 1 865 0
 2276 007c C265     		str	r2, [r0, #92]
 866:main.c        ****   if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 2277              		.loc 1 866 0
 2278 007e 0366     		str	r3, [r0, #96]
 867:main.c        ****   {
 2279              		.loc 1 867 0
 2280 0080 FFF7FEFF 		bl	HAL_SAI_Init
 2281              	.LVL147:
 2282 0084 28B9     		cbnz	r0, .L160
 2283 0086 08BD     		pop	{r3, pc}
 2284              	.L159:
 842:main.c        ****   }
 2285              		.loc 1 842 0
 2286 0088 40F24A31 		movw	r1, #842
 2287 008c 0848     		ldr	r0, .L161+20
 2288 008e FFF7FEFF 		bl	_Error_Handler
 2289              	.LVL148:
 2290              	.L160:
 869:main.c        ****   }
 2291              		.loc 1 869 0
 2292 0092 40F26531 		movw	r1, #869
 2293 0096 0648     		ldr	r0, .L161+20
 2294 0098 FFF7FEFF 		bl	_Error_Handler
 2295              	.LVL149:
 2296              	.L162:
 2297              		.align	2
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 78


 2298              	.L161:
 2299 009c 00000000 		.word	hsai_BlockA2
 2300 00a0 045C0140 		.word	1073830916
 2301 00a4 00EE0200 		.word	192000
 2302 00a8 00000000 		.word	hsai_BlockB2
 2303 00ac 245C0140 		.word	1073830948
 2304 00b0 00000000 		.word	.LC17
 2305              		.cfi_endproc
 2306              	.LFE173:
 2308              		.section	.text.MX_SPDIFRX_Init,"ax",%progbits
 2309              		.align	1
 2310              		.syntax unified
 2311              		.thumb
 2312              		.thumb_func
 2313              		.fpu fpv5-sp-d16
 2315              	MX_SPDIFRX_Init:
 2316              	.LFB175:
 890:main.c        **** 
 2317              		.loc 1 890 0
 2318              		.cfi_startproc
 2319              		@ args = 0, pretend = 0, frame = 0
 2320              		@ frame_needed = 0, uses_anonymous_args = 0
 2321 0000 08B5     		push	{r3, lr}
 2322              	.LCFI32:
 2323              		.cfi_def_cfa_offset 8
 2324              		.cfi_offset 3, -8
 2325              		.cfi_offset 14, -4
 892:main.c        ****   hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 2326              		.loc 1 892 0
 2327 0002 0C48     		ldr	r0, .L167
 2328 0004 4FF04023 		mov	r3, #1073758208
 2329 0008 0360     		str	r3, [r0]
 893:main.c        ****   hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 2330              		.loc 1 893 0
 2331 000a 0023     		movs	r3, #0
 2332 000c 4360     		str	r3, [r0, #4]
 894:main.c        ****   hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 2333              		.loc 1 894 0
 2334 000e 8360     		str	r3, [r0, #8]
 895:main.c        ****   hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 2335              		.loc 1 895 0
 2336 0010 C360     		str	r3, [r0, #12]
 896:main.c        ****   hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 2337              		.loc 1 896 0
 2338 0012 0361     		str	r3, [r0, #16]
 897:main.c        ****   hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 2339              		.loc 1 897 0
 2340 0014 4361     		str	r3, [r0, #20]
 898:main.c        ****   hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 2341              		.loc 1 898 0
 2342 0016 8361     		str	r3, [r0, #24]
 899:main.c        ****   hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 2343              		.loc 1 899 0
 2344 0018 C361     		str	r3, [r0, #28]
 900:main.c        ****   hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 2345              		.loc 1 900 0
 2346 001a 0362     		str	r3, [r0, #32]
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 79


 901:main.c        ****   hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 2347              		.loc 1 901 0
 2348 001c 4362     		str	r3, [r0, #36]
 902:main.c        ****   if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 2349              		.loc 1 902 0
 2350 001e 8362     		str	r3, [r0, #40]
 903:main.c        ****   {
 2351              		.loc 1 903 0
 2352 0020 FFF7FEFF 		bl	HAL_SPDIFRX_Init
 2353              	.LVL150:
 2354 0024 00B9     		cbnz	r0, .L166
 2355 0026 08BD     		pop	{r3, pc}
 2356              	.L166:
 905:main.c        ****   }
 2357              		.loc 1 905 0
 2358 0028 40F28931 		movw	r1, #905
 2359 002c 0248     		ldr	r0, .L167+4
 2360 002e FFF7FEFF 		bl	_Error_Handler
 2361              	.LVL151:
 2362              	.L168:
 2363 0032 00BF     		.align	2
 2364              	.L167:
 2365 0034 00000000 		.word	hspdif
 2366 0038 00000000 		.word	.LC17
 2367              		.cfi_endproc
 2368              	.LFE175:
 2370              		.section	.text.MX_SPI2_Init,"ax",%progbits
 2371              		.align	1
 2372              		.syntax unified
 2373              		.thumb
 2374              		.thumb_func
 2375              		.fpu fpv5-sp-d16
 2377              	MX_SPI2_Init:
 2378              	.LFB176:
 912:main.c        **** 
 2379              		.loc 1 912 0
 2380              		.cfi_startproc
 2381              		@ args = 0, pretend = 0, frame = 0
 2382              		@ frame_needed = 0, uses_anonymous_args = 0
 2383 0000 08B5     		push	{r3, lr}
 2384              	.LCFI33:
 2385              		.cfi_def_cfa_offset 8
 2386              		.cfi_offset 3, -8
 2387              		.cfi_offset 14, -4
 915:main.c        ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 2388              		.loc 1 915 0
 2389 0002 1148     		ldr	r0, .L173
 2390 0004 114B     		ldr	r3, .L173+4
 2391 0006 0360     		str	r3, [r0]
 916:main.c        ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 2392              		.loc 1 916 0
 2393 0008 4FF48273 		mov	r3, #260
 2394 000c 4360     		str	r3, [r0, #4]
 917:main.c        ****   hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 2395              		.loc 1 917 0
 2396 000e 0023     		movs	r3, #0
 2397 0010 8360     		str	r3, [r0, #8]
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 80


 918:main.c        ****   hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 2398              		.loc 1 918 0
 2399 0012 4FF44072 		mov	r2, #768
 2400 0016 C260     		str	r2, [r0, #12]
 919:main.c        ****   hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 2401              		.loc 1 919 0
 2402 0018 0361     		str	r3, [r0, #16]
 920:main.c        ****   hspi2.Init.NSS = SPI_NSS_SOFT;
 2403              		.loc 1 920 0
 2404 001a 4361     		str	r3, [r0, #20]
 921:main.c        ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 2405              		.loc 1 921 0
 2406 001c 4FF40072 		mov	r2, #512
 2407 0020 8261     		str	r2, [r0, #24]
 922:main.c        ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 2408              		.loc 1 922 0
 2409 0022 C361     		str	r3, [r0, #28]
 923:main.c        ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 2410              		.loc 1 923 0
 2411 0024 0362     		str	r3, [r0, #32]
 924:main.c        ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 2412              		.loc 1 924 0
 2413 0026 4362     		str	r3, [r0, #36]
 925:main.c        ****   hspi2.Init.CRCPolynomial = 7;
 2414              		.loc 1 925 0
 2415 0028 8362     		str	r3, [r0, #40]
 926:main.c        ****   hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 2416              		.loc 1 926 0
 2417 002a 0722     		movs	r2, #7
 2418 002c C262     		str	r2, [r0, #44]
 927:main.c        ****   hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 2419              		.loc 1 927 0
 2420 002e 0363     		str	r3, [r0, #48]
 928:main.c        ****   if (HAL_SPI_Init(&hspi2) != HAL_OK)
 2421              		.loc 1 928 0
 2422 0030 0823     		movs	r3, #8
 2423 0032 4363     		str	r3, [r0, #52]
 929:main.c        ****   {
 2424              		.loc 1 929 0
 2425 0034 FFF7FEFF 		bl	HAL_SPI_Init
 2426              	.LVL152:
 2427 0038 00B9     		cbnz	r0, .L172
 2428 003a 08BD     		pop	{r3, pc}
 2429              	.L172:
 931:main.c        ****   }
 2430              		.loc 1 931 0
 2431 003c 40F2A331 		movw	r1, #931
 2432 0040 0348     		ldr	r0, .L173+8
 2433 0042 FFF7FEFF 		bl	_Error_Handler
 2434              	.LVL153:
 2435              	.L174:
 2436 0046 00BF     		.align	2
 2437              	.L173:
 2438 0048 00000000 		.word	hspi2
 2439 004c 00380040 		.word	1073756160
 2440 0050 00000000 		.word	.LC17
 2441              		.cfi_endproc
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 81


 2442              	.LFE176:
 2444              		.section	.text.MX_TIM1_Init,"ax",%progbits
 2445              		.align	1
 2446              		.syntax unified
 2447              		.thumb
 2448              		.thumb_func
 2449              		.fpu fpv5-sp-d16
 2451              	MX_TIM1_Init:
 2452              	.LFB177:
 938:main.c        **** 
 2453              		.loc 1 938 0
 2454              		.cfi_startproc
 2455              		@ args = 0, pretend = 0, frame = 104
 2456              		@ frame_needed = 0, uses_anonymous_args = 0
 2457 0000 00B5     		push	{lr}
 2458              	.LCFI34:
 2459              		.cfi_def_cfa_offset 4
 2460              		.cfi_offset 14, -4
 2461 0002 9BB0     		sub	sp, sp, #108
 2462              	.LCFI35:
 2463              		.cfi_def_cfa_offset 112
 945:main.c        ****   htim1.Init.Prescaler = 0;
 2464              		.loc 1 945 0
 2465 0004 3748     		ldr	r0, .L189
 2466 0006 384B     		ldr	r3, .L189+4
 2467 0008 0360     		str	r3, [r0]
 946:main.c        ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 2468              		.loc 1 946 0
 2469 000a 0023     		movs	r3, #0
 2470 000c 4360     		str	r3, [r0, #4]
 947:main.c        ****   htim1.Init.Period = 0;
 2471              		.loc 1 947 0
 2472 000e 8360     		str	r3, [r0, #8]
 948:main.c        ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2473              		.loc 1 948 0
 2474 0010 C360     		str	r3, [r0, #12]
 949:main.c        ****   htim1.Init.RepetitionCounter = 0;
 2475              		.loc 1 949 0
 2476 0012 0361     		str	r3, [r0, #16]
 950:main.c        ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2477              		.loc 1 950 0
 2478 0014 4361     		str	r3, [r0, #20]
 951:main.c        ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 2479              		.loc 1 951 0
 2480 0016 8361     		str	r3, [r0, #24]
 952:main.c        ****   {
 2481              		.loc 1 952 0
 2482 0018 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2483              	.LVL154:
 2484 001c 0028     		cmp	r0, #0
 2485 001e 42D1     		bne	.L183
 957:main.c        ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 2486              		.loc 1 957 0
 2487 0020 1AA9     		add	r1, sp, #104
 2488 0022 4FF48053 		mov	r3, #4096
 2489 0026 41F8103D 		str	r3, [r1, #-16]!
 958:main.c        ****   {
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 82


 2490              		.loc 1 958 0
 2491 002a 2E48     		ldr	r0, .L189
 2492 002c FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 2493              	.LVL155:
 2494 0030 0028     		cmp	r0, #0
 2495 0032 3DD1     		bne	.L184
 963:main.c        ****   {
 2496              		.loc 1 963 0
 2497 0034 2B48     		ldr	r0, .L189
 2498 0036 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 2499              	.LVL156:
 2500 003a 0028     		cmp	r0, #0
 2501 003c 3DD1     		bne	.L185
 968:main.c        ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 2502              		.loc 1 968 0
 2503 003e 0023     		movs	r3, #0
 2504 0040 1393     		str	r3, [sp, #76]
 969:main.c        ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2505              		.loc 1 969 0
 2506 0042 1493     		str	r3, [sp, #80]
 970:main.c        ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 2507              		.loc 1 970 0
 2508 0044 1593     		str	r3, [sp, #84]
 971:main.c        ****   {
 2509              		.loc 1 971 0
 2510 0046 13A9     		add	r1, sp, #76
 2511 0048 2648     		ldr	r0, .L189
 2512 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2513              	.LVL157:
 2514 004e 0028     		cmp	r0, #0
 2515 0050 38D1     		bne	.L186
 976:main.c        ****   sConfigOC.Pulse = 0;
 2516              		.loc 1 976 0
 2517 0052 6023     		movs	r3, #96
 2518 0054 0C93     		str	r3, [sp, #48]
 977:main.c        ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 2519              		.loc 1 977 0
 2520 0056 0022     		movs	r2, #0
 2521 0058 0D92     		str	r2, [sp, #52]
 978:main.c        ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 2522              		.loc 1 978 0
 2523 005a 0E92     		str	r2, [sp, #56]
 979:main.c        ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 2524              		.loc 1 979 0
 2525 005c 0F92     		str	r2, [sp, #60]
 980:main.c        ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 2526              		.loc 1 980 0
 2527 005e 1092     		str	r2, [sp, #64]
 981:main.c        ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 2528              		.loc 1 981 0
 2529 0060 1192     		str	r2, [sp, #68]
 982:main.c        ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 2530              		.loc 1 982 0
 2531 0062 1292     		str	r2, [sp, #72]
 983:main.c        ****   {
 2532              		.loc 1 983 0
 2533 0064 0CA9     		add	r1, sp, #48
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 83


 2534 0066 1F48     		ldr	r0, .L189
 2535 0068 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 2536              	.LVL158:
 2537 006c 0028     		cmp	r0, #0
 2538 006e 2ED1     		bne	.L187
 988:main.c        ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 2539              		.loc 1 988 0
 2540 0070 0023     		movs	r3, #0
 2541 0072 0193     		str	r3, [sp, #4]
 989:main.c        ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 2542              		.loc 1 989 0
 2543 0074 0293     		str	r3, [sp, #8]
 990:main.c        ****   sBreakDeadTimeConfig.DeadTime = 0;
 2544              		.loc 1 990 0
 2545 0076 0393     		str	r3, [sp, #12]
 991:main.c        ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 2546              		.loc 1 991 0
 2547 0078 0493     		str	r3, [sp, #16]
 992:main.c        ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 2548              		.loc 1 992 0
 2549 007a 0593     		str	r3, [sp, #20]
 993:main.c        ****   sBreakDeadTimeConfig.BreakFilter = 0;
 2550              		.loc 1 993 0
 2551 007c 4FF40052 		mov	r2, #8192
 2552 0080 0692     		str	r2, [sp, #24]
 994:main.c        ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 2553              		.loc 1 994 0
 2554 0082 0793     		str	r3, [sp, #28]
 995:main.c        ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 2555              		.loc 1 995 0
 2556 0084 0893     		str	r3, [sp, #32]
 996:main.c        ****   sBreakDeadTimeConfig.Break2Filter = 0;
 2557              		.loc 1 996 0
 2558 0086 4FF00072 		mov	r2, #33554432
 2559 008a 0992     		str	r2, [sp, #36]
 997:main.c        ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 2560              		.loc 1 997 0
 2561 008c 0A93     		str	r3, [sp, #40]
 998:main.c        ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 2562              		.loc 1 998 0
 2563 008e 0B93     		str	r3, [sp, #44]
 999:main.c        ****   {
 2564              		.loc 1 999 0
 2565 0090 01A9     		add	r1, sp, #4
 2566 0092 1448     		ldr	r0, .L189
 2567 0094 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 2568              	.LVL159:
 2569 0098 F0B9     		cbnz	r0, .L188
1004:main.c        **** 
 2570              		.loc 1 1004 0
 2571 009a 1248     		ldr	r0, .L189
 2572 009c FFF7FEFF 		bl	HAL_TIM_MspPostInit
 2573              	.LVL160:
1006:main.c        **** 
 2574              		.loc 1 1006 0
 2575 00a0 1BB0     		add	sp, sp, #108
 2576              	.LCFI36:
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 84


 2577              		.cfi_remember_state
 2578              		.cfi_def_cfa_offset 4
 2579              		@ sp needed
 2580 00a2 5DF804FB 		ldr	pc, [sp], #4
 2581              	.L183:
 2582              	.LCFI37:
 2583              		.cfi_restore_state
 954:main.c        ****   }
 2584              		.loc 1 954 0
 2585 00a6 40F2BA31 		movw	r1, #954
 2586 00aa 1048     		ldr	r0, .L189+8
 2587 00ac FFF7FEFF 		bl	_Error_Handler
 2588              	.LVL161:
 2589              	.L184:
 960:main.c        ****   }
 2590              		.loc 1 960 0
 2591 00b0 4FF47071 		mov	r1, #960
 2592 00b4 0D48     		ldr	r0, .L189+8
 2593 00b6 FFF7FEFF 		bl	_Error_Handler
 2594              	.LVL162:
 2595              	.L185:
 965:main.c        ****   }
 2596              		.loc 1 965 0
 2597 00ba 40F2C531 		movw	r1, #965
 2598 00be 0B48     		ldr	r0, .L189+8
 2599 00c0 FFF7FEFF 		bl	_Error_Handler
 2600              	.LVL163:
 2601              	.L186:
 973:main.c        ****   }
 2602              		.loc 1 973 0
 2603 00c4 40F2CD31 		movw	r1, #973
 2604 00c8 0848     		ldr	r0, .L189+8
 2605 00ca FFF7FEFF 		bl	_Error_Handler
 2606              	.LVL164:
 2607              	.L187:
 985:main.c        ****   }
 2608              		.loc 1 985 0
 2609 00ce 40F2D931 		movw	r1, #985
 2610 00d2 0648     		ldr	r0, .L189+8
 2611 00d4 FFF7FEFF 		bl	_Error_Handler
 2612              	.LVL165:
 2613              	.L188:
1001:main.c        ****   }
 2614              		.loc 1 1001 0
 2615 00d8 40F2E931 		movw	r1, #1001
 2616 00dc 0348     		ldr	r0, .L189+8
 2617 00de FFF7FEFF 		bl	_Error_Handler
 2618              	.LVL166:
 2619              	.L190:
 2620 00e2 00BF     		.align	2
 2621              	.L189:
 2622 00e4 00000000 		.word	htim1
 2623 00e8 00000140 		.word	1073807360
 2624 00ec 00000000 		.word	.LC17
 2625              		.cfi_endproc
 2626              	.LFE177:
 2628              		.section	.text.MX_TIM2_Init,"ax",%progbits
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 85


 2629              		.align	1
 2630              		.syntax unified
 2631              		.thumb
 2632              		.thumb_func
 2633              		.fpu fpv5-sp-d16
 2635              	MX_TIM2_Init:
 2636              	.LFB178:
1010:main.c        **** 
 2637              		.loc 1 1010 0
 2638              		.cfi_startproc
 2639              		@ args = 0, pretend = 0, frame = 56
 2640              		@ frame_needed = 0, uses_anonymous_args = 0
 2641 0000 00B5     		push	{lr}
 2642              	.LCFI38:
 2643              		.cfi_def_cfa_offset 4
 2644              		.cfi_offset 14, -4
 2645 0002 8FB0     		sub	sp, sp, #60
 2646              	.LCFI39:
 2647              		.cfi_def_cfa_offset 64
1016:main.c        ****   htim2.Init.Prescaler = 0;
 2648              		.loc 1 1016 0
 2649 0004 2548     		ldr	r0, .L203
 2650 0006 4FF08043 		mov	r3, #1073741824
 2651 000a 0360     		str	r3, [r0]
1017:main.c        ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 2652              		.loc 1 1017 0
 2653 000c 0023     		movs	r3, #0
 2654 000e 4360     		str	r3, [r0, #4]
1018:main.c        ****   htim2.Init.Period = 0;
 2655              		.loc 1 1018 0
 2656 0010 8360     		str	r3, [r0, #8]
1019:main.c        ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2657              		.loc 1 1019 0
 2658 0012 C360     		str	r3, [r0, #12]
1020:main.c        ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2659              		.loc 1 1020 0
 2660 0014 0361     		str	r3, [r0, #16]
1021:main.c        ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 2661              		.loc 1 1021 0
 2662 0016 8361     		str	r3, [r0, #24]
1022:main.c        ****   {
 2663              		.loc 1 1022 0
 2664 0018 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2665              	.LVL167:
 2666 001c 28BB     		cbnz	r0, .L198
1027:main.c        ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 2667              		.loc 1 1027 0
 2668 001e 0EA9     		add	r1, sp, #56
 2669 0020 4FF48053 		mov	r3, #4096
 2670 0024 41F8103D 		str	r3, [r1, #-16]!
1028:main.c        ****   {
 2671              		.loc 1 1028 0
 2672 0028 1C48     		ldr	r0, .L203
 2673 002a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 2674              	.LVL168:
 2675 002e 08BB     		cbnz	r0, .L199
1033:main.c        ****   {
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 86


 2676              		.loc 1 1033 0
 2677 0030 1A48     		ldr	r0, .L203
 2678 0032 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 2679              	.LVL169:
 2680 0036 10BB     		cbnz	r0, .L200
1038:main.c        ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2681              		.loc 1 1038 0
 2682 0038 0023     		movs	r3, #0
 2683 003a 0793     		str	r3, [sp, #28]
1039:main.c        ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 2684              		.loc 1 1039 0
 2685 003c 0993     		str	r3, [sp, #36]
1040:main.c        ****   {
 2686              		.loc 1 1040 0
 2687 003e 07A9     		add	r1, sp, #28
 2688 0040 1648     		ldr	r0, .L203
 2689 0042 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2690              	.LVL170:
 2691 0046 F8B9     		cbnz	r0, .L201
1045:main.c        ****   sConfigOC.Pulse = 0;
 2692              		.loc 1 1045 0
 2693 0048 6023     		movs	r3, #96
 2694 004a 0093     		str	r3, [sp]
1046:main.c        ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 2695              		.loc 1 1046 0
 2696 004c 0022     		movs	r2, #0
 2697 004e 0192     		str	r2, [sp, #4]
1047:main.c        ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 2698              		.loc 1 1047 0
 2699 0050 0292     		str	r2, [sp, #8]
1048:main.c        ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 2700              		.loc 1 1048 0
 2701 0052 0492     		str	r2, [sp, #16]
1049:main.c        ****   {
 2702              		.loc 1 1049 0
 2703 0054 6946     		mov	r1, sp
 2704 0056 1148     		ldr	r0, .L203
 2705 0058 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 2706              	.LVL171:
 2707 005c C8B9     		cbnz	r0, .L202
1054:main.c        **** 
 2708              		.loc 1 1054 0
 2709 005e 0F48     		ldr	r0, .L203
 2710 0060 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 2711              	.LVL172:
1056:main.c        **** 
 2712              		.loc 1 1056 0
 2713 0064 0FB0     		add	sp, sp, #60
 2714              	.LCFI40:
 2715              		.cfi_remember_state
 2716              		.cfi_def_cfa_offset 4
 2717              		@ sp needed
 2718 0066 5DF804FB 		ldr	pc, [sp], #4
 2719              	.L198:
 2720              	.LCFI41:
 2721              		.cfi_restore_state
1024:main.c        ****   }
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 87


 2722              		.loc 1 1024 0
 2723 006a 4FF48061 		mov	r1, #1024
 2724 006e 0C48     		ldr	r0, .L203+4
 2725 0070 FFF7FEFF 		bl	_Error_Handler
 2726              	.LVL173:
 2727              	.L199:
1030:main.c        ****   }
 2728              		.loc 1 1030 0
 2729 0074 40F20641 		movw	r1, #1030
 2730 0078 0948     		ldr	r0, .L203+4
 2731 007a FFF7FEFF 		bl	_Error_Handler
 2732              	.LVL174:
 2733              	.L200:
1035:main.c        ****   }
 2734              		.loc 1 1035 0
 2735 007e 40F20B41 		movw	r1, #1035
 2736 0082 0748     		ldr	r0, .L203+4
 2737 0084 FFF7FEFF 		bl	_Error_Handler
 2738              	.LVL175:
 2739              	.L201:
1042:main.c        ****   }
 2740              		.loc 1 1042 0
 2741 0088 40F21241 		movw	r1, #1042
 2742 008c 0448     		ldr	r0, .L203+4
 2743 008e FFF7FEFF 		bl	_Error_Handler
 2744              	.LVL176:
 2745              	.L202:
1051:main.c        ****   }
 2746              		.loc 1 1051 0
 2747 0092 40F21B41 		movw	r1, #1051
 2748 0096 0248     		ldr	r0, .L203+4
 2749 0098 FFF7FEFF 		bl	_Error_Handler
 2750              	.LVL177:
 2751              	.L204:
 2752              		.align	2
 2753              	.L203:
 2754 009c 00000000 		.word	htim2
 2755 00a0 00000000 		.word	.LC17
 2756              		.cfi_endproc
 2757              	.LFE178:
 2759              		.section	.text.MX_TIM3_Init,"ax",%progbits
 2760              		.align	1
 2761              		.syntax unified
 2762              		.thumb
 2763              		.thumb_func
 2764              		.fpu fpv5-sp-d16
 2766              	MX_TIM3_Init:
 2767              	.LFB179:
1060:main.c        **** 
 2768              		.loc 1 1060 0
 2769              		.cfi_startproc
 2770              		@ args = 0, pretend = 0, frame = 56
 2771              		@ frame_needed = 0, uses_anonymous_args = 0
 2772 0000 00B5     		push	{lr}
 2773              	.LCFI42:
 2774              		.cfi_def_cfa_offset 4
 2775              		.cfi_offset 14, -4
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 88


 2776 0002 8FB0     		sub	sp, sp, #60
 2777              	.LCFI43:
 2778              		.cfi_def_cfa_offset 64
1066:main.c        ****   htim3.Init.Prescaler = 0;
 2779              		.loc 1 1066 0
 2780 0004 2548     		ldr	r0, .L217
 2781 0006 264B     		ldr	r3, .L217+4
 2782 0008 0360     		str	r3, [r0]
1067:main.c        ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 2783              		.loc 1 1067 0
 2784 000a 0023     		movs	r3, #0
 2785 000c 4360     		str	r3, [r0, #4]
1068:main.c        ****   htim3.Init.Period = 0;
 2786              		.loc 1 1068 0
 2787 000e 8360     		str	r3, [r0, #8]
1069:main.c        ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2788              		.loc 1 1069 0
 2789 0010 C360     		str	r3, [r0, #12]
1070:main.c        ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2790              		.loc 1 1070 0
 2791 0012 0361     		str	r3, [r0, #16]
1071:main.c        ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 2792              		.loc 1 1071 0
 2793 0014 8361     		str	r3, [r0, #24]
1072:main.c        ****   {
 2794              		.loc 1 1072 0
 2795 0016 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2796              	.LVL178:
 2797 001a 28BB     		cbnz	r0, .L212
1077:main.c        ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 2798              		.loc 1 1077 0
 2799 001c 0EA9     		add	r1, sp, #56
 2800 001e 4FF48053 		mov	r3, #4096
 2801 0022 41F8103D 		str	r3, [r1, #-16]!
1078:main.c        ****   {
 2802              		.loc 1 1078 0
 2803 0026 1D48     		ldr	r0, .L217
 2804 0028 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 2805              	.LVL179:
 2806 002c 08BB     		cbnz	r0, .L213
1083:main.c        ****   {
 2807              		.loc 1 1083 0
 2808 002e 1B48     		ldr	r0, .L217
 2809 0030 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 2810              	.LVL180:
 2811 0034 10BB     		cbnz	r0, .L214
1088:main.c        ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2812              		.loc 1 1088 0
 2813 0036 0023     		movs	r3, #0
 2814 0038 0793     		str	r3, [sp, #28]
1089:main.c        ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 2815              		.loc 1 1089 0
 2816 003a 0993     		str	r3, [sp, #36]
1090:main.c        ****   {
 2817              		.loc 1 1090 0
 2818 003c 07A9     		add	r1, sp, #28
 2819 003e 1748     		ldr	r0, .L217
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 89


 2820 0040 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2821              	.LVL181:
 2822 0044 F8B9     		cbnz	r0, .L215
1095:main.c        ****   sConfigOC.Pulse = 0;
 2823              		.loc 1 1095 0
 2824 0046 6023     		movs	r3, #96
 2825 0048 0093     		str	r3, [sp]
1096:main.c        ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 2826              		.loc 1 1096 0
 2827 004a 0022     		movs	r2, #0
 2828 004c 0192     		str	r2, [sp, #4]
1097:main.c        ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 2829              		.loc 1 1097 0
 2830 004e 0292     		str	r2, [sp, #8]
1098:main.c        ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 2831              		.loc 1 1098 0
 2832 0050 0492     		str	r2, [sp, #16]
1099:main.c        ****   {
 2833              		.loc 1 1099 0
 2834 0052 6946     		mov	r1, sp
 2835 0054 1148     		ldr	r0, .L217
 2836 0056 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 2837              	.LVL182:
 2838 005a C8B9     		cbnz	r0, .L216
1104:main.c        **** 
 2839              		.loc 1 1104 0
 2840 005c 0F48     		ldr	r0, .L217
 2841 005e FFF7FEFF 		bl	HAL_TIM_MspPostInit
 2842              	.LVL183:
1106:main.c        **** 
 2843              		.loc 1 1106 0
 2844 0062 0FB0     		add	sp, sp, #60
 2845              	.LCFI44:
 2846              		.cfi_remember_state
 2847              		.cfi_def_cfa_offset 4
 2848              		@ sp needed
 2849 0064 5DF804FB 		ldr	pc, [sp], #4
 2850              	.L212:
 2851              	.LCFI45:
 2852              		.cfi_restore_state
1074:main.c        ****   }
 2853              		.loc 1 1074 0
 2854 0068 40F23241 		movw	r1, #1074
 2855 006c 0D48     		ldr	r0, .L217+8
 2856 006e FFF7FEFF 		bl	_Error_Handler
 2857              	.LVL184:
 2858              	.L213:
1080:main.c        ****   }
 2859              		.loc 1 1080 0
 2860 0072 4FF48761 		mov	r1, #1080
 2861 0076 0B48     		ldr	r0, .L217+8
 2862 0078 FFF7FEFF 		bl	_Error_Handler
 2863              	.LVL185:
 2864              	.L214:
1085:main.c        ****   }
 2865              		.loc 1 1085 0
 2866 007c 40F23D41 		movw	r1, #1085
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 90


 2867 0080 0848     		ldr	r0, .L217+8
 2868 0082 FFF7FEFF 		bl	_Error_Handler
 2869              	.LVL186:
 2870              	.L215:
1092:main.c        ****   }
 2871              		.loc 1 1092 0
 2872 0086 40F24441 		movw	r1, #1092
 2873 008a 0648     		ldr	r0, .L217+8
 2874 008c FFF7FEFF 		bl	_Error_Handler
 2875              	.LVL187:
 2876              	.L216:
1101:main.c        ****   }
 2877              		.loc 1 1101 0
 2878 0090 40F24D41 		movw	r1, #1101
 2879 0094 0348     		ldr	r0, .L217+8
 2880 0096 FFF7FEFF 		bl	_Error_Handler
 2881              	.LVL188:
 2882              	.L218:
 2883 009a 00BF     		.align	2
 2884              	.L217:
 2885 009c 00000000 		.word	htim3
 2886 00a0 00040040 		.word	1073742848
 2887 00a4 00000000 		.word	.LC17
 2888              		.cfi_endproc
 2889              	.LFE179:
 2891              		.section	.text.MX_TIM5_Init,"ax",%progbits
 2892              		.align	1
 2893              		.syntax unified
 2894              		.thumb
 2895              		.thumb_func
 2896              		.fpu fpv5-sp-d16
 2898              	MX_TIM5_Init:
 2899              	.LFB180:
1110:main.c        **** 
 2900              		.loc 1 1110 0
 2901              		.cfi_startproc
 2902              		@ args = 0, pretend = 0, frame = 56
 2903              		@ frame_needed = 0, uses_anonymous_args = 0
 2904 0000 00B5     		push	{lr}
 2905              	.LCFI46:
 2906              		.cfi_def_cfa_offset 4
 2907              		.cfi_offset 14, -4
 2908 0002 8FB0     		sub	sp, sp, #60
 2909              	.LCFI47:
 2910              		.cfi_def_cfa_offset 64
1116:main.c        ****   htim5.Init.Prescaler = 0;
 2911              		.loc 1 1116 0
 2912 0004 2548     		ldr	r0, .L231
 2913 0006 264B     		ldr	r3, .L231+4
 2914 0008 0360     		str	r3, [r0]
1117:main.c        ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 2915              		.loc 1 1117 0
 2916 000a 0023     		movs	r3, #0
 2917 000c 4360     		str	r3, [r0, #4]
1118:main.c        ****   htim5.Init.Period = 0;
 2918              		.loc 1 1118 0
 2919 000e 8360     		str	r3, [r0, #8]
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 91


1119:main.c        ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2920              		.loc 1 1119 0
 2921 0010 C360     		str	r3, [r0, #12]
1120:main.c        ****   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2922              		.loc 1 1120 0
 2923 0012 0361     		str	r3, [r0, #16]
1121:main.c        ****   if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 2924              		.loc 1 1121 0
 2925 0014 8361     		str	r3, [r0, #24]
1122:main.c        ****   {
 2926              		.loc 1 1122 0
 2927 0016 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2928              	.LVL189:
 2929 001a 30BB     		cbnz	r0, .L226
1127:main.c        ****   if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 2930              		.loc 1 1127 0
 2931 001c 0EA9     		add	r1, sp, #56
 2932 001e 4FF48053 		mov	r3, #4096
 2933 0022 41F8103D 		str	r3, [r1, #-16]!
1128:main.c        ****   {
 2934              		.loc 1 1128 0
 2935 0026 1D48     		ldr	r0, .L231
 2936 0028 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 2937              	.LVL190:
 2938 002c 10BB     		cbnz	r0, .L227
1133:main.c        ****   {
 2939              		.loc 1 1133 0
 2940 002e 1B48     		ldr	r0, .L231
 2941 0030 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 2942              	.LVL191:
 2943 0034 18BB     		cbnz	r0, .L228
1138:main.c        ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2944              		.loc 1 1138 0
 2945 0036 0023     		movs	r3, #0
 2946 0038 0793     		str	r3, [sp, #28]
1139:main.c        ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 2947              		.loc 1 1139 0
 2948 003a 0993     		str	r3, [sp, #36]
1140:main.c        ****   {
 2949              		.loc 1 1140 0
 2950 003c 07A9     		add	r1, sp, #28
 2951 003e 1748     		ldr	r0, .L231
 2952 0040 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2953              	.LVL192:
 2954 0044 00BB     		cbnz	r0, .L229
1145:main.c        ****   sConfigOC.Pulse = 0;
 2955              		.loc 1 1145 0
 2956 0046 6023     		movs	r3, #96
 2957 0048 0093     		str	r3, [sp]
1146:main.c        ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 2958              		.loc 1 1146 0
 2959 004a 0023     		movs	r3, #0
 2960 004c 0193     		str	r3, [sp, #4]
1147:main.c        ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 2961              		.loc 1 1147 0
 2962 004e 0293     		str	r3, [sp, #8]
1148:main.c        ****   if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 92


 2963              		.loc 1 1148 0
 2964 0050 0493     		str	r3, [sp, #16]
1149:main.c        ****   {
 2965              		.loc 1 1149 0
 2966 0052 0C22     		movs	r2, #12
 2967 0054 6946     		mov	r1, sp
 2968 0056 1148     		ldr	r0, .L231
 2969 0058 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 2970              	.LVL193:
 2971 005c C8B9     		cbnz	r0, .L230
1154:main.c        **** 
 2972              		.loc 1 1154 0
 2973 005e 0F48     		ldr	r0, .L231
 2974 0060 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 2975              	.LVL194:
1156:main.c        **** 
 2976              		.loc 1 1156 0
 2977 0064 0FB0     		add	sp, sp, #60
 2978              	.LCFI48:
 2979              		.cfi_remember_state
 2980              		.cfi_def_cfa_offset 4
 2981              		@ sp needed
 2982 0066 5DF804FB 		ldr	pc, [sp], #4
 2983              	.L226:
 2984              	.LCFI49:
 2985              		.cfi_restore_state
1124:main.c        ****   }
 2986              		.loc 1 1124 0
 2987 006a 40F26441 		movw	r1, #1124
 2988 006e 0D48     		ldr	r0, .L231+8
 2989 0070 FFF7FEFF 		bl	_Error_Handler
 2990              	.LVL195:
 2991              	.L227:
1130:main.c        ****   }
 2992              		.loc 1 1130 0
 2993 0074 40F26A41 		movw	r1, #1130
 2994 0078 0A48     		ldr	r0, .L231+8
 2995 007a FFF7FEFF 		bl	_Error_Handler
 2996              	.LVL196:
 2997              	.L228:
1135:main.c        ****   }
 2998              		.loc 1 1135 0
 2999 007e 40F26F41 		movw	r1, #1135
 3000 0082 0848     		ldr	r0, .L231+8
 3001 0084 FFF7FEFF 		bl	_Error_Handler
 3002              	.LVL197:
 3003              	.L229:
1142:main.c        ****   }
 3004              		.loc 1 1142 0
 3005 0088 40F27641 		movw	r1, #1142
 3006 008c 0548     		ldr	r0, .L231+8
 3007 008e FFF7FEFF 		bl	_Error_Handler
 3008              	.LVL198:
 3009              	.L230:
1151:main.c        ****   }
 3010              		.loc 1 1151 0
 3011 0092 40F27F41 		movw	r1, #1151
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 93


 3012 0096 0348     		ldr	r0, .L231+8
 3013 0098 FFF7FEFF 		bl	_Error_Handler
 3014              	.LVL199:
 3015              	.L232:
 3016              		.align	2
 3017              	.L231:
 3018 009c 00000000 		.word	htim5
 3019 00a0 000C0040 		.word	1073744896
 3020 00a4 00000000 		.word	.LC17
 3021              		.cfi_endproc
 3022              	.LFE180:
 3024              		.section	.text.MX_TIM8_Init,"ax",%progbits
 3025              		.align	1
 3026              		.syntax unified
 3027              		.thumb
 3028              		.thumb_func
 3029              		.fpu fpv5-sp-d16
 3031              	MX_TIM8_Init:
 3032              	.LFB182:
1185:main.c        **** 
 3033              		.loc 1 1185 0
 3034              		.cfi_startproc
 3035              		@ args = 0, pretend = 0, frame = 32
 3036              		@ frame_needed = 0, uses_anonymous_args = 0
 3037 0000 00B5     		push	{lr}
 3038              	.LCFI50:
 3039              		.cfi_def_cfa_offset 4
 3040              		.cfi_offset 14, -4
 3041 0002 89B0     		sub	sp, sp, #36
 3042              	.LCFI51:
 3043              		.cfi_def_cfa_offset 40
1190:main.c        ****   htim8.Init.Prescaler = 0;
 3044              		.loc 1 1190 0
 3045 0004 1848     		ldr	r0, .L241
 3046 0006 194B     		ldr	r3, .L241+4
 3047 0008 0360     		str	r3, [r0]
1191:main.c        ****   htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 3048              		.loc 1 1191 0
 3049 000a 0023     		movs	r3, #0
 3050 000c 4360     		str	r3, [r0, #4]
1192:main.c        ****   htim8.Init.Period = 0;
 3051              		.loc 1 1192 0
 3052 000e 8360     		str	r3, [r0, #8]
1193:main.c        ****   htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 3053              		.loc 1 1193 0
 3054 0010 C360     		str	r3, [r0, #12]
1194:main.c        ****   htim8.Init.RepetitionCounter = 0;
 3055              		.loc 1 1194 0
 3056 0012 0361     		str	r3, [r0, #16]
1195:main.c        ****   htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 3057              		.loc 1 1195 0
 3058 0014 4361     		str	r3, [r0, #20]
1196:main.c        ****   if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 3059              		.loc 1 1196 0
 3060 0016 8361     		str	r3, [r0, #24]
1197:main.c        ****   {
 3061              		.loc 1 1197 0
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 94


 3062 0018 FFF7FEFF 		bl	HAL_TIM_Base_Init
 3063              	.LVL200:
 3064 001c A0B9     		cbnz	r0, .L238
1202:main.c        ****   if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 3065              		.loc 1 1202 0
 3066 001e 08A9     		add	r1, sp, #32
 3067 0020 4FF48053 		mov	r3, #4096
 3068 0024 41F8103D 		str	r3, [r1, #-16]!
1203:main.c        ****   {
 3069              		.loc 1 1203 0
 3070 0028 0F48     		ldr	r0, .L241
 3071 002a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 3072              	.LVL201:
 3073 002e 80B9     		cbnz	r0, .L239
1208:main.c        ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 3074              		.loc 1 1208 0
 3075 0030 0023     		movs	r3, #0
 3076 0032 0193     		str	r3, [sp, #4]
1209:main.c        ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 3077              		.loc 1 1209 0
 3078 0034 0293     		str	r3, [sp, #8]
1210:main.c        ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 3079              		.loc 1 1210 0
 3080 0036 0393     		str	r3, [sp, #12]
1211:main.c        ****   {
 3081              		.loc 1 1211 0
 3082 0038 01A9     		add	r1, sp, #4
 3083 003a 0B48     		ldr	r0, .L241
 3084 003c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 3085              	.LVL202:
 3086 0040 60B9     		cbnz	r0, .L240
1216:main.c        **** 
 3087              		.loc 1 1216 0
 3088 0042 09B0     		add	sp, sp, #36
 3089              	.LCFI52:
 3090              		.cfi_remember_state
 3091              		.cfi_def_cfa_offset 4
 3092              		@ sp needed
 3093 0044 5DF804FB 		ldr	pc, [sp], #4
 3094              	.L238:
 3095              	.LCFI53:
 3096              		.cfi_restore_state
1199:main.c        ****   }
 3097              		.loc 1 1199 0
 3098 0048 40F2AF41 		movw	r1, #1199
 3099 004c 0848     		ldr	r0, .L241+8
 3100 004e FFF7FEFF 		bl	_Error_Handler
 3101              	.LVL203:
 3102              	.L239:
1205:main.c        ****   }
 3103              		.loc 1 1205 0
 3104 0052 40F2B541 		movw	r1, #1205
 3105 0056 0648     		ldr	r0, .L241+8
 3106 0058 FFF7FEFF 		bl	_Error_Handler
 3107              	.LVL204:
 3108              	.L240:
1213:main.c        ****   }
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 95


 3109              		.loc 1 1213 0
 3110 005c 40F2BD41 		movw	r1, #1213
 3111 0060 0348     		ldr	r0, .L241+8
 3112 0062 FFF7FEFF 		bl	_Error_Handler
 3113              	.LVL205:
 3114              	.L242:
 3115 0066 00BF     		.align	2
 3116              	.L241:
 3117 0068 00000000 		.word	htim8
 3118 006c 00040140 		.word	1073808384
 3119 0070 00000000 		.word	.LC17
 3120              		.cfi_endproc
 3121              	.LFE182:
 3123              		.section	.text.MX_TIM12_Init,"ax",%progbits
 3124              		.align	1
 3125              		.syntax unified
 3126              		.thumb
 3127              		.thumb_func
 3128              		.fpu fpv5-sp-d16
 3130              	MX_TIM12_Init:
 3131              	.LFB183:
1220:main.c        **** 
 3132              		.loc 1 1220 0
 3133              		.cfi_startproc
 3134              		@ args = 0, pretend = 0, frame = 32
 3135              		@ frame_needed = 0, uses_anonymous_args = 0
 3136 0000 00B5     		push	{lr}
 3137              	.LCFI54:
 3138              		.cfi_def_cfa_offset 4
 3139              		.cfi_offset 14, -4
 3140 0002 89B0     		sub	sp, sp, #36
 3141              	.LCFI55:
 3142              		.cfi_def_cfa_offset 40
1224:main.c        ****   htim12.Init.Prescaler = 0;
 3143              		.loc 1 1224 0
 3144 0004 1348     		ldr	r0, .L249
 3145 0006 144B     		ldr	r3, .L249+4
 3146 0008 0360     		str	r3, [r0]
1225:main.c        ****   htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 3147              		.loc 1 1225 0
 3148 000a 0023     		movs	r3, #0
 3149 000c 4360     		str	r3, [r0, #4]
1226:main.c        ****   htim12.Init.Period = 0;
 3150              		.loc 1 1226 0
 3151 000e 8360     		str	r3, [r0, #8]
1227:main.c        ****   htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 3152              		.loc 1 1227 0
 3153 0010 C360     		str	r3, [r0, #12]
1228:main.c        ****   htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 3154              		.loc 1 1228 0
 3155 0012 0361     		str	r3, [r0, #16]
1229:main.c        ****   if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 3156              		.loc 1 1229 0
 3157 0014 8361     		str	r3, [r0, #24]
1230:main.c        ****   {
 3158              		.loc 1 1230 0
 3159 0016 FFF7FEFF 		bl	HAL_TIM_PWM_Init
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 96


 3160              	.LVL206:
 3161 001a 80B9     		cbnz	r0, .L247
1235:main.c        ****   sConfigOC.Pulse = 0;
 3162              		.loc 1 1235 0
 3163 001c 6023     		movs	r3, #96
 3164 001e 0193     		str	r3, [sp, #4]
1236:main.c        ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 3165              		.loc 1 1236 0
 3166 0020 0022     		movs	r2, #0
 3167 0022 0292     		str	r2, [sp, #8]
1237:main.c        ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 3168              		.loc 1 1237 0
 3169 0024 0392     		str	r2, [sp, #12]
1238:main.c        ****   if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 3170              		.loc 1 1238 0
 3171 0026 0592     		str	r2, [sp, #20]
1239:main.c        ****   {
 3172              		.loc 1 1239 0
 3173 0028 01A9     		add	r1, sp, #4
 3174 002a 0A48     		ldr	r0, .L249
 3175 002c FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 3176              	.LVL207:
 3177 0030 50B9     		cbnz	r0, .L248
1244:main.c        **** 
 3178              		.loc 1 1244 0
 3179 0032 0848     		ldr	r0, .L249
 3180 0034 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 3181              	.LVL208:
1246:main.c        **** 
 3182              		.loc 1 1246 0
 3183 0038 09B0     		add	sp, sp, #36
 3184              	.LCFI56:
 3185              		.cfi_remember_state
 3186              		.cfi_def_cfa_offset 4
 3187              		@ sp needed
 3188 003a 5DF804FB 		ldr	pc, [sp], #4
 3189              	.L247:
 3190              	.LCFI57:
 3191              		.cfi_restore_state
1232:main.c        ****   }
 3192              		.loc 1 1232 0
 3193 003e 4FF49A61 		mov	r1, #1232
 3194 0042 0648     		ldr	r0, .L249+8
 3195 0044 FFF7FEFF 		bl	_Error_Handler
 3196              	.LVL209:
 3197              	.L248:
1241:main.c        ****   }
 3198              		.loc 1 1241 0
 3199 0048 40F2D941 		movw	r1, #1241
 3200 004c 0348     		ldr	r0, .L249+8
 3201 004e FFF7FEFF 		bl	_Error_Handler
 3202              	.LVL210:
 3203              	.L250:
 3204 0052 00BF     		.align	2
 3205              	.L249:
 3206 0054 00000000 		.word	htim12
 3207 0058 00180040 		.word	1073747968
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 97


 3208 005c 00000000 		.word	.LC17
 3209              		.cfi_endproc
 3210              	.LFE183:
 3212              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 3213              		.align	1
 3214              		.syntax unified
 3215              		.thumb
 3216              		.thumb_func
 3217              		.fpu fpv5-sp-d16
 3219              	MX_USART1_UART_Init:
 3220              	.LFB184:
1250:main.c        **** 
 3221              		.loc 1 1250 0
 3222              		.cfi_startproc
 3223              		@ args = 0, pretend = 0, frame = 0
 3224              		@ frame_needed = 0, uses_anonymous_args = 0
 3225 0000 08B5     		push	{r3, lr}
 3226              	.LCFI58:
 3227              		.cfi_def_cfa_offset 8
 3228              		.cfi_offset 3, -8
 3229              		.cfi_offset 14, -4
1252:main.c        ****   huart1.Init.BaudRate = 115200;
 3230              		.loc 1 1252 0
 3231 0002 0C48     		ldr	r0, .L255
 3232 0004 0C4B     		ldr	r3, .L255+4
 3233 0006 0360     		str	r3, [r0]
1253:main.c        ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 3234              		.loc 1 1253 0
 3235 0008 4FF4E133 		mov	r3, #115200
 3236 000c 4360     		str	r3, [r0, #4]
1254:main.c        ****   huart1.Init.StopBits = UART_STOPBITS_1;
 3237              		.loc 1 1254 0
 3238 000e 0023     		movs	r3, #0
 3239 0010 8360     		str	r3, [r0, #8]
1255:main.c        ****   huart1.Init.Parity = UART_PARITY_NONE;
 3240              		.loc 1 1255 0
 3241 0012 C360     		str	r3, [r0, #12]
1256:main.c        ****   huart1.Init.Mode = UART_MODE_TX_RX;
 3242              		.loc 1 1256 0
 3243 0014 0361     		str	r3, [r0, #16]
1257:main.c        ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 3244              		.loc 1 1257 0
 3245 0016 0C22     		movs	r2, #12
 3246 0018 4261     		str	r2, [r0, #20]
1258:main.c        ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 3247              		.loc 1 1258 0
 3248 001a 8361     		str	r3, [r0, #24]
1259:main.c        ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 3249              		.loc 1 1259 0
 3250 001c C361     		str	r3, [r0, #28]
1260:main.c        ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 3251              		.loc 1 1260 0
 3252 001e 0362     		str	r3, [r0, #32]
1261:main.c        ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 3253              		.loc 1 1261 0
 3254 0020 4362     		str	r3, [r0, #36]
1262:main.c        ****   {
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 98


 3255              		.loc 1 1262 0
 3256 0022 FFF7FEFF 		bl	HAL_UART_Init
 3257              	.LVL211:
 3258 0026 00B9     		cbnz	r0, .L254
 3259 0028 08BD     		pop	{r3, pc}
 3260              	.L254:
1264:main.c        ****   }
 3261              		.loc 1 1264 0
 3262 002a 4FF49E61 		mov	r1, #1264
 3263 002e 0348     		ldr	r0, .L255+8
 3264 0030 FFF7FEFF 		bl	_Error_Handler
 3265              	.LVL212:
 3266              	.L256:
 3267              		.align	2
 3268              	.L255:
 3269 0034 00000000 		.word	huart1
 3270 0038 00100140 		.word	1073811456
 3271 003c 00000000 		.word	.LC17
 3272              		.cfi_endproc
 3273              	.LFE184:
 3275              		.section	.text.MX_USART6_UART_Init,"ax",%progbits
 3276              		.align	1
 3277              		.syntax unified
 3278              		.thumb
 3279              		.thumb_func
 3280              		.fpu fpv5-sp-d16
 3282              	MX_USART6_UART_Init:
 3283              	.LFB185:
1271:main.c        **** 
 3284              		.loc 1 1271 0
 3285              		.cfi_startproc
 3286              		@ args = 0, pretend = 0, frame = 0
 3287              		@ frame_needed = 0, uses_anonymous_args = 0
 3288 0000 08B5     		push	{r3, lr}
 3289              	.LCFI59:
 3290              		.cfi_def_cfa_offset 8
 3291              		.cfi_offset 3, -8
 3292              		.cfi_offset 14, -4
1273:main.c        ****   huart6.Init.BaudRate = 115200;
 3293              		.loc 1 1273 0
 3294 0002 0C48     		ldr	r0, .L261
 3295 0004 0C4B     		ldr	r3, .L261+4
 3296 0006 0360     		str	r3, [r0]
1274:main.c        ****   huart6.Init.WordLength = UART_WORDLENGTH_8B;
 3297              		.loc 1 1274 0
 3298 0008 4FF4E133 		mov	r3, #115200
 3299 000c 4360     		str	r3, [r0, #4]
1275:main.c        ****   huart6.Init.StopBits = UART_STOPBITS_1;
 3300              		.loc 1 1275 0
 3301 000e 0023     		movs	r3, #0
 3302 0010 8360     		str	r3, [r0, #8]
1276:main.c        ****   huart6.Init.Parity = UART_PARITY_NONE;
 3303              		.loc 1 1276 0
 3304 0012 C360     		str	r3, [r0, #12]
1277:main.c        ****   huart6.Init.Mode = UART_MODE_TX_RX;
 3305              		.loc 1 1277 0
 3306 0014 0361     		str	r3, [r0, #16]
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 99


1278:main.c        ****   huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 3307              		.loc 1 1278 0
 3308 0016 0C22     		movs	r2, #12
 3309 0018 4261     		str	r2, [r0, #20]
1279:main.c        ****   huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 3310              		.loc 1 1279 0
 3311 001a 8361     		str	r3, [r0, #24]
1280:main.c        ****   huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 3312              		.loc 1 1280 0
 3313 001c C361     		str	r3, [r0, #28]
1281:main.c        ****   huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 3314              		.loc 1 1281 0
 3315 001e 0362     		str	r3, [r0, #32]
1282:main.c        ****   if (HAL_UART_Init(&huart6) != HAL_OK)
 3316              		.loc 1 1282 0
 3317 0020 4362     		str	r3, [r0, #36]
1283:main.c        ****   {
 3318              		.loc 1 1283 0
 3319 0022 FFF7FEFF 		bl	HAL_UART_Init
 3320              	.LVL213:
 3321 0026 00B9     		cbnz	r0, .L260
 3322 0028 08BD     		pop	{r3, pc}
 3323              	.L260:
1285:main.c        ****   }
 3324              		.loc 1 1285 0
 3325 002a 40F20551 		movw	r1, #1285
 3326 002e 0348     		ldr	r0, .L261+8
 3327 0030 FFF7FEFF 		bl	_Error_Handler
 3328              	.LVL214:
 3329              	.L262:
 3330              		.align	2
 3331              	.L261:
 3332 0034 00000000 		.word	huart6
 3333 0038 00140140 		.word	1073812480
 3334 003c 00000000 		.word	.LC17
 3335              		.cfi_endproc
 3336              	.LFE185:
 3338              		.section	.text.MX_TIM7_Init,"ax",%progbits
 3339              		.align	1
 3340              		.syntax unified
 3341              		.thumb
 3342              		.thumb_func
 3343              		.fpu fpv5-sp-d16
 3345              	MX_TIM7_Init:
 3346              	.LFB181:
1160:main.c        **** 
 3347              		.loc 1 1160 0
 3348              		.cfi_startproc
 3349              		@ args = 0, pretend = 0, frame = 16
 3350              		@ frame_needed = 0, uses_anonymous_args = 0
 3351 0000 00B5     		push	{lr}
 3352              	.LCFI60:
 3353              		.cfi_def_cfa_offset 4
 3354              		.cfi_offset 14, -4
 3355 0002 85B0     		sub	sp, sp, #20
 3356              	.LCFI61:
 3357              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 100


1164:main.c        ****   htim7.Init.Prescaler = 0;
 3358              		.loc 1 1164 0
 3359 0004 0F48     		ldr	r0, .L269
 3360 0006 104B     		ldr	r3, .L269+4
 3361 0008 0360     		str	r3, [r0]
1165:main.c        ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 3362              		.loc 1 1165 0
 3363 000a 0023     		movs	r3, #0
 3364 000c 4360     		str	r3, [r0, #4]
1166:main.c        ****   htim7.Init.Period = 0;
 3365              		.loc 1 1166 0
 3366 000e 8360     		str	r3, [r0, #8]
1167:main.c        ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 3367              		.loc 1 1167 0
 3368 0010 C360     		str	r3, [r0, #12]
1168:main.c        ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 3369              		.loc 1 1168 0
 3370 0012 8361     		str	r3, [r0, #24]
1169:main.c        ****   {
 3371              		.loc 1 1169 0
 3372 0014 FFF7FEFF 		bl	HAL_TIM_Base_Init
 3373              	.LVL215:
 3374 0018 50B9     		cbnz	r0, .L267
1174:main.c        ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 3375              		.loc 1 1174 0
 3376 001a 0023     		movs	r3, #0
 3377 001c 0193     		str	r3, [sp, #4]
1175:main.c        ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 3378              		.loc 1 1175 0
 3379 001e 0393     		str	r3, [sp, #12]
1176:main.c        ****   {
 3380              		.loc 1 1176 0
 3381 0020 01A9     		add	r1, sp, #4
 3382 0022 0848     		ldr	r0, .L269
 3383 0024 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 3384              	.LVL216:
 3385 0028 38B9     		cbnz	r0, .L268
1181:main.c        **** 
 3386              		.loc 1 1181 0
 3387 002a 05B0     		add	sp, sp, #20
 3388              	.LCFI62:
 3389              		.cfi_remember_state
 3390              		.cfi_def_cfa_offset 4
 3391              		@ sp needed
 3392 002c 5DF804FB 		ldr	pc, [sp], #4
 3393              	.L267:
 3394              	.LCFI63:
 3395              		.cfi_restore_state
1171:main.c        ****   }
 3396              		.loc 1 1171 0
 3397 0030 40F29341 		movw	r1, #1171
 3398 0034 0548     		ldr	r0, .L269+8
 3399 0036 FFF7FEFF 		bl	_Error_Handler
 3400              	.LVL217:
 3401              	.L268:
1178:main.c        ****   }
 3402              		.loc 1 1178 0
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 101


 3403 003a 40F29A41 		movw	r1, #1178
 3404 003e 0348     		ldr	r0, .L269+8
 3405 0040 FFF7FEFF 		bl	_Error_Handler
 3406              	.LVL218:
 3407              	.L270:
 3408              		.align	2
 3409              	.L269:
 3410 0044 00000000 		.word	htim7
 3411 0048 00140040 		.word	1073746944
 3412 004c 00000000 		.word	.LC17
 3413              		.cfi_endproc
 3414              	.LFE181:
 3416              		.section	.text.SystemClock_Config,"ax",%progbits
 3417              		.align	1
 3418              		.global	SystemClock_Config
 3419              		.syntax unified
 3420              		.thumb
 3421              		.thumb_func
 3422              		.fpu fpv5-sp-d16
 3424              	SystemClock_Config:
 3425              	.LFB163:
 395:main.c        **** 
 3426              		.loc 1 395 0
 3427              		.cfi_startproc
 3428              		@ args = 0, pretend = 0, frame = 208
 3429              		@ frame_needed = 0, uses_anonymous_args = 0
 3430 0000 00B5     		push	{lr}
 3431              	.LCFI64:
 3432              		.cfi_def_cfa_offset 4
 3433              		.cfi_offset 14, -4
 3434 0002 B5B0     		sub	sp, sp, #212
 3435              	.LCFI65:
 3436              		.cfi_def_cfa_offset 216
 3437              	.LBB17:
 403:main.c        **** 
 3438              		.loc 1 403 0
 3439 0004 474B     		ldr	r3, .L281
 3440 0006 1A6C     		ldr	r2, [r3, #64]
 3441 0008 42F08052 		orr	r2, r2, #268435456
 3442 000c 1A64     		str	r2, [r3, #64]
 3443 000e 1B6C     		ldr	r3, [r3, #64]
 3444 0010 03F08053 		and	r3, r3, #268435456
 3445 0014 0093     		str	r3, [sp]
 3446 0016 009B     		ldr	r3, [sp]
 3447              	.LBE17:
 3448              	.LBB18:
 405:main.c        **** 
 3449              		.loc 1 405 0
 3450 0018 434B     		ldr	r3, .L281+4
 3451 001a 1A68     		ldr	r2, [r3]
 3452 001c 42F44042 		orr	r2, r2, #49152
 3453 0020 1A60     		str	r2, [r3]
 3454 0022 1B68     		ldr	r3, [r3]
 3455 0024 03F44043 		and	r3, r3, #49152
 3456 0028 0193     		str	r3, [sp, #4]
 3457 002a 019B     		ldr	r3, [sp, #4]
 3458              	.LBE18:
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 102


 409:main.c        ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 3459              		.loc 1 409 0
 3460 002c 0923     		movs	r3, #9
 3461 002e 2893     		str	r3, [sp, #160]
 410:main.c        ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 3462              		.loc 1 410 0
 3463 0030 4FF48033 		mov	r3, #65536
 3464 0034 2993     		str	r3, [sp, #164]
 411:main.c        ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 3465              		.loc 1 411 0
 3466 0036 0123     		movs	r3, #1
 3467 0038 2D93     		str	r3, [sp, #180]
 412:main.c        ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 3468              		.loc 1 412 0
 3469 003a 0223     		movs	r3, #2
 3470 003c 2E93     		str	r3, [sp, #184]
 413:main.c        ****   RCC_OscInitStruct.PLL.PLLM = 25;
 3471              		.loc 1 413 0
 3472 003e 4FF48002 		mov	r2, #4194304
 3473 0042 2F92     		str	r2, [sp, #188]
 414:main.c        ****   RCC_OscInitStruct.PLL.PLLN = 400;
 3474              		.loc 1 414 0
 3475 0044 1922     		movs	r2, #25
 3476 0046 3092     		str	r2, [sp, #192]
 415:main.c        ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 3477              		.loc 1 415 0
 3478 0048 4FF4C872 		mov	r2, #400
 3479 004c 3192     		str	r2, [sp, #196]
 416:main.c        ****   RCC_OscInitStruct.PLL.PLLQ = 8;
 3480              		.loc 1 416 0
 3481 004e 3293     		str	r3, [sp, #200]
 417:main.c        ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 3482              		.loc 1 417 0
 3483 0050 0823     		movs	r3, #8
 3484 0052 3393     		str	r3, [sp, #204]
 418:main.c        ****   {
 3485              		.loc 1 418 0
 3486 0054 28A8     		add	r0, sp, #160
 3487 0056 FFF7FEFF 		bl	HAL_RCC_OscConfig
 3488              	.LVL219:
 3489 005a 0028     		cmp	r0, #0
 3490 005c 4ED1     		bne	.L277
 425:main.c        ****   {
 3491              		.loc 1 425 0
 3492 005e FFF7FEFF 		bl	HAL_PWREx_EnableOverDrive
 3493              	.LVL220:
 3494 0062 0028     		cmp	r0, #0
 3495 0064 4FD1     		bne	.L278
 432:main.c        ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 3496              		.loc 1 432 0
 3497 0066 0F23     		movs	r3, #15
 3498 0068 2393     		str	r3, [sp, #140]
 434:main.c        ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 3499              		.loc 1 434 0
 3500 006a 0223     		movs	r3, #2
 3501 006c 2493     		str	r3, [sp, #144]
 435:main.c        ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 103


 3502              		.loc 1 435 0
 3503 006e 0023     		movs	r3, #0
 3504 0070 2593     		str	r3, [sp, #148]
 436:main.c        ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 3505              		.loc 1 436 0
 3506 0072 4FF4A053 		mov	r3, #5120
 3507 0076 2693     		str	r3, [sp, #152]
 437:main.c        **** 
 3508              		.loc 1 437 0
 3509 0078 4FF48053 		mov	r3, #4096
 3510 007c 2793     		str	r3, [sp, #156]
 439:main.c        ****   {
 3511              		.loc 1 439 0
 3512 007e 0621     		movs	r1, #6
 3513 0080 23A8     		add	r0, sp, #140
 3514 0082 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 3515              	.LVL221:
 3516 0086 0028     		cmp	r0, #0
 3517 0088 42D1     		bne	.L279
 444:main.c        ****                               |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 3518              		.loc 1 444 0
 3519 008a 284B     		ldr	r3, .L281+8
 3520 008c 0293     		str	r3, [sp, #8]
 449:main.c        ****   PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 3521              		.loc 1 449 0
 3522 008e 6423     		movs	r3, #100
 3523 0090 0393     		str	r3, [sp, #12]
 450:main.c        ****   PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 3524              		.loc 1 450 0
 3525 0092 0223     		movs	r3, #2
 3526 0094 0693     		str	r3, [sp, #24]
 451:main.c        ****   PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 3527              		.loc 1 451 0
 3528 0096 0493     		str	r3, [sp, #16]
 452:main.c        ****   PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 3529              		.loc 1 452 0
 3530 0098 0593     		str	r3, [sp, #20]
 453:main.c        ****   PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 3531              		.loc 1 453 0
 3532 009a C023     		movs	r3, #192
 3533 009c 0793     		str	r3, [sp, #28]
 454:main.c        ****   PeriphClkInitStruct.PLLSAI.PLLSAIQ = 4;
 3534              		.loc 1 454 0
 3535 009e 0423     		movs	r3, #4
 3536 00a0 0993     		str	r3, [sp, #36]
 455:main.c        ****   PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 3537              		.loc 1 455 0
 3538 00a2 0893     		str	r3, [sp, #32]
 456:main.c        ****   PeriphClkInitStruct.PLLI2SDivQ = 1;
 3539              		.loc 1 456 0
 3540 00a4 0123     		movs	r3, #1
 3541 00a6 0A93     		str	r3, [sp, #40]
 457:main.c        ****   PeriphClkInitStruct.PLLSAIDivQ = 1;
 3542              		.loc 1 457 0
 3543 00a8 0B93     		str	r3, [sp, #44]
 458:main.c        ****   PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 3544              		.loc 1 458 0
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 104


 3545 00aa 0C93     		str	r3, [sp, #48]
 459:main.c        ****   PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 3546              		.loc 1 459 0
 3547 00ac 4FF40033 		mov	r3, #131072
 3548 00b0 0D93     		str	r3, [sp, #52]
 460:main.c        ****   PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 3549              		.loc 1 460 0
 3550 00b2 4FF40073 		mov	r3, #512
 3551 00b6 0E93     		str	r3, [sp, #56]
 461:main.c        ****   PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 3552              		.loc 1 461 0
 3553 00b8 0023     		movs	r3, #0
 3554 00ba 1293     		str	r3, [sp, #72]
 462:main.c        ****   PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 3555              		.loc 1 462 0
 3556 00bc 1393     		str	r3, [sp, #76]
 463:main.c        ****   PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 3557              		.loc 1 463 0
 3558 00be 1893     		str	r3, [sp, #96]
 464:main.c        ****   PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 3559              		.loc 1 464 0
 3560 00c0 1B93     		str	r3, [sp, #108]
 465:main.c        ****   PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 3561              		.loc 1 465 0
 3562 00c2 1D93     		str	r3, [sp, #116]
 466:main.c        ****   PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 3563              		.loc 1 466 0
 3564 00c4 4FF00062 		mov	r2, #134217728
 3565 00c8 2192     		str	r2, [sp, #132]
 467:main.c        ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 3566              		.loc 1 467 0
 3567 00ca 2293     		str	r3, [sp, #136]
 468:main.c        ****   {
 3568              		.loc 1 468 0
 3569 00cc 02A8     		add	r0, sp, #8
 3570 00ce FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 3571              	.LVL222:
 3572 00d2 10BB     		cbnz	r0, .L280
 475:main.c        **** 
 3573              		.loc 1 475 0
 3574 00d4 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 3575              	.LVL223:
 3576 00d8 154B     		ldr	r3, .L281+12
 3577 00da A3FB0030 		umull	r3, r0, r3, r0
 3578 00de 8009     		lsrs	r0, r0, #6
 3579 00e0 FFF7FEFF 		bl	HAL_SYSTICK_Config
 3580              	.LVL224:
 479:main.c        **** 
 3581              		.loc 1 479 0
 3582 00e4 0420     		movs	r0, #4
 3583 00e6 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 3584              	.LVL225:
 482:main.c        **** }
 3585              		.loc 1 482 0
 3586 00ea 0022     		movs	r2, #0
 3587 00ec 0F21     		movs	r1, #15
 3588 00ee 4FF0FF30 		mov	r0, #-1
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 105


 3589 00f2 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 3590              	.LVL226:
 483:main.c        **** 
 3591              		.loc 1 483 0
 3592 00f6 35B0     		add	sp, sp, #212
 3593              	.LCFI66:
 3594              		.cfi_remember_state
 3595              		.cfi_def_cfa_offset 4
 3596              		@ sp needed
 3597 00f8 5DF804FB 		ldr	pc, [sp], #4
 3598              	.L277:
 3599              	.LCFI67:
 3600              		.cfi_restore_state
 420:main.c        ****   }
 3601              		.loc 1 420 0
 3602 00fc 4FF4D271 		mov	r1, #420
 3603 0100 0C48     		ldr	r0, .L281+16
 3604 0102 FFF7FEFF 		bl	_Error_Handler
 3605              	.LVL227:
 3606              	.L278:
 427:main.c        ****   }
 3607              		.loc 1 427 0
 3608 0106 40F2AB11 		movw	r1, #427
 3609 010a 0A48     		ldr	r0, .L281+16
 3610 010c FFF7FEFF 		bl	_Error_Handler
 3611              	.LVL228:
 3612              	.L279:
 441:main.c        ****   }
 3613              		.loc 1 441 0
 3614 0110 40F2B911 		movw	r1, #441
 3615 0114 0748     		ldr	r0, .L281+16
 3616 0116 FFF7FEFF 		bl	_Error_Handler
 3617              	.LVL229:
 3618              	.L280:
 470:main.c        ****   }
 3619              		.loc 1 470 0
 3620 011a 4FF4EB71 		mov	r1, #470
 3621 011e 0548     		ldr	r0, .L281+16
 3622 0120 FFF7FEFF 		bl	_Error_Handler
 3623              	.LVL230:
 3624              	.L282:
 3625              		.align	2
 3626              	.L281:
 3627 0124 00380240 		.word	1073887232
 3628 0128 00700040 		.word	1073770496
 3629 012c 6848B101 		.word	28395624
 3630 0130 D34D6210 		.word	274877907
 3631 0134 00000000 		.word	.LC17
 3632              		.cfi_endproc
 3633              	.LFE163:
 3635              		.section	.text.main,"ax",%progbits
 3636              		.align	1
 3637              		.global	main
 3638              		.syntax unified
 3639              		.thumb
 3640              		.thumb_func
 3641              		.fpu fpv5-sp-d16
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 106


 3643              	main:
 3644              	.LFB162:
 286:main.c        ****   /* USER CODE BEGIN 1 */
 3645              		.loc 1 286 0
 3646              		.cfi_startproc
 3647              		@ Volatile: function does not return.
 3648              		@ args = 0, pretend = 0, frame = 24
 3649              		@ frame_needed = 0, uses_anonymous_args = 0
 3650 0000 00B5     		push	{lr}
 3651              	.LCFI68:
 3652              		.cfi_def_cfa_offset 4
 3653              		.cfi_offset 14, -4
 3654 0002 87B0     		sub	sp, sp, #28
 3655              	.LCFI69:
 3656              		.cfi_def_cfa_offset 32
 294:main.c        **** 
 3657              		.loc 1 294 0
 3658 0004 FFF7FEFF 		bl	HAL_Init
 3659              	.LVL231:
 301:main.c        **** 
 3660              		.loc 1 301 0
 3661 0008 FFF7FEFF 		bl	SystemClock_Config
 3662              	.LVL232:
 308:main.c        ****   MX_ADC3_Init();
 3663              		.loc 1 308 0
 3664 000c FFF7FEFF 		bl	MX_GPIO_Init
 3665              	.LVL233:
 309:main.c        ****   MX_CRC_Init();
 3666              		.loc 1 309 0
 3667 0010 FFF7FEFF 		bl	MX_ADC3_Init
 3668              	.LVL234:
 310:main.c        ****   MX_DCMI_Init();
 3669              		.loc 1 310 0
 3670 0014 FFF7FEFF 		bl	MX_CRC_Init
 3671              	.LVL235:
 311:main.c        ****   MX_DMA2D_Init();
 3672              		.loc 1 311 0
 3673 0018 FFF7FEFF 		bl	MX_DCMI_Init
 3674              	.LVL236:
 312:main.c        ****   MX_FMC_Init();
 3675              		.loc 1 312 0
 3676 001c FFF7FEFF 		bl	MX_DMA2D_Init
 3677              	.LVL237:
 313:main.c        ****   MX_I2C1_Init();
 3678              		.loc 1 313 0
 3679 0020 FFF7FEFF 		bl	MX_FMC_Init
 3680              	.LVL238:
 314:main.c        ****   MX_I2C3_Init();
 3681              		.loc 1 314 0
 3682 0024 FFF7FEFF 		bl	MX_I2C1_Init
 3683              	.LVL239:
 315:main.c        ****   MX_LTDC_Init();
 3684              		.loc 1 315 0
 3685 0028 FFF7FEFF 		bl	MX_I2C3_Init
 3686              	.LVL240:
 316:main.c        ****   MX_QUADSPI_Init();
 3687              		.loc 1 316 0
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 107


 3688 002c FFF7FEFF 		bl	MX_LTDC_Init
 3689              	.LVL241:
 317:main.c        ****   MX_RTC_Init();
 3690              		.loc 1 317 0
 3691 0030 FFF7FEFF 		bl	MX_QUADSPI_Init
 3692              	.LVL242:
 318:main.c        ****   MX_SAI2_Init();
 3693              		.loc 1 318 0
 3694 0034 FFF7FEFF 		bl	MX_RTC_Init
 3695              	.LVL243:
 319:main.c        ****   MX_SDMMC1_SD_Init();
 3696              		.loc 1 319 0
 3697 0038 FFF7FEFF 		bl	MX_SAI2_Init
 3698              	.LVL244:
 320:main.c        ****   MX_SPDIFRX_Init();
 3699              		.loc 1 320 0
 3700 003c FFF7FEFF 		bl	MX_SDMMC1_SD_Init
 3701              	.LVL245:
 321:main.c        ****   MX_SPI2_Init();
 3702              		.loc 1 321 0
 3703 0040 FFF7FEFF 		bl	MX_SPDIFRX_Init
 3704              	.LVL246:
 322:main.c        ****   MX_TIM1_Init();
 3705              		.loc 1 322 0
 3706 0044 FFF7FEFF 		bl	MX_SPI2_Init
 3707              	.LVL247:
 323:main.c        ****   MX_TIM2_Init();
 3708              		.loc 1 323 0
 3709 0048 FFF7FEFF 		bl	MX_TIM1_Init
 3710              	.LVL248:
 324:main.c        ****   MX_TIM3_Init();
 3711              		.loc 1 324 0
 3712 004c FFF7FEFF 		bl	MX_TIM2_Init
 3713              	.LVL249:
 325:main.c        ****   MX_TIM5_Init();
 3714              		.loc 1 325 0
 3715 0050 FFF7FEFF 		bl	MX_TIM3_Init
 3716              	.LVL250:
 326:main.c        ****   MX_TIM8_Init();
 3717              		.loc 1 326 0
 3718 0054 FFF7FEFF 		bl	MX_TIM5_Init
 3719              	.LVL251:
 327:main.c        ****   MX_TIM12_Init();
 3720              		.loc 1 327 0
 3721 0058 FFF7FEFF 		bl	MX_TIM8_Init
 3722              	.LVL252:
 328:main.c        ****   MX_USART1_UART_Init();
 3723              		.loc 1 328 0
 3724 005c FFF7FEFF 		bl	MX_TIM12_Init
 3725              	.LVL253:
 329:main.c        ****   MX_USART6_UART_Init();
 3726              		.loc 1 329 0
 3727 0060 FFF7FEFF 		bl	MX_USART1_UART_Init
 3728              	.LVL254:
 330:main.c        ****   MX_TIM7_Init();
 3729              		.loc 1 330 0
 3730 0064 FFF7FEFF 		bl	MX_USART6_UART_Init
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 108


 3731              	.LVL255:
 331:main.c        ****   /* USER CODE BEGIN 2 */
 3732              		.loc 1 331 0
 3733 0068 FFF7FEFF 		bl	MX_TIM7_Init
 3734              	.LVL256:
 333:main.c        **** 
 3735              		.loc 1 333 0
 3736 006c 0E48     		ldr	r0, .L286
 3737 006e FFF7FEFF 		bl	debug_init
 3738              	.LVL257:
 335:main.c        **** 
 3739              		.loc 1 335 0
 3740 0072 0E48     		ldr	r0, .L286+4
 3741 0074 FFF7FEFF 		bl	xprintf
 3742              	.LVL258:
 337:main.c        **** 
 3743              		.loc 1 337 0
 3744 0078 0D48     		ldr	r0, .L286+8
 3745 007a FFF7FEFF 		bl	puts
 3746              	.LVL259:
 339:main.c        **** draw_background();
 3747              		.loc 1 339 0
 3748 007e FFF7FEFF 		bl	lcd_start
 3749              	.LVL260:
 340:main.c        **** initialize_touchscreen();
 3750              		.loc 1 340 0
 3751 0082 FFF7FEFF 		bl	draw_background
 3752              	.LVL261:
 341:main.c        **** 
 3753              		.loc 1 341 0
 3754 0086 FFF7FEFF 		bl	initialize_touchscreen
 3755              	.LVL262:
 359:main.c        ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 3756              		.loc 1 359 0
 3757 008a 01AC     		add	r4, sp, #4
 3758 008c 094D     		ldr	r5, .L286+12
 3759 008e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 3760 0090 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 3761 0092 2B68     		ldr	r3, [r5]
 3762 0094 2360     		str	r3, [r4]
 360:main.c        **** 
 3763              		.loc 1 360 0
 3764 0096 0021     		movs	r1, #0
 3765 0098 01A8     		add	r0, sp, #4
 3766 009a FFF7FEFF 		bl	osThreadCreate
 3767              	.LVL263:
 3768 009e 064B     		ldr	r3, .L286+16
 3769 00a0 1860     		str	r0, [r3]
 372:main.c        ****   
 3770              		.loc 1 372 0
 3771 00a2 FFF7FEFF 		bl	osKernelStart
 3772              	.LVL264:
 3773              	.L284:
 3774 00a6 FEE7     		b	.L284
 3775              	.L287:
 3776              		.align	2
 3777              	.L286:
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 109


 3778 00a8 00000000 		.word	huart1
 3779 00ac 00000000 		.word	.LC18
 3780 00b0 2C000000 		.word	.LC19
 3781 00b4 00000000 		.word	.LANCHOR7
 3782 00b8 00000000 		.word	defaultTaskHandle
 3783              		.cfi_endproc
 3784              	.LFE162:
 3786              		.comm	buff,8192,4
 3787              		.comm	netconn_thread_handle,4,4
 3788              		.comm	defaultTaskHandle,4,4
 3789              		.comm	hsdram1,52,4
 3790              		.comm	huart6,112,4
 3791              		.comm	huart1,112,4
 3792              		.comm	htim12,64,4
 3793              		.comm	htim8,64,4
 3794              		.comm	htim7,64,4
 3795              		.comm	htim5,64,4
 3796              		.comm	htim3,64,4
 3797              		.comm	htim2,64,4
 3798              		.comm	htim1,64,4
 3799              		.comm	hspi2,100,4
 3800              		.comm	hspdif,76,4
 3801              		.comm	hsd1,132,4
 3802              		.comm	hsai_BlockB2,132,4
 3803              		.comm	hsai_BlockA2,132,4
 3804              		.comm	hrtc,32,4
 3805              		.comm	hqspi,76,4
 3806              		.comm	hltdc,168,4
 3807              		.comm	hi2c3,76,4
 3808              		.comm	hi2c1,76,4
 3809              		.comm	hdma2d,64,4
 3810              		.comm	hdcmi,80,4
 3811              		.comm	hcrc,36,4
 3812              		.comm	hadc3,72,4
 3813              		.section	.rodata
 3814              		.align	2
 3815              		.set	.LANCHOR7,. + 0
 3816              	.LC20:
 3817 0000 00000000 		.word	.LC0
 3818 0004 00000000 		.word	StartDefaultTask
 3819 0008 0000     		.short	0
 3820 000a 0000     		.space	2
 3821 000c 00000000 		.word	0
 3822 0010 00100000 		.word	4096
 3823              		.section	.bss.TS_State,"aw",%nobits
 3824              		.align	2
 3825              		.set	.LANCHOR2,. + 0
 3828              	TS_State:
 3829 0000 00000000 		.space	44
 3829      00000000 
 3829      00000000 
 3829      00000000 
 3829      00000000 
 3830              		.section	.bss.buf_offs,"aw",%nobits
 3831              		.set	.LANCHOR6,. + 0
 3834              	buf_offs:
 3835 0000 00       		.space	1
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 110


 3836              		.section	.bss.file,"aw",%nobits
 3837              		.align	2
 3838              		.set	.LANCHOR4,. + 0
 3841              	file:
 3842 0000 00000000 		.space	560
 3842      00000000 
 3842      00000000 
 3842      00000000 
 3842      00000000 
 3843              		.section	.bss.fpos,"aw",%nobits
 3844              		.align	2
 3845              		.set	.LANCHOR5,. + 0
 3848              	fpos:
 3849 0000 00000000 		.space	4
 3850              		.section	.bss.player_state,"aw",%nobits
 3851              		.set	.LANCHOR3,. + 0
 3854              	player_state:
 3855 0000 00       		.space	1
 3856              		.section	.rodata.MX_ADC3_Init.str1.4,"aMS",%progbits,1
 3857              		.align	2
 3858              	.LC17:
 3859 0000 6D61696E 		.ascii	"main.c\000"
 3859      2E6300
 3860              		.section	.rodata.StartDefaultTask.str1.4,"aMS",%progbits,1
 3861              		.align	2
 3862              	.LC2:
 3863 0000 77616974 		.ascii	"waiting for USB mass storage\012\000"
 3863      696E6720 
 3863      666F7220 
 3863      55534220 
 3863      6D617373 
 3864 001e 0000     		.space	2
 3865              	.LC3:
 3866 0020 2E00     		.ascii	".\000"
 3867 0022 0000     		.space	2
 3868              	.LC4:
 3869 0024 696E6974 		.ascii	"initializing audio codec...\012\000"
 3869      69616C69 
 3869      7A696E67 
 3869      20617564 
 3869      696F2063 
 3870 0041 000000   		.space	3
 3871              	.LC5:
 3872 0044 61756469 		.ascii	"audio init OK\012\000"
 3872      6F20696E 
 3872      6974204F 
 3872      4B0A00
 3873 0053 00       		.space	1
 3874              	.LC6:
 3875 0054 61756469 		.ascii	"audio init ERROR\012\000"
 3875      6F20696E 
 3875      69742045 
 3875      52524F52 
 3875      0A00
 3876 0066 0000     		.space	2
 3877              	.LC7:
 3878 0068 4F646562 		.ascii	"Odebrano polecenie a\012\000"
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 111


 3878      72616E6F 
 3878      20706F6C 
 3878      6563656E 
 3878      69652061 
 3879 007e 0000     		.space	2
 3880              	.LC8:
 3881 0080 706C6179 		.ascii	"play command...\012\000"
 3881      20636F6D 
 3881      6D616E64 
 3881      2E2E2E0A 
 3881      00
 3882 0091 000000   		.space	3
 3883              	.LC9:
 3884 0094 616C7265 		.ascii	"already playing\012\000"
 3884      61647920 
 3884      706C6179 
 3884      696E670A 
 3884      00
 3885 00a5 000000   		.space	3
 3886              	.LC10:
 3887 00a8 313A2F74 		.ascii	"1:/testwave.wav\000"
 3887      65737477 
 3887      6176652E 
 3887      77617600 
 3888              	.LC11:
 3889 00b8 77617665 		.ascii	"wave file open OK\012\000"
 3889      2066696C 
 3889      65206F70 
 3889      656E204F 
 3889      4B0A00
 3890 00cb 00       		.space	1
 3891              	.LC12:
 3892 00cc 77617665 		.ascii	"wave file open ERROR, res = %d\012\000"
 3892      2066696C 
 3892      65206F70 
 3892      656E2045 
 3892      52524F52 
 3893              	.LC13:
 3894 00ec 4E696520 		.ascii	"Nie rozpoznane polecenie: %c = %02X\012\000"
 3894      726F7A70 
 3894      6F7A6E61 
 3894      6E652070 
 3894      6F6C6563 
 3895 0111 000000   		.space	3
 3896              	.LC14:
 3897 0114 665F7265 		.ascii	"f_read error on half\012\000"
 3897      61642065 
 3897      72726F72 
 3897      206F6E20 
 3897      68616C66 
 3898 012a 0000     		.space	2
 3899              	.LC15:
 3900 012c 665F7265 		.ascii	"f_read error on full\012\000"
 3900      61642065 
 3900      72726F72 
 3900      206F6E20 
 3900      66756C6C 
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 112


 3901 0142 0000     		.space	2
 3902              	.LC16:
 3903 0144 73746F70 		.ascii	"stop at eof\012\000"
 3903      20617420 
 3903      656F660A 
 3903      00
 3904              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 3905              		.align	2
 3906              	.LC18:
 3907 0000 1B5B303B 		.ascii	"\033[0;32mSTM32F746 Discovery Project\033[0;39m\012"
 3907      33326D53 
 3907      544D3332 
 3907      46373436 
 3907      20446973 
 3908 002a 00       		.ascii	"\000"
 3909 002b 00       		.space	1
 3910              	.LC19:
 3911 002c 52656775 		.ascii	"Regular printf\000"
 3911      6C617220 
 3911      7072696E 
 3911      746600
 3912              		.section	.rodata.str1.4,"aMS",%progbits,1
 3913              		.align	2
 3914              	.LC0:
 3915 0000 64656661 		.ascii	"defaultTask\000"
 3915      756C7454 
 3915      61736B00 
 3916              		.section	.sdram,"aw",%progbits
 3917              		.align	2
 3918              		.set	.LANCHOR0,. + 0
 3919              		.set	.LANCHOR1,. + 521280
 3922              	lcd_image_bg:
 3923 0000 00000000 		.space	522240
 3923      00000000 
 3923      00000000 
 3923      00000000 
 3923      00000000 
 3926              	lcd_image_fg:
 3927 7f800 00000000 		.space	522240
 3927      00000000 
 3927      00000000 
 3927      00000000 
 3927      00000000 
 3928              		.text
 3929              	.Letext0:
 3930              		.file 2 "c:\\gcc_toolchain\\6_2017-q1-update\\arm-none-eabi\\include\\machine\\_default_types.h"
 3931              		.file 3 "c:\\gcc_toolchain\\6_2017-q1-update\\arm-none-eabi\\include\\sys\\_stdint.h"
 3932              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 3933              		.file 5 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 3934              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f746xx.h"
 3935              		.file 7 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 3936              		.file 8 "c:\\gcc_toolchain\\6_2017-q1-update\\arm-none-eabi\\include\\sys\\lock.h"
 3937              		.file 9 "c:\\gcc_toolchain\\6_2017-q1-update\\arm-none-eabi\\include\\sys\\_types.h"
 3938              		.file 10 "c:\\gcc_toolchain\\6_2017-q1-update\\lib\\gcc\\arm-none-eabi\\6.3.1\\include\\stddef.h"
 3939              		.file 11 "c:\\gcc_toolchain\\6_2017-q1-update\\arm-none-eabi\\include\\sys\\reent.h"
 3940              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 3941              		.file 13 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc_ex.h"
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 113


 3942              		.file 14 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc.h"
 3943              		.file 15 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_gpio.h"
 3944              		.file 16 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 3945              		.file 17 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_adc.h"
 3946              		.file 18 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_crc.h"
 3947              		.file 19 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma2d.h"
 3948              		.file 20 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dcmi.h"
 3949              		.file 21 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_eth.h"
 3950              		.file 22 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_ll_fmc.h"
 3951              		.file 23 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_sdram.h"
 3952              		.file 24 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_i2c.h"
 3953              		.file 25 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_ltdc.h"
 3954              		.file 26 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_qspi.h"
 3955              		.file 27 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rtc.h"
 3956              		.file 28 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_sai.h"
 3957              		.file 29 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_ll_sdmmc.h"
 3958              		.file 30 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_sd.h"
 3959              		.file 31 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_spdifrx.h"
 3960              		.file 32 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_spi.h"
 3961              		.file 33 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim.h"
 3962              		.file 34 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim_ex.h"
 3963              		.file 35 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_uart.h"
 3964              		.file 36 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 3965              		.file 37 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 3966              		.file 38 "Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h"
 3967              		.file 39 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 3968              		.file 40 "Middlewares/Third_Party/FatFs/src/integer.h"
 3969              		.file 41 "c:\\gcc_toolchain\\6_2017-q1-update\\arm-none-eabi\\include\\stdlib.h"
 3970              		.file 42 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_def.h"
 3971              		.file 43 "Middlewares/ST/STM32_USB_Host_Library/Core/Inc/usbh_ctlreq.h"
 3972              		.file 44 "Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc/usbh_msc.h"
 3973              		.file 45 "Middlewares/Third_Party/FatFs/src/ff.h"
 3974              		.file 46 "Middlewares/Third_Party/FatFs/src/diskio.h"
 3975              		.file 47 "Middlewares/Third_Party/FatFs/src/ff_gen_drv.h"
 3976              		.file 48 "Inc/sd_diskio.h"
 3977              		.file 49 "Inc/usbh_diskio.h"
 3978              		.file 50 "Inc/fatfs.h"
 3979              		.file 51 "c:\\gcc_toolchain\\6_2017-q1-update\\arm-none-eabi\\include\\time.h"
 3980              		.file 52 "Middlewares/Third_Party/LwIP/src/include/lwip/arch.h"
 3981              		.file 53 "Middlewares/Third_Party/LwIP/src/include/lwip/memp.h"
 3982              		.file 54 "Middlewares/Third_Party/LwIP/src/include/lwip/priv/memp_priv.h"
 3983              		.file 55 "Middlewares/Third_Party/LwIP/src/include/lwip/err.h"
 3984              		.file 56 "Middlewares/Third_Party/LwIP/src/include/lwip/pbuf.h"
 3985              		.file 57 "Middlewares/Third_Party/LwIP/src/include/lwip/ip4_addr.h"
 3986              		.file 58 "Middlewares/Third_Party/LwIP/src/include/lwip/ip_addr.h"
 3987              		.file 59 "Middlewares/Third_Party/LwIP/src/include/lwip/netif.h"
 3988              		.file 60 "Middlewares/Third_Party/LwIP/src/include/lwip/prot/ip4.h"
 3989              		.file 61 "Middlewares/Third_Party/LwIP/src/include/lwip/prot/ethernet.h"
 3990              		.file 62 "Middlewares/Third_Party/LwIP/src/include/netif/ethernet.h"
 3991              		.file 63 "Middlewares/Third_Party/LwIP/src/include/lwip/ip.h"
 3992              		.file 64 "Middlewares/Third_Party/LwIP/src/include/lwip/udp.h"
 3993              		.file 65 "Middlewares/Third_Party/LwIP/system/arch/sys_arch.h"
 3994              		.file 66 "Middlewares/Third_Party/LwIP/src/include/lwip/timeouts.h"
 3995              		.file 67 "Middlewares/Third_Party/LwIP/src/include/lwip/tcpip.h"
 3996              		.file 68 "Inc/lwip.h"
 3997              		.file 69 "Inc/usb_host.h"
 3998              		.file 70 "Middlewares/Third_Party/LwIP/src/include/lwip/errno.h"
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 114


 3999              		.file 71 "Drivers/BSP/STM32746G-Discovery/../../../Utilities/Fonts/fonts.h"
 4000              		.file 72 "Drivers/BSP/STM32746G-Discovery/../Components/ft5336/../Common/ts.h"
 4001              		.file 73 "Drivers/BSP/STM32746G-Discovery/../Components/ft5336/ft5336.h"
 4002              		.file 74 "Drivers/BSP/STM32746G-Discovery/stm32746g_discovery_ts.h"
 4003              		.file 75 "Drivers/BSP/STM32746G-Discovery/../Components/wm8994/../Common/audio.h"
 4004              		.file 76 "Drivers/BSP/STM32746G-Discovery/../Components/wm8994/wm8994.h"
 4005              		.file 77 "Drivers/BSP/STM32746G-Discovery/stm32746g_discovery_audio.h"
 4006              		.file 78 "Middlewares/Third_Party/LwIP/src/include/lwip/inet.h"
 4007              		.file 79 "Middlewares/Third_Party/LwIP/src/include/lwip/netdb.h"
 4008              		.file 80 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
 4009              		.file 81 "Inc/term_io.h"
 4010              		.file 82 "Drivers/BSP/STM32746G-Discovery/stm32746g_discovery_lcd.h"
 4011              		.file 83 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rtc_ex.h"
 4012              		.file 84 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_i2c_ex.h"
 4013              		.file 85 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_pwr_ex.h"
 4014              		.file 86 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_cortex.h"
 4015              		.file 87 "Inc/dbgu.h"
 4016              		.file 88 "<built-in>"
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 115


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:18     .text.MX_SDMMC1_SD_Init:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:24     .text.MX_SDMMC1_SD_Init:00000000 MX_SDMMC1_SD_Init
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:53     .text.MX_SDMMC1_SD_Init:00000018 $d
                            *COM*:00000084 hsd1
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:59     .text.MX_GPIO_Init:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:65     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:474    .text.MX_GPIO_Init:00000270 $d
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:490    .text.lcd_start:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:496    .text.lcd_start:00000000 lcd_start
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:566    .text.lcd_start:00000064 $d
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:572    .text.__io_putchar:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:579    .text.__io_putchar:00000000 __io_putchar
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:604    .text.__io_putchar:00000014 $d
                            *COM*:00000070 huart1
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:609    .text.inkey:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:616    .text.inkey:00000000 inkey
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:648    .text.inkey:0000001c $d
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:653    .text.draw_background:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:660    .text.draw_background:00000000 draw_background
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:695    .text.StartDefaultTask:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:702    .text.StartDefaultTask:00000000 StartDefaultTask
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1015   .text.StartDefaultTask:000001a4 $d
                            *COM*:00002000 buff
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1045   .text.initialize_touchscreen:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1052   .text.initialize_touchscreen:00000000 initialize_touchscreen
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1091   .text.BSP_AUDIO_OUT_TransferComplete_CallBack:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1098   .text.BSP_AUDIO_OUT_TransferComplete_CallBack:00000000 BSP_AUDIO_OUT_TransferComplete_CallBack
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1113   .text.BSP_AUDIO_OUT_TransferComplete_CallBack:00000008 $d
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1118   .text.BSP_AUDIO_OUT_HalfTransfer_CallBack:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1125   .text.BSP_AUDIO_OUT_HalfTransfer_CallBack:00000000 BSP_AUDIO_OUT_HalfTransfer_CallBack
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1140   .text.BSP_AUDIO_OUT_HalfTransfer_CallBack:00000008 $d
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1145   .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1152   .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1182   .text.HAL_TIM_PeriodElapsedCallback:00000014 $d
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1187   .text._Error_Handler:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1194   .text._Error_Handler:00000000 _Error_Handler
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1209   .text.MX_ADC3_Init:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1215   .text.MX_ADC3_Init:00000000 MX_ADC3_Init
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1302   .text.MX_ADC3_Init:00000060 $d
                            *COM*:00000048 hadc3
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1310   .text.MX_CRC_Init:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1316   .text.MX_CRC_Init:00000000 MX_CRC_Init
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1357   .text.MX_CRC_Init:00000028 $d
                            *COM*:00000024 hcrc
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1364   .text.MX_DCMI_Init:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1370   .text.MX_DCMI_Init:00000000 MX_DCMI_Init
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1422   .text.MX_DCMI_Init:00000034 $d
                            *COM*:00000050 hdcmi
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1429   .text.MX_DMA2D_Init:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1435   .text.MX_DMA2D_Init:00000000 MX_DMA2D_Init
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1491   .text.MX_DMA2D_Init:00000040 $d
                            *COM*:00000040 hdma2d
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1498   .text.MX_FMC_Init:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1504   .text.MX_FMC_Init:00000000 MX_FMC_Init
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1588   .text.MX_FMC_Init:00000060 $d
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 116


                            *COM*:00000034 hsdram1
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1595   .text.MX_I2C1_Init:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1601   .text.MX_I2C1_Init:00000000 MX_I2C1_Init
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1673   .text.MX_I2C1_Init:00000058 $d
                            *COM*:0000004c hi2c1
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1681   .text.MX_I2C3_Init:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1687   .text.MX_I2C3_Init:00000000 MX_I2C3_Init
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1759   .text.MX_I2C3_Init:00000058 $d
                            *COM*:0000004c hi2c3
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1767   .text.MX_LTDC_Init:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1773   .text.MX_LTDC_Init:00000000 MX_LTDC_Init
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1900   .text.MX_LTDC_Init:000000ac $d
                            *COM*:000000a8 hltdc
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1907   .text.MX_QUADSPI_Init:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1913   .text.MX_QUADSPI_Init:00000000 MX_QUADSPI_Init
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1961   .text.MX_QUADSPI_Init:00000030 $d
                            *COM*:0000004c hqspi
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1968   .text.MX_RTC_Init:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:1974   .text.MX_RTC_Init:00000000 MX_RTC_Init
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:2145   .text.MX_RTC_Init:000000f8 $d
                            *COM*:00000020 hrtc
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:2152   .text.MX_SAI2_Init:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:2158   .text.MX_SAI2_Init:00000000 MX_SAI2_Init
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:2299   .text.MX_SAI2_Init:0000009c $d
                            *COM*:00000084 hsai_BlockA2
                            *COM*:00000084 hsai_BlockB2
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:2309   .text.MX_SPDIFRX_Init:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:2315   .text.MX_SPDIFRX_Init:00000000 MX_SPDIFRX_Init
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:2365   .text.MX_SPDIFRX_Init:00000034 $d
                            *COM*:0000004c hspdif
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:2371   .text.MX_SPI2_Init:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:2377   .text.MX_SPI2_Init:00000000 MX_SPI2_Init
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:2438   .text.MX_SPI2_Init:00000048 $d
                            *COM*:00000064 hspi2
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:2445   .text.MX_TIM1_Init:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:2451   .text.MX_TIM1_Init:00000000 MX_TIM1_Init
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:2622   .text.MX_TIM1_Init:000000e4 $d
                            *COM*:00000040 htim1
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:2629   .text.MX_TIM2_Init:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:2635   .text.MX_TIM2_Init:00000000 MX_TIM2_Init
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:2754   .text.MX_TIM2_Init:0000009c $d
                            *COM*:00000040 htim2
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:2760   .text.MX_TIM3_Init:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:2766   .text.MX_TIM3_Init:00000000 MX_TIM3_Init
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:2885   .text.MX_TIM3_Init:0000009c $d
                            *COM*:00000040 htim3
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:2892   .text.MX_TIM5_Init:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:2898   .text.MX_TIM5_Init:00000000 MX_TIM5_Init
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3018   .text.MX_TIM5_Init:0000009c $d
                            *COM*:00000040 htim5
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3025   .text.MX_TIM8_Init:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3031   .text.MX_TIM8_Init:00000000 MX_TIM8_Init
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3117   .text.MX_TIM8_Init:00000068 $d
                            *COM*:00000040 htim8
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3124   .text.MX_TIM12_Init:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3130   .text.MX_TIM12_Init:00000000 MX_TIM12_Init
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3206   .text.MX_TIM12_Init:00000054 $d
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 117


                            *COM*:00000040 htim12
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3213   .text.MX_USART1_UART_Init:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3219   .text.MX_USART1_UART_Init:00000000 MX_USART1_UART_Init
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3269   .text.MX_USART1_UART_Init:00000034 $d
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3276   .text.MX_USART6_UART_Init:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3282   .text.MX_USART6_UART_Init:00000000 MX_USART6_UART_Init
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3332   .text.MX_USART6_UART_Init:00000034 $d
                            *COM*:00000070 huart6
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3339   .text.MX_TIM7_Init:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3345   .text.MX_TIM7_Init:00000000 MX_TIM7_Init
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3410   .text.MX_TIM7_Init:00000044 $d
                            *COM*:00000040 htim7
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3417   .text.SystemClock_Config:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3424   .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3627   .text.SystemClock_Config:00000124 $d
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3636   .text.main:00000000 $t
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3643   .text.main:00000000 main
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3778   .text.main:000000a8 $d
                            *COM*:00000004 defaultTaskHandle
                            *COM*:00000004 netconn_thread_handle
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3814   .rodata:00000000 $d
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3824   .bss.TS_State:00000000 $d
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3828   .bss.TS_State:00000000 TS_State
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3834   .bss.buf_offs:00000000 buf_offs
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3835   .bss.buf_offs:00000000 $d
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3837   .bss.file:00000000 $d
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3841   .bss.file:00000000 file
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3844   .bss.fpos:00000000 $d
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3848   .bss.fpos:00000000 fpos
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3854   .bss.player_state:00000000 player_state
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3855   .bss.player_state:00000000 $d
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3857   .rodata.MX_ADC3_Init.str1.4:00000000 $d
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3861   .rodata.StartDefaultTask.str1.4:00000000 $d
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3905   .rodata.main.str1.4:00000000 $d
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3913   .rodata.str1.4:00000000 $d
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3917   .sdram:00000000 $d
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3922   .sdram:00000000 lcd_image_bg
C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s:3926   .sdram:0007f800 lcd_image_fg
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
BSP_LCD_Init
BSP_LCD_LayerDefaultInit
BSP_LCD_DisplayOn
BSP_LCD_SelectLayer
BSP_LCD_Clear
BSP_LCD_SetBackColor
BSP_LCD_SetColorKeying
BSP_LCD_SetTransparency
BSP_LCD_SetTextColor
BSP_LCD_FillRect
MX_FATFS_Init
MX_USB_HOST_Init
vTaskDelay
xprintf
ARM GAS  C:\Users\MICHA~1\AppData\Local\Temp\ccwS125Z.s 			page 118


BSP_AUDIO_OUT_Init
BSP_AUDIO_OUT_SetAudioFrameSlot
BSP_LCD_FillCircle
BSP_TS_GetState
f_open
BSP_AUDIO_OUT_Play
f_read
BSP_AUDIO_OUT_Stop
f_close
Appli_state
BSP_LCD_GetXSize
BSP_LCD_GetYSize
BSP_TS_Init
HAL_IncTick
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_CRC_Init
HAL_DCMI_Init
HAL_DMA2D_Init
HAL_DMA2D_ConfigLayer
HAL_SDRAM_Init
HAL_I2C_Init
HAL_I2CEx_ConfigAnalogFilter
HAL_I2CEx_ConfigDigitalFilter
HAL_LTDC_Init
HAL_LTDC_ConfigLayer
HAL_QSPI_Init
HAL_RTC_Init
HAL_RTC_SetTime
HAL_RTC_SetDate
HAL_RTC_SetAlarm
HAL_RTCEx_SetTimeStamp
HAL_SAI_Init
HAL_SPDIFRX_Init
HAL_SPI_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_UART_Init
HAL_RCC_OscConfig
HAL_PWREx_EnableOverDrive
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
debug_init
puts
osThreadCreate
osKernelStart
